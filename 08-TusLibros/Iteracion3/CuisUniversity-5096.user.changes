

----STARTUP---- (3 June 2022 23:15:58) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!


----SNAPSHOT----(3 June 2022 23:16:04) CuisUniversity-5096.image priorSource: 4557982!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/3/2022 23:17:23'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/3/2022 23:18:26'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15'!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:18:34'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50474121!
isEmpty
	^true.! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:19:43'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:19:43'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00'!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:21:29'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45'!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/3/2022 23:23:14'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50474144!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:23:24'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:25:47'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50474125!
isEmpty
	^books isEmpty.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:26:24'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:26:24'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:26:24'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:27:08'!
FAILURE!
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58'!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:30:09'!
FAILURE!

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:30:09'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50474155!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:34:13'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:34:13'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:34:13'!
PASSED!

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:34:13'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/3/2022 23:35:39'!
FAILURE!
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07'!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50474212!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

----SNAPSHOT----(3 June 2022 23:38:01) CuisUniversity-5096.image priorSource: 4558172!

----STARTUP---- (4 June 2022 09:45:15) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!


!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/4/2022 10:13:58'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50474252!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50474232!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:14:39'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50474287!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:15:09'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50474318!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:16:27'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43'!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50474334!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:17:08'!
ERROR!

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:17:08'!
ERROR!

!methodRemoval: Cart #initialize stamp: 'FF 6/4/2022 10:17:25'!
initialize 

	books := Bag new.!

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:17:34'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50474113!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50474134!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24'!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:19:24'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32'!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:19:32'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50474384!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50474436!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:20:21'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:20:23'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:20:29'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50474409!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50474486!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:21:09'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47'!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:26:49'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58'!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50474537!
books
	^books! !

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:10'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53'!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/4/2022 10:30:01'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50474276!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

----SNAPSHOT----(5 June 2022 16:30:07) CuisUniversity-5096.image priorSource: 4563593!

----STARTUP---- (6 June 2022 22:45:01) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!


TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/6/2022 22:47:46'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/6/2022 22:51:19'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04'!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 22:52:23'!
ERROR!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50474663!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 22:53:17'!
ERROR!
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31'!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50474676!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 22:53:54'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 22:53:54'!
PASSED!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/6/2022 22:55:23'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42'!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:55:56'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50474720!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:56:34'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/6/2022 22:56:42'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50474744!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:56:56'!
ERROR!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50474760!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:57:58'!
ERROR!
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06'!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50474777!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:58:18'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 22:58:18'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:58:18'!
PASSED!

!methodRemoval: Cashier #checkOut: stamp: 'FF 6/6/2022 22:59:10'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50474648!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50474802!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 23:00:40'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 23:00:44'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 23:00:44'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 23:00:44'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !

----SNAPSHOT----(6 June 2022 23:02:36) CuisUniversity-5096.image priorSource: 4575169!

----STARTUP---- (7 June 2022 16:50:50) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!

!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50474816!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:10:17'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29'!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50474886!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:10:56'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/7/2022 17:11:08'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08'!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50474909!
initializeUsing: aSalesList 
	salesList := aSalesList.! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:11:22'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:11:22'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:11:22'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/7/2022 17:11:22'!
ERROR!

!testRun: #CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/7/2022 17:11:22'!
ERROR!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:11:46'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50474698!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50474939!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:14:55'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/7/2022 17:16:44'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50474842!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50474986!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49'!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/7/2022 17:20:49'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:20:56'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50475025!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:21:54'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04'!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50475099!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:23:18'!
ERROR!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25'!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/7/2022 17:25:09'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/7/2022 17:25:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50475118!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50475139!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:25:24'!
ERROR!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58'!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:28:10'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:28:10'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:28:10'!
ERROR!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:28:10'!
ERROR!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50475157!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50475076!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50475191!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:33:27'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:33:27'!
PASSED!

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FF 6/7/2022 17:33:36'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50474866!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50474958!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50475263!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:40:58'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23'!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50475308!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:48:55'!
ERROR!

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FF 6/7/2022 17:49:33'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FF 6/7/2022 17:49:45'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50475284!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:50:14'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:50:23'!
ERROR!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:50:44'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:50:49'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:50:49'!
ERROR!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:51:56'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:51:56'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:52:04'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:52:04'!
ERROR!

Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/7/2022 17:52:55'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:53:36'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:53:36'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:53:47'!
FAILURE!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50475181!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50475412!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50475423!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50475313!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:58:33'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:58:33'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:58:40'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:58:49'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:58:52'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50475211!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:59:47'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:59:47'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:59:47'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:59:47'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:06:43'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:06:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:06:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:07:04'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:07:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:07:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50475505 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50475246!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:08:21'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:10:23'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50475570 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50475584!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:10:31'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:10:31'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:10:31'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:10:31'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50475336!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:11:43'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:11:43'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:11:43'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:11:43'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50475471!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:13:03'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:13:03'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:13:03'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:13:03'!
PASSED!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25'!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50475434!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22'!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:18:42'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:18:42'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:18:42'!
PASSED!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50475715!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51'!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:28:57'!
ERROR!
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13'!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50475771!
total
	^0.! !

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:29:21'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25'!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:34:37'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50474327!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50475817!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50474339!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/7/2022 18:36:03'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50475827!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50474614!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:36:15'!
ERROR!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:36:15'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50475845!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:37:05'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:37:05'!
ERROR!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:37:05'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:37:05'!
ERROR!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:37:05'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:37:05'!
ERROR!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:37:05'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:37:05'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:37:14'!
ERROR!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:37:14'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50474376!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:38:00'!
ERROR!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:38:00'!
ERROR!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:38:00'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50474499!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:38:45'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:38:46'!
ERROR!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:38:46'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50474582!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50474369!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50474450!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:40:03'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50474527!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50475762!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:41:24'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50475802!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50476064!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:42:50'!
FAILURE!
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50475775!
total
	! !

----SNAPSHOT----(7 June 2022 18:43:47) CuisUniversity-5096.image priorSource: 4582696!
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50476088!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:49:56'!
ERROR!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:49:56'!
ERROR!
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50476094!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:50:28'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FF 6/7/2022 18:50:56'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50475612 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:51:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50475654!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50475750!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50476192 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50475684!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50476246 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FF 6/7/2022 18:52:48'!
ERROR!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50475742!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50476232!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FF 6/7/2022 18:54:52'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:54:52'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:54:52'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:54:52'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FF 6/7/2022 18:54:52'!
PASSED!

----SNAPSHOT----(7 June 2022 18:55:05) CuisUniversity-5096.image priorSource: 4622090!

----STARTUP---- (8 June 2022 17:28:17) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!


!classRemoval: #CreditCard stamp: 'FF 6/8/2022 17:28:23'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'FF 6/8/2022 17:28:24'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FF 6/8/2022 17:28:24'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FF 6/8/2022 17:28:24'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FF 6/8/2022 17:28:25'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Flor\Downloads\IngenieriaI-main\IngenieriaI-main\08-TusLibros\Iteracion2\TusLibros.st----!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:03'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:03'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:03'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15' prior: 50476380!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51' prior: 50476634!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50476855!
isEmpty
	^true.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00' prior: 50476386!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45' prior: 50476637!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:03'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50476869!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50476859!
isEmpty
	^books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58' prior: 50476681!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50476880!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07' prior: 50476676!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50476912!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:04'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50476937!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50476920!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50476966!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18' prior: 50476687!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50476993!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43' prior: 50476629!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50477007!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!methodRemoval: Cart #initialize stamp: 'FF 6/8/2022 17:37:04'!
initialize 

	books := Bag new.!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50476849!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50476862!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24' prior: 50476393!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/8/2022 17:37:04'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32' prior: 50476406!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/8/2022 17:37:04'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50477037!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50477091!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50477063!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50477119!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47' prior: 50476419!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58' prior: 50476645!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50477152!
books
	^books! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53' prior: 50476425!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50476955!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:04'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:04'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:04'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04' prior: 50476468!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50477213!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31' prior: 50476737!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50477224!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:04'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42' prior: 50476483!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50477259!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50477280!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50477293!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06' prior: 50476742!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50477307!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!methodRemoval: Cashier #checkOut: stamp: 'FF 6/8/2022 17:37:05'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50477200!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50477321!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50477335!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29' prior: 50476747!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50477386!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:05'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08' prior: 50476725!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50477407!
initializeUsing: aSalesList 
	salesList := aSalesList.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50477241!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50477418!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50477349!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50477459!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49' prior: 50476499!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/8/2022 17:37:05'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05' prior: 50476752!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50477500!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04' prior: 50476796!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50477570!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25' prior: 50476772!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50477586!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50477607!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58' prior: 50476716!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50477623!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50477549!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50477645!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FF 6/8/2022 17:37:05'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50477368!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50477438!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50477712!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23' prior: 50476779!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50477756!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FF 6/8/2022 17:37:05'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FF 6/8/2022 17:37:05'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50477734!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50477634!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50477817!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50477828!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50477761!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50477665!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' prior: 50476524 overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50477880 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50477694!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50477945 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50477959!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50477780!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50477859!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25' prior: 50476702!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50477839!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22' prior: 50476708!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50478049!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51' prior: 50476434!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13' prior: 50476648!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50478095!
total
	^0.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25' prior: 50476440!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50477002!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50478114!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50477013!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:06'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50478124!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50477169!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50478142!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50477028!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50477132!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50477159!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50477021!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50477105!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50477145!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50478088!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50478102!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50478235!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50478099!
total
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50478256!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50478259!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50477984 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50478013!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50478075!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50478270 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50478030!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50478325 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50478067!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50478311!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:07'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:07'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:07'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15' prior: 50478198!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51' prior: 50476890!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50478416!
isEmpty
	^true.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00' prior: 50478164!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45' prior: 50478153!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:07'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50478430!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50478420!
isEmpty
	^books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58' prior: 50476906!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50478441!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07' prior: 50476932!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50478473!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:07'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50478498!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50478481!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50478527!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18' prior: 50478119!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50478554!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43' prior: 50478136!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50478568!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!methodRemoval: Cart #initialize stamp: 'FF 6/8/2022 17:37:07'!
initialize 

	books := Bag new.!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50478410!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50478423!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24' prior: 50478205!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/8/2022 17:37:07'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32' prior: 50478174!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/8/2022 17:37:07'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50478598!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50478652!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50478624!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50478680!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47' prior: 50478221!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58' prior: 50477156!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50478713!
books
	^books! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53' prior: 50478187!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50478516!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:07'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04' prior: 50477998!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50478774!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31' prior: 50477229!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50478785!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:08'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42' prior: 50478294!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50478820!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:08'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50478841!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50478854!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06' prior: 50477312!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50478868!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!methodRemoval: Cashier #checkOut: stamp: 'FF 6/8/2022 17:37:08'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50478761!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50478882!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50478896!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29' prior: 50477395!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50478947!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:08'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08' prior: 50477413!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50478968!
initializeUsing: aSalesList 
	salesList := aSalesList.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50478802!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50478979!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50478910!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50479020!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49' prior: 50478340!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/8/2022 17:37:08'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05' prior: 50477541!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50479061!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04' prior: 50477579!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50479131!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25' prior: 50477615!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:08'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:08'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50479147!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50479168!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58' prior: 50478369!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50479184!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50479110!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50479206!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FF 6/8/2022 17:37:08'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50478929!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50478999!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50479273!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23' prior: 50477850!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50479317!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FF 6/8/2022 17:37:09'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FF 6/8/2022 17:37:09'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50479295!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:09'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:09'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50479195!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50479378!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50479389!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50479322!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50479226!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' prior: 50478353 overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50479441 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50479255!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50479506 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50479520!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50479341!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50479420!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25' prior: 50478042!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50479400!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22' prior: 50478058!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50479610!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33' prior: 50478378!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51' prior: 50478228!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13' prior: 50478264!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50479657!
total
	^0.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25' prior: 50478246!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50478563!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50479676!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50478574!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:09'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50479686!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50478730!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50479704!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50478589!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50478693!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50478720!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50478582!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50478666!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50478706!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50479650!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50479664!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50479797!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50479661!
total
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50479818!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50479821!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50479545 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:10'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50479574!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50479637!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50479832 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50479591!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50479887 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50479628!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50479873!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:24:42' prior: 50476661!
assertQuantityIsPositive: quantityOfBookToBeAdded 
	(quantityOfBookToBeAdded <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:25:00' prior: 50479715!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:25:52' prior: 50476653!
assertProductExistOnPriceList: aProductToBeAdded 
	(priceList includesKey: aProductToBeAdded) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:26:05' prior: 50479961!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	self assertProductExistOnPriceList: aBook.
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:27:57' prior: 50476448 overrides: 16961394!
setUp! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:10'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:10'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:28:47' prior: 50479988 overrides: 16961394!
setUp

	priceList := Dictionary new.
	priceList at: book1 put: 10 .! !
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:29:14' prior: 50480006 overrides: 16961394!
setUp

	book1 := 'libro 1'.
	
	priceList := Dictionary new.
	priceList at: book1 put: 10 .! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:29:38' prior: 50479760!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: priceList .
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:25' prior: 50479726!
test02EmptyCartAfterAddingABookIsNotEmpty

	|  cart |
	cart := Cart with: priceList.
	
	cart add: 1 of: book1 .
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:48' prior: 50479767!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| cart |
	cart := Cart with: priceList.
	
	self should: [cart add: -1 of: book1.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:22' prior: 50479736!
test04CannotAddAnUncataloguedBook

	| book cart |	
	book := 'uncatolog book'.
	cart := Cart with: priceList .
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:33' prior: 50479783!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: priceList .
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:54' prior: 50479749!
test06CartBookListIncludesBookAfterAdding

	| cart  |
	cart := Cart with: priceList.
	cart add: 2 of: book1 .
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book1).! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:09' prior: 50479790!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: priceList .
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:26' prior: 50479808!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart |

	cart := Cart with: priceList.
	cart add: 2 of: book1.
	
	self assert: 20 equals: cart total.! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:10'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:10'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:10'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:39:34' prior: 50476555!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today Month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:40:01' prior: 50476551 overrides: 16961394!
setUp

	today := Date today.! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:40:08' prior: 50480109!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:41:56' prior: 50479176!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number size < 16 ifTrue: [self error: self class invalidCreditCardNumber].
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 20:42:15' prior: 50476813!
invalidCreditCardNumber
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 20:42:41' prior: 50480149!
invalidCreditCardNumber
	
	^'The credit card number is invalid. The number should be 16 digits'! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:43:06' prior: 50480126!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:43:22' prior: 50480160!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:49:57' prior: 50480139!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	(number size < 16) ifTrue: [^self error: self class invalidCreditCardNumber].
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:50:52' prior: 50480186!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:51:11' prior: 50479140!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:51:14' prior: 50480204!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:52:40'!
test01CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:53:00' prior: 50476567!
test02CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !

!methodRemoval: CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/8/2022 17:37:10'!
test01CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]!
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:56:08' prior: 50480214!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:57:31' prior: 50476580!
test03CardCannotBeCreatedWithValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '']
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:59:43' prior: 50480264!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 21:00:18' prior: 50476819!
invalidExpirationDate
	
	^'The credit card expiration date is invalid. Ypu have to provide a Month of the Year'! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 21:00:20' prior: 50480308!
invalidExpirationDate
	
	^'The credit card expiration date is invalid. You have to provide a Month of the Year'! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:01:26'!
test04ValidCreditCardCanBeCreated
	|card|

	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: card isNil.
		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:02:43'!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	
		! !

!methodRemoval: CreditCardTest #test04ValidCreditCardCanBeCreated stamp: 'FF 6/8/2022 17:37:10'!
test04ValidCreditCardCanBeCreated
	|card|

	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: card isNil.
		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:03:44' prior: 50480328!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:20'!
test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:33' prior: 50476592!
test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired stamp: 'FF 6/8/2022 17:37:11'!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:40' prior: 50476601!
test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/8/2022 17:37:11'!
test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:05:40'!
test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:06:10' prior: 50476610!
test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/8/2022 17:37:11'!
test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:11'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50479856!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50479940!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50479915 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50479902!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:11'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50480466 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50480452!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50480482!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:08:09' prior: 50476511!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!methodRemoval: CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FF 6/8/2022 17:37:11'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:24'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:24'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:24'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15' prior: 50480018!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51' prior: 50478451!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50480598!
isEmpty
	^true.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00' prior: 50480024!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45' prior: 50479979!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:24'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50480612!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50480602!
isEmpty
	^books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58' prior: 50478467!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50480623!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07' prior: 50478493!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50480655!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:24'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50480680!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50480663!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50480709!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18' prior: 50479681!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50480736!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43' prior: 50479698!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50480750!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!methodRemoval: Cart #initialize stamp: 'FF 6/8/2022 17:37:24'!
initialize 

	books := Bag new.!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50480592!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50480605!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24' prior: 50480032!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/8/2022 17:37:24'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32' prior: 50480045!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/8/2022 17:37:24'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50480780!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50480834!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50480806!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50480862!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47' prior: 50480058!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58' prior: 50478717!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50480895!
books
	^books! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53' prior: 50480065!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50480698!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:24'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:24'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:24'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04' prior: 50479559!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50480956!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31' prior: 50478790!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50480967!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:25'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42' prior: 50480435!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50481002!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50481023!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50481036!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06' prior: 50478873!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50481050!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!methodRemoval: Cashier #checkOut: stamp: 'FF 6/8/2022 17:37:25'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50480943!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50481064!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50481078!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29' prior: 50478956!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50481129!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:25'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08' prior: 50478974!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50481150!
initializeUsing: aSalesList 
	salesList := aSalesList.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50480984!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50481161!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50481092!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50481202!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49' prior: 50480534!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/8/2022 17:37:25'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05' prior: 50479102!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50481243!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04' prior: 50480291!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50481313!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25' prior: 50480196!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50481329!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50481350!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58' prior: 50479931!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50481366!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50481292!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50481388!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FF 6/8/2022 17:37:25'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50481111!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50481181!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50481455!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23' prior: 50479411!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50481499!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FF 6/8/2022 17:37:26'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FF 6/8/2022 17:37:26'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50481477!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:26'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:26'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50481377!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50481560!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50481571!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50481504!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50481408!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' prior: 50480504 overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:26'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:26'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:26'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:26'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:26'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:26'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50481623 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50481437!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:26'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50481688 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50481702!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50481523!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50481602!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25' prior: 50479603!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50481582!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22' prior: 50479619!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50481792!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51' prior: 50480074!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13' prior: 50479826!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50481838!
total
	^0.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25' prior: 50480080!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50480745!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50481857!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50480756!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:26'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50481867!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50480912!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50481885!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50480771!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50480875!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50480902!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50480764!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50480848!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50480888!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50481831!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50481845!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50481978!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50481842!
total
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50481999!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50482002!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50481727 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:27'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50481756!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50481818!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50482013 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50481773!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50482068 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50481810!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50482054!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:27'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:27'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:27'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15' prior: 50481941!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51' prior: 50480633!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50482159!
isEmpty
	^true.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00' prior: 50481907!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45' prior: 50481896!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:27'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50482173!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50482163!
isEmpty
	^books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58' prior: 50480649!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50482184!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07' prior: 50480675!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50482216!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:27'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50482241!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50482224!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50482270!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18' prior: 50481862!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50482297!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43' prior: 50481879!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50482311!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!methodRemoval: Cart #initialize stamp: 'FF 6/8/2022 17:37:27'!
initialize 

	books := Bag new.!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50482153!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50482166!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24' prior: 50481948!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/8/2022 17:37:27'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32' prior: 50481917!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/8/2022 17:37:27'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50482341!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50482395!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50482367!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50482423!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47' prior: 50481964!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58' prior: 50480899!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50482456!
books
	^books! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53' prior: 50481930!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50482259!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:27'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:27'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:27'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04' prior: 50481741!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50482517!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31' prior: 50480972!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50482528!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:28'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42' prior: 50482037!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50482563!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50482584!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50482597!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06' prior: 50481055!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50482611!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!methodRemoval: Cashier #checkOut: stamp: 'FF 6/8/2022 17:37:28'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50482504!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50482625!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50482639!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29' prior: 50481138!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50482690!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:28'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08' prior: 50481156!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50482711!
initializeUsing: aSalesList 
	salesList := aSalesList.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50482545!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50482722!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50482653!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50482763!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49' prior: 50482083!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/8/2022 17:37:28'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05' prior: 50481284!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50482804!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04' prior: 50481322!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50482874!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25' prior: 50481358!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50482890!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50482911!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58' prior: 50482112!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50482927!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50482853!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50482949!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FF 6/8/2022 17:37:29'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50482672!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50482742!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50483016!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23' prior: 50481593!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50483060!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FF 6/8/2022 17:37:29'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FF 6/8/2022 17:37:29'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50483038!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:29'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:29'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50482938!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50483121!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50483132!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50483065!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50482969!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' prior: 50482096 overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50483184 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50482998!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50483249 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50483263!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50483084!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50483163!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25' prior: 50481785!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50483143!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22' prior: 50481801!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50483353!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33' prior: 50482121!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51' prior: 50481971!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13' prior: 50482007!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50483400!
total
	^0.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25' prior: 50481989!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50482306!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50483419!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50482317!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:29'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50483429!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50482473!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50483447!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50482332!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50482436!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50482463!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50482325!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50482409!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50482449!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50483393!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50483407!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50483540!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50483404!
total
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50483561!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50483564!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50483288 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:30'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50483317!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50483380!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50483575 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50483334!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50483630 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50483371!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50483616!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:24:42' prior: 50479953!
assertQuantityIsPositive: quantityOfBookToBeAdded 
	(quantityOfBookToBeAdded <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:25:00' prior: 50483458!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:25:52' prior: 50479971!
assertProductExistOnPriceList: aProductToBeAdded 
	(priceList includesKey: aProductToBeAdded) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:26:05' prior: 50483704!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	self assertProductExistOnPriceList: aBook.
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:27:57' prior: 50480012 overrides: 16961394!
setUp! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:30'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:30'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:28:47' prior: 50483731 overrides: 16961394!
setUp

	priceList := Dictionary new.
	priceList at: book1 put: 10 .! !
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:29:14' prior: 50483749 overrides: 16961394!
setUp

	book1 := 'libro 1'.
	
	priceList := Dictionary new.
	priceList at: book1 put: 10 .! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:29:38' prior: 50483503!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: priceList .
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:25' prior: 50483469!
test02EmptyCartAfterAddingABookIsNotEmpty

	|  cart |
	cart := Cart with: priceList.
	
	cart add: 1 of: book1 .
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:48' prior: 50483510!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| cart |
	cart := Cart with: priceList.
	
	self should: [cart add: -1 of: book1.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:22' prior: 50483479!
test04CannotAddAnUncataloguedBook

	| book cart |	
	book := 'uncatolog book'.
	cart := Cart with: priceList .
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:33' prior: 50483526!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: priceList .
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:54' prior: 50483492!
test06CartBookListIncludesBookAfterAdding

	| cart  |
	cart := Cart with: priceList.
	cart add: 2 of: book1 .
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book1).! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:09' prior: 50483533!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: priceList .
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:26' prior: 50483551!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart |

	cart := Cart with: priceList.
	cart add: 2 of: book1.
	
	self assert: 20 equals: cart total.! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:30'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:30'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:30'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:39:34' prior: 50480173!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today Month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:40:01' prior: 50480122 overrides: 16961394!
setUp

	today := Date today.! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:40:08' prior: 50483852!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:41:56' prior: 50482919!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number size < 16 ifTrue: [self error: self class invalidCreditCardNumber].
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 20:42:15' prior: 50480154!
invalidCreditCardNumber
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 20:42:41' prior: 50483892!
invalidCreditCardNumber
	
	^'The credit card number is invalid. The number should be 16 digits'! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:43:06' prior: 50483869!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:43:22' prior: 50483903!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:49:57' prior: 50483882!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	(number size < 16) ifTrue: [^self error: self class invalidCreditCardNumber].
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:50:52' prior: 50483929!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:51:11' prior: 50482883!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:51:14' prior: 50483947!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:52:40'!
test01CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:53:00' prior: 50480236!
test02CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !

!methodRemoval: CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/8/2022 17:37:30'!
test01CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]!
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:56:08' prior: 50483957!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:57:31' prior: 50480278!
test03CardCannotBeCreatedWithValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '']
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:59:43' prior: 50484007!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 21:00:18' prior: 50480315!
invalidExpirationDate
	
	^'The credit card expiration date is invalid. Ypu have to provide a Month of the Year'! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 21:00:20' prior: 50484051!
invalidExpirationDate
	
	^'The credit card expiration date is invalid. You have to provide a Month of the Year'! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:01:26'!
test04ValidCreditCardCanBeCreated
	|card|

	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: card isNil.
		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:02:43'!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	
		! !

!methodRemoval: CreditCardTest #test04ValidCreditCardCanBeCreated stamp: 'FF 6/8/2022 17:37:30'!
test04ValidCreditCardCanBeCreated
	|card|

	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: card isNil.
		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:03:44' prior: 50484071!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:20'!
test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:33' prior: 50480359!
test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired stamp: 'FF 6/8/2022 17:37:31'!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:40' prior: 50480379!
test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/8/2022 17:37:31'!
test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:05:40'!
test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:06:10' prior: 50480407!
test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/8/2022 17:37:31'!
test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50483599!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50483683!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50483658 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50483645!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 17:37:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50484209 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50484195!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50484225!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:08:09' prior: 50480546!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!methodRemoval: CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FF 6/8/2022 17:37:31'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.!
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/8/2022 17:40:16'!
test03CardCannotBeCreatedWhenValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '']
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !

!methodRemoval: CreditCardTest #test03CardCannotBeCreatedWithValidToIsNotAMonth stamp: 'FF 6/8/2022 17:40:16'!
test03CardCannotBeCreatedWithValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '']
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 17:48:00' prior: 50484289!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 17:48:01'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 17:48:01'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 17:48:01'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 17:48:01'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 17:48:01'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/8/2022 17:48:12'!
PASSED!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FF 6/8/2022 17:59:17'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 17:59:08'!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier total merchantProcessorSimulator |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessorSimulator := MerchantProcessorSimulator new.
	cashier := Cashier using: sales debitProcessor: merchantProcessorSimulator.
	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 17:59:29'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/8/2022 17:59:39'!
using: anOrderedCollection debitProcessor: aMerchantProcessorSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection debitProcessor: aMerchantProcessorSimulator ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/8/2022 18:01:18' prior: 50484462!
using: aSalesList debitProcessor: aMerchantProcessor
	^self new using: aSalesList debitProcessor: aMerchantProcessor ! !

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:01:31'!
ERROR!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/8/2022 18:01:37'!
using: anOrderedCollection debitProcessor: aMerchantProcessorSimulator 
	self shouldBeImplemented.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/8/2022 18:02:10'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/8/2022 18:02:09' prior: 50484484!
using: aSalesList debitProcessor: aMerchantProcessor
	salesList := aSalesList .
	merchantProcessor := aMerchantProcessor.! !

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:02:14'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:02:14'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:02:14'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:02:14'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:02:14'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:02:14'!
PASSED!

!methodRemoval: Cashier #initializeUsing: stamp: 'FF 6/8/2022 18:02:32'!
initializeUsing: aSalesList 
	salesList := aSalesList.!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:02:48'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:02:51'!
ERROR!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:02:51'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:04:03' prior: 50483302!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: priceList .
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/8/2022 18:05:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:05:38' prior: 50484247 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	merchantProcessor := MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:06:00' prior: 50484539!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: priceList .
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:06:02'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:06:02'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:06:02'!
ERROR!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:06:02'!
ERROR!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:06:02'!
ERROR!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:06:02'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:06:33'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:06:33'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:06:39' prior: 50484178!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:06:40'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:06:40'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:06:40'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:06:40'!
ERROR!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:06:41'!
ERROR!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:06:41'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:06:53' prior: 50484277!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:06:55'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:06:55'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:06:55'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:06:55'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:06:55'!
ERROR!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:06:55'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:06:55'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:07:16' prior: 50484341!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:07:42' prior: 50484700!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:07:59'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:07:59'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:07:59'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:07:59'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:07:59'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:07:59'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:09:53' prior: 50484442!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier merchantProcessorSimulator |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessorSimulator := MerchantProcessorSimulator new.
	cashier := Cashier using: sales debitProcessor: merchantProcessorSimulator.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithStolenCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:11:29' prior: 50484748!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier merchantProcessorSimulator |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessorSimulator := MerchantProcessorSimulator new.
	cashier := Cashier using: sales debitProcessor: merchantProcessorSimulator.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithStolenCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:11:36'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:14:38' prior: 50484769!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateStolenCreditCard.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithStolenCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:14:42'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'simulation' stamp: 'FF 6/8/2022 18:14:58'!
simulateStolenCreditCard
	self shouldBeImplemented.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FF 6/8/2022 18:17:26'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'actionToSimulate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'simulation' stamp: 'FF 6/8/2022 18:17:25' prior: 50484818!
simulateStolenCreditCard
	actionToSimulate := [self error: self class cannotPayWithStolenCreditCard].! !

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:17:31'!
FAILURE!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:18:26'!
FAILURE!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/8/2022 18:20:26' prior: 50483674!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	| totalToDebit |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .	totalToDebit := aCart total.
	merchantProcessor debit: totalToDebit from: aCreditCard .
	
	salesList add: aCart.
	^totalToDebit.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/8/2022 18:20:54' prior: 50484845!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale

	| totalToDebit |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	
	totalToDebit := aCart total.
	merchantProcessor debit: totalToDebit from: aCreditCard .
	
	salesList add: aCart.
	
	^totalToDebit.! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:20:58'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:20:58'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:20:58'!
ERROR!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:20:58'!
ERROR!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:20:58'!
ERROR!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:21:10'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:21:10'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:21:10'!
ERROR!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:21:10'!
ERROR!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:21:10'!
ERROR!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:21:20'!
ERROR!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:21:20'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'action' stamp: 'FF 6/8/2022 18:22:01'!
debit: aSmallInteger from: aCreditCard 
	self shouldBeImplemented.! !
!MerchantProcessorSimulator methodsFor: 'action' stamp: 'FF 6/8/2022 18:22:39' prior: 50484912!
debit: anAmount from: aCreditCard 
	actionToSimulate value.! !

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:22:40'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'FF 6/8/2022 18:22:51'!
cannotPayWithStolenCreditCard
	self shouldBeImplemented.! !
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'FF 6/8/2022 18:24:07' prior: 50484927!
cannotPayWithStolenCreditCard
	^'The credit card has been notified as stolen'.! !

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:24:51'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:24:57'!
PASSED!

----SNAPSHOT----(8 June 2022 18:25:06) CuisUniversity-5096.image priorSource: 4629763!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/8/2022 18:25:54'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/8/2022 18:25:58'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/8/2022 18:25:59'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/8/2022 18:25:59'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/8/2022 18:25:59'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/8/2022 18:25:59'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/8/2022 18:25:59'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:32:36'!
test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateCreditCardWithoutEnoughLimit.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithCreditCardWithoutEnoughLimit equals: anError messageText .
			self assert: sales isEmpty .
		].! !

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:32:41'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'simulation' stamp: 'FF 6/8/2022 18:33:00'!
simulateCreditCardWithoutEnoughLimit
	self shouldBeImplemented.! !
!MerchantProcessorSimulator methodsFor: 'simulation' stamp: 'FF 6/8/2022 18:35:08' prior: 50485110!
simulateCreditCardWithoutEnoughLimit
	actionToSimulate := [self error: self class cannotPayWithCreditCardWithoutEnoughLimit].! !

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:35:10'!
ERROR!
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'FF 6/8/2022 18:35:27'!
cannotPayWithCreditCardWithoutEnoughLimit
	self shouldBeImplemented.! !
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'FF 6/8/2022 18:36:48' prior: 50485127!
cannotPayWithCreditCardWithoutEnoughLimit
	^'The credit card limit is not enough'.! !

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:36:50'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:36:50'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:36:50'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:36:50'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:36:50'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:36:50'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:36:50'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/8/2022 18:37:03'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/8/2022 18:37:04'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/8/2022 18:37:04'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/8/2022 18:37:04'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:40:32' prior: 50484624!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:40:42'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'testing' stamp: 'FF 6/8/2022 18:41:03'!
answeredCalls
	self shouldBeImplemented.! !
!MerchantProcessorSimulator methodsFor: 'testing' stamp: 'FF 6/8/2022 18:41:07' prior: 50485259!
answeredCalls
	^0.! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:41:22'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:41:22'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:41:22'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:41:22'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:41:22'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:41:22'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:41:22'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:41:36' prior: 50485236!
test02CannotCheckOutCartProvidingAnExpiredCreditCard
	| cart cashier |
	
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:42:17' prior: 50485292!
test02CannotCheckOutCartProvidingAnExpiredCreditCard
	| cart cashier |
	
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:43:38' prior: 50484714!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.
	self assert: 1 equals: merchantProcessor answeredCalls.! !

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:43:40'!
FAILURE!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FF 6/8/2022 18:44:18'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'actionToSimulate answeredCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'testing' stamp: 'FF 6/8/2022 18:44:17' prior: 50485264!
answeredCalls
	^answeredCalls.! !
!MerchantProcessorSimulator methodsFor: 'action' stamp: 'FF 6/8/2022 18:45:00' prior: 50484918!
debit: anAmount from: aCreditCard 
	answeredCalls := answeredCalls + 1.
	actionToSimulate value.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:45:52' prior: 50484581!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: priceList .
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:45:53'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'FF 6/8/2022 18:46:35' overrides: 16920235!
initialize
	answeredCalls := 0.! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:46:42'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:46:42'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:46:42'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:46:42'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:46:42'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:46:42'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:46:53'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:46:57'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:46:57'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:46:57'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:46:57'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:46:57'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:46:57'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:46:57'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:47:13' prior: 50484663!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
		self assert: 1 equals: merchantProcessor answeredCalls.
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:47:24' prior: 50484794!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateStolenCreditCard.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithStolenCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 1 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:47:34' prior: 50485085!
test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateCreditCardWithoutEnoughLimit.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithCreditCardWithoutEnoughLimit equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 1 equals: merchantProcessor answeredCalls.
		].! !

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:47:36'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/8/2022 18:47:36'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/8/2022 18:47:36'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/8/2022 18:47:36'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/8/2022 18:47:36'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/8/2022 18:47:36'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/8/2022 18:47:36'!
PASSED!

----SNAPSHOT----(8 June 2022 18:47:52) CuisUniversity-5096.image priorSource: 4905429!

----STARTUP---- (11 June 2022 10:12:12) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!


!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/11/2022 10:12:44'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/11/2022 10:12:44'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/11/2022 10:12:44'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/11/2022 10:12:44'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/11/2022 10:12:44'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/11/2022 10:12:44'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/11/2022 10:12:44'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/11/2022 10:12:47'!
PASSED!

TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 10:28:30'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/11/2022 10:34:57'!
Object subclass: #InterfaceFacade
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 10:34:50'!
test01ValidClientCanCreateACart

	| cartId clientId interface listCart password |
	interface := InterfaceFacade new.

	cartId := interface createCartFor: clientId signInWith: password.
	
	listCart := interface listCart: cartId .
	
	self assert: listCart notNil.
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 10:36:00' prior: 50485656!
test01ValidClientCanCreateACart

	| cartId clientId interface listCart password |
	interface := InterfaceFacade new.
	clientId := 'Valid client'.
	password := 'Valid password'.

	cartId := interface createCartFor: clientId signInWith: password.
	
	listCart := interface listCart: cartId .
	
	self assert: listCart notNil.
	! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:36:02'!
ERROR!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:36:31'!
createCartFor: aString signInWith: aString2 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:37:09' prior: 50485684!
createCartFor: aClientId signInWith: aPassword 
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:37:14' prior: 50485689!
createCartFor: aClientId signInWith: aPassword 
	^0.! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:37:24'!
ERROR!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:37:32'!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:38:00' prior: 50485702!
listCart: aCartId 
	^OrderedCollection new.! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:38:01'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:38:01'!
PASSED!

!classDefinition: #AuthenticatorServiceSimulator category: 'TusLibros' stamp: 'FF 6/11/2022 10:46:23'!
Object subclass: #AuthenticatorServiceSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 10:46:15'!
test02ValidClientCanCreateACart

	| cartId clientId interface password authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: clientId sigInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 10:46:59' prior: 50485726!
test02ValidClientCanCreateACart

	| cartId clientId interface password authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:47:02'!
ERROR!
!AuthenticatorServiceSimulator class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 10:47:15'!
simulateClientIsValid: aFalse 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeSimulateClientIsValid: aFalse ! !
!AuthenticatorServiceSimulator class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 10:48:02' prior: 50485774!
simulateClientIsValid: isAValidClient
	
	^self new initializeSimulateClientIsValid: isAValidClient ! !
!AuthenticatorServiceSimulator class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 10:48:32' prior: 50485784!
simulateClientIsValid: isAValidClient
	
	^self new initializeIsValid: isAValidClient ! !

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:48:35'!
ERROR!

!classDefinition: #AuthenticatorServiceSimulator category: 'TusLibros' stamp: 'FF 6/11/2022 10:48:44'!
Object subclass: #AuthenticatorServiceSimulator
	instanceVariableNames: 'isAValidClient_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AuthenticatorServiceSimulator methodsFor: 'initialization' stamp: 'FF 6/11/2022 10:48:44'!
initializeIsValid: isAValidClient 
	self shouldBeImplemented.
	isAValidClient_CHANGE_ME := isAValidClient.! !
!AuthenticatorServiceSimulator methodsFor: 'initialization' stamp: 'FF 6/11/2022 10:49:33' prior: 50485809!
initializeIsValid: isAValidClient 
	| isValidClient |
	isValidClient := isAValidClient.! !
!AuthenticatorServiceSimulator methodsFor: 'initialization' stamp: 'FF 6/11/2022 10:51:10' prior: 50485816!
initializeIsValid: isAValidClient 
	^ isAValidClient.! !

!classDefinition: #AuthenticatorServiceSimulator category: 'TusLibros' stamp: 'FF 6/11/2022 10:51:23'!
Object subclass: #AuthenticatorServiceSimulator
	instanceVariableNames: 'isValidClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AuthenticatorServiceSimulator methodsFor: 'initialization' stamp: 'FF 6/11/2022 10:51:36' prior: 50485823!
initializeIsValid: isAValidClient 
	isValidClient :=isAValidClient.! !

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:51:44'!
ERROR!

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:51:44'!
ERROR!
!InterfaceFacade class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 10:51:52'!
authenticator: anAuthenticatorServiceSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAuthenticator: anAuthenticatorServiceSimulator ! !
!InterfaceFacade class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 10:52:23' prior: 50485849!
authenticator: anAuthenticatorService 
	^self new authenticator: anAuthenticatorService ! !

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:52:25'!
ERROR!

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/11/2022 10:53:30'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'nil' stamp: 'FF 6/11/2022 10:53:28'!
authenticator: anAuthenticatorService

	authenticatorService := anAuthenticatorService.
! !

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:53:38'!
FAILURE!

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:53:38'!
FAILURE!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:56:41' prior: 50485694!
createCartFor: aClientId signInWith: aPassword 
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [^self error: self class clientIsNotValid].
	^0! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:56:45'!
ERROR!

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:56:45'!
ERROR!

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:56:51'!
ERROR!
!AuthenticatorServiceSimulator methodsFor: 'testing' stamp: 'FF 6/11/2022 10:57:05'!
canAuthenticate: aString with: aString2 
	self shouldBeImplemented.! !
!AuthenticatorServiceSimulator methodsFor: 'testing' stamp: 'FF 6/11/2022 10:57:34' prior: 50485906!
canAuthenticate: aClientId with: aPassword 
	^isValidClient. ! !

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:57:35'!
ERROR!
!InterfaceFacade class methodsFor: 'error messages' stamp: 'FF 6/11/2022 10:57:47'!
clientIsNotValid
	self shouldBeImplemented.! !
!InterfaceFacade class methodsFor: 'error messages' stamp: 'FF 6/11/2022 10:58:39' prior: 50485920!
clientIsNotValid
	^'The client is not valid, check the provided password and clientId'! !

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:58:40'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:58:40'!
ERROR!

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:58:40'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:58:40'!
ERROR!

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:59:01'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 10:59:29' prior: 50485668!
test01ValidClientCanCreateACart

	| cartId clientId interface listCart password authenticatorServiceSimulator |
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.

	cartId := interface createCartFor: clientId signInWith: password.
	
	listCart := interface listCart: cartId .
	
	self assert: listCart notNil.
	! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:59:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:59:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 10:59:44'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:01:50'!
test02InvalidClientCannotCreateACart

	| cartId clientId interface password authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !

!methodRemoval: InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FF 6/11/2022 11:01:53'!
test02ValidClientCanCreateACart

	| cartId clientId interface password authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:02:22' prior: 50485947!
test01ValidClientCanCreateACart

	| cartId clientId interface listCart password authenticatorServiceSimulator |
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.

	cartId := interface createCartFor: clientId signInWith: password.
	
	listCart := interface listCart: cartId .
	
	self assert: listCart isEmpty.
	! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 11:02:23'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 11:02:23'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 11:02:23'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:07:12'!
test03CreateCartReturnsUniqueCartId

	| clientId interface password authenticatorServiceSimulator firstCartId secondCartId |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	firstCartId := interface createCartFor: clientId signInWith: password.
	secondCartId := interface createCartFor: clientId signInWith: password.

	self deny: (firstCartId = secondCartId).
	

	
	
	! !

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:07:20'!
ERROR!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:07:29' prior: 50486048!
test03CreateCartReturnsUniqueCartId

	| clientId interface password authenticatorServiceSimulator firstCartId secondCartId |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	firstCartId := interface createCartFor: clientId signInWith: password.
	secondCartId := interface createCartFor: clientId signInWith: password.

	self deny: (firstCartId = secondCartId).
	

	
	
	! !

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:07:30'!
FAILURE!

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/11/2022 11:14:17'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:14:14' prior: 50485888!
createCartFor: aClientId signInWith: aPassword 
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [^self error: self class clientIsNotValid].
	lastCartId := lastCartId + 1.
	^lastCartId.! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:14:44' prior: 50485875!
authenticator: anAuthenticatorService

	authenticatorService := anAuthenticatorService.
	lastCartId := 0
! !

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:14:57'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:15:04'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 11:15:04'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 11:15:04'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:15:04'!
PASSED!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 11:26:43'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 11:26:44'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 11:26:47'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 11:26:49'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 11:26:50'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 11:26:52'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 11:26:53'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 11:26:41' overrides: 16961394!
setUp

	"clientId := 'ClientId'.
	password := 'password'."
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:27:41' prior: 50486020!
test01ValidClientCanCreateACart

	| cartId aClientId interface listCart aPassword authenticatorServiceSimulator |
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	aClientId := 'Valid client'.
	aPassword := 'Valid password'.

	cartId := interface createCartFor: aClientId signInWith: aPassword.
	
	listCart := interface listCart: cartId .
	
	self assert: listCart isEmpty.
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:28:04' prior: 50485975!
test02InvalidClientCannotCreateACart

	| cartId aClientId interface password authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	aClientId := 'Valid client'.
	password := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: aClientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:28:15' prior: 50486247!
test02InvalidClientCannotCreateACart

	| cartId aClientId interface aPassword authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	aClientId := 'Valid client'.
	aPassword := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: aClientId signInWith: aPassword ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:28:24' prior: 50486072!
test03CreateCartReturnsUniqueCartId

	| aClientId interface password authenticatorServiceSimulator firstCartId secondCartId |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	aClientId := 'Valid client'.
	password := 'Valid password'.
	
	firstCartId := interface createCartFor: aClientId signInWith: password.
	secondCartId := interface createCartFor: aClientId signInWith: password.

	self deny: (firstCartId = secondCartId).
	

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:28:46' prior: 50486293!
test03CreateCartReturnsUniqueCartId

	| aClientId interface aPassword authenticatorServiceSimulator firstCartId secondCartId |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	aClientId := 'Valid client'.
	aPassword := 'Valid password'.
	
	firstCartId := interface createCartFor: aClientId signInWith: aPassword.
	secondCartId := interface createCartFor: aClientId signInWith: aPassword.

	self deny: (firstCartId = secondCartId).
	

	
	
	! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 11:28:59'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 11:29:01'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 11:28:58' prior: 50486206 overrides: 16961394!
setUp

	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:30:04' prior: 50486228!
test01ValidClientCanCreateACart

	| cartId listCart |

	cartId := interfaceFacade createCartFor: clientId signInWith: password .
	
	listCart := interfaceFacade listCart: cartId .
	
	self assert: listCart isEmpty.
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:30:42' prior: 50486270!
test02InvalidClientCannotCreateACart

	| cartId |
	
	self should: [ cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:31:34' prior: 50486314!
test03CreateCartReturnsUniqueCartId

	| firstCartId secondCartId |
	
	firstCartId := interfaceFacade createCartFor: clientId signInWith: password .
	secondCartId := interfaceFacade createCartFor: clientId signInWith: password .

	self deny: (firstCartId = secondCartId).
	

	
	
	! !

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:31:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 11:31:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 11:31:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:31:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 11:31:41'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:31:41'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:33:48'!
test04ListCartOfInvalidCartIdThrowsError

	| listCart  |
	
	self should: [ listCart := interfaceFacade listCart: invalidCartId. ]
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
		self assert: listCart isNil.
	]
	

	
	
	! !

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:33:53'!
FAILURE!

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/11/2022 11:36:17'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:36:12' prior: 50485707!
listCart: aCartId 
	(carts includes: aCartId) ifFalse:[^ self error: self class cartDoesNotExist].
	^OrderedCollection new.! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 11:36:18'!
ERROR!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 11:36:18'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:36:18'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:36:18'!
ERROR!

----SNAPSHOT----(11 June 2022 11:36:36) CuisUniversity-5096.image priorSource: 4924160!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 11:36:39'!
ERROR!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 11:36:39'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:36:39'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:36:39'!
ERROR!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:36:46'!
ERROR!
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:37:09' prior: 50486114!
authenticator: anAuthenticatorService

	authenticatorService := anAuthenticatorService.
	carts := OrderedCollection new.
	lastCartId := 0
! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:37:52' prior: 50486104!
createCartFor: aClientId signInWith: aPassword 
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [^self error: self class clientIsNotValid].
	lastCartId := lastCartId + 1.
	carts add: lastCartId. 
	^lastCartId.! !

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:37:55'!
ERROR!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:37:55'!
ERROR!
!InterfaceFacade class methodsFor: 'error messages' stamp: 'FF 6/11/2022 11:38:01'!
cartDoesNotExist
	self shouldBeImplemented.! !
!InterfaceFacade class methodsFor: 'error messages' stamp: 'FF 6/11/2022 11:38:27' prior: 50486607!
cartDoesNotExist
	^'The cartId provided is not valid'! !

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:38:28'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:38:30'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 11:38:30'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 11:38:30'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:38:31'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:38:31'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:38:33'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/11/2022 11:38:33'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/11/2022 11:38:33'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/11/2022 11:38:33'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/11/2022 11:38:33'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/11/2022 11:38:33'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/11/2022 11:38:33'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/11/2022 11:38:33'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/11/2022 11:38:33'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 11:38:34'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:38:34'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:41:47'!
test05ListCartOfCartWithItemsShowsTheISBNAndQuantity

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId sigInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: validBookISBN equals: (listCart at: 1) book.
	self assert: quantity equals: (listCart at: 1) quantity.
	

	
	
	! !

!testRun: #InterfaceFacadeTest #test05ListCartOfCartWithItemsShowsTheISBNAndQuantity stamp: 'FF 6/11/2022 11:41:55'!
ERROR!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:42:09' prior: 50486724!
test05ListCartOfCartWithItemsShowsTheISBNAndQuantity

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: validBookISBN equals: (listCart at: 1) book.
	self assert: quantity equals: (listCart at: 1) quantity.
	

	
	
	! !

!testRun: #InterfaceFacadeTest #test05ListCartOfCartWithItemsShowsTheISBNAndQuantity stamp: 'FF 6/11/2022 11:42:15'!
ERROR!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:42:31'!
addToCart: aSmallInteger book: aString quantity: aSmallInteger3 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:45:03' prior: 50486767!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd

	| cartFound |
	cartFound := carts at: aCartId.
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !

!testRun: #InterfaceFacadeTest #test05ListCartOfCartWithItemsShowsTheISBNAndQuantity stamp: 'FF 6/11/2022 11:45:10'!
ERROR!
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:45:36' prior: 50486581!
authenticator: anAuthenticatorService

	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0
! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:46:17' prior: 50486540!
listCart: aCartId 
	carts at: aCartId ifAbsent:[^ self error: self class cartDoesNotExist].
	^OrderedCollection new.! !

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/11/2022 11:47:43'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:47:39' prior: 50486589!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [^self error: self class clientIsNotValid].
	
	newCart := Cart with: priceList.
	lastCartId := lastCartId + 1.
	carts at: lastCartId put: newCart. 
	^lastCartId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:47:48' prior: 50486807!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [^self error: self class clientIsNotValid].
	
	newCart := Cart with: priceList.
	lastCartId := lastCartId + 1.
	carts at: lastCartId put: newCart. 
	^lastCartId.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 11:51:04' prior: 50486361 overrides: 16961394!
setUp

	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 11:51:16' prior: 50486833 overrides: 16961394!
setUp

	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacade class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 11:51:46'!
priceList: aDictionary authenticator: anAuthenticatorServiceSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializePriceList: aDictionary authenticator: anAuthenticatorServiceSimulator ! !
!InterfaceFacade class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 11:52:17' prior: 50486879!
priceList: aPriceList authenticator: anAuthenticatorService
	
	^self new priceList: aPriceList authenticator: anAuthenticatorService! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:52:24'!
priceList: aDictionary authenticator: anAuthenticatorServiceSimulator 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:52:40' prior: 50486898!
priceList: aPriceList authenticator: anAuthenticatorService
	! !

!testRun: #InterfaceFacadeTest #test05ListCartOfCartWithItemsShowsTheISBNAndQuantity stamp: 'FF 6/11/2022 11:52:41'!
ERROR!
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:52:58' prior: 50486905!
priceList: aPriceList authenticator: anAuthenticatorService
	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:53:11' prior: 50486914!
priceList: aPriceList authenticator: anAuthenticatorService
	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0.
	priceList := aPriceList .! !

!methodRemoval: InterfaceFacade #authenticator: stamp: 'FF 6/11/2022 11:53:15'!
authenticator: anAuthenticatorService

	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0
!

!methodRemoval: InterfaceFacade class #authenticator: stamp: 'FF 6/11/2022 11:53:29'!
authenticator: anAuthenticatorService 
	^self new authenticator: anAuthenticatorService !

!testRun: #InterfaceFacadeTest #test05ListCartOfCartWithItemsShowsTheISBNAndQuantity stamp: 'FF 6/11/2022 11:53:42'!
FAILURE!

!testRun: #InterfaceFacadeTest #test05ListCartOfCartWithItemsShowsTheISBNAndQuantity stamp: 'FF 6/11/2022 11:53:42'!
FAILURE!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 11:53:57'!
PASSED!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:56:00' prior: 50486792!
listCart: aCartId 
	| cartFound |
	cartFound := carts at: aCartId ifAbsent:[^self error: self class cartDoesNotExist].
	^cartFound books.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/11/2022 11:56:28' prior: 50482460!
books

	^books copy.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:56:42' prior: 50483441!
initializeWith: aPriceList
	priceList := aPriceList.
	books := Bag new.! !

!testRun: #InterfaceFacadeTest #test05ListCartOfCartWithItemsShowsTheISBNAndQuantity stamp: 'FF 6/11/2022 12:06:19'!
ERROR!
!Cart methodsFor: 'total' stamp: 'FF 6/11/2022 12:07:47' prior: 50483569!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!Cart methodsFor: 'adding' stamp: 'FF 6/11/2022 12:08:02' prior: 50483722!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	self assertProductExistOnPriceList: aBook.
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/11/2022 12:08:09' prior: 50483714!
assertProductExistOnPriceList: aProductToBeAdded 
	(priceList includesKey: aProductToBeAdded) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].! !
!Cart methodsFor: 'adding' stamp: 'FF 6/11/2022 12:08:16' prior: 50483696!
assertQuantityIsPositive: quantityOfBookToBeAdded 
	(quantityOfBookToBeAdded <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 12:11:10' prior: 50486746!
test05ListCartOfCartWithItemsShowsTheISBNAndQuantity

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: (listCart includes: validBookISBN).
	self assert: quantity equals: (listCart occurrencesOf: validBookISBN).
	

	
	
	! !

!testRun: #InterfaceFacadeTest #test05ListCartOfCartWithItemsShowsTheISBNAndQuantity stamp: 'FF 6/11/2022 12:11:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 12:11:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 12:11:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 12:11:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 12:11:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartOfCartWithItemsShowsTheISBNAndQuantity stamp: 'FF 6/11/2022 12:11:12'!
PASSED!

----SNAPSHOT----(11 June 2022 14:38:43) CuisUniversity-5096.image priorSource: 4957106!

----STARTUP---- (11 June 2022 19:11:18) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!

!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:13:39'!
test05ListCartIncludesAddedItemsAndItsQuantity

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: (listCart includes: validBookISBN).
	self assert: quantity equals: (listCart occurrencesOf: validBookISBN).
	

	
	
	! !

!methodRemoval: InterfaceFacadeTest #test05ListCartOfCartWithItemsShowsTheISBNAndQuantity stamp: 'FF 6/11/2022 19:13:39'!
test05ListCartOfCartWithItemsShowsTheISBNAndQuantity

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: (listCart includes: validBookISBN).
	self assert: quantity equals: (listCart occurrencesOf: validBookISBN).
	

	
	
	!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:18:34'!
test06AddToCartWithInvalidCartIdThrowsError

	| listCart  |
	
	self should: [ listCart := interfaceFacade listCart: invalidCartId. ]
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
		self assert: listCart isNil.
	]
	

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:21:28' prior: 50487085!
test06AddToCartWithInvalidCartIdThrowsError
	
	self should: [ interfaceFacade addToCart: invalidCartId book: validBookISBN quantity: 2. ]
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
		]
	

	
	
	! !

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:21:30'!
FAILURE!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:22:23' prior: 50486773!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd

	| cartFound |
	cartFound := carts at: aCartId ifAbsent:[^self error: self class cartDoesNotExist].
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 19:22:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 19:22:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 19:22:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:22:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/11/2022 19:22:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:22:26'!
PASSED!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:23:44' prior: 50487114!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd

	| cartFound |
	cartFound := carts at: aCartId ifAbsent:[self error: self class cartDoesNotExist].
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:24:18'!
findCart: aCartId

	^ carts at: aCartId ifAbsent:[self error: self class cartDoesNotExist]! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:24:18' prior: 50487145!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd

	| cartFound |
	cartFound := self findCart: aCartId.
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:25:31' prior: 50486955!
listCart: aCartId 
	| cartFound |
	cartFound := self findCart: aCartId.
	^cartFound books.! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 19:25:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 19:25:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 19:25:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:25:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/11/2022 19:25:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:25:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:26:43'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/11/2022 19:26:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:26:47'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:31:41'!
test07CheckOutCartReturnsTransactionId

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: (listCart includes: validBookISBN).
	self assert: quantity equals: (listCart occurrencesOf: validBookISBN).
	

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:31:56' prior: 50487293!
test07CheckOutCartReturnsTransactionId

	|  cartId  listCart  quantity|
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	listCart := interfaceFacade listCart: cartId.
	self deny: listCart isEmpty.
	self assert: (listCart includes: validBookISBN).
	self assert: quantity equals: (listCart occurrencesOf: validBookISBN).
	

	
	
	! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 19:41:11'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password aCreditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 19:41:14'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password aCreditCardNumber anExpirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 19:41:16'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password aCreditCardNumber anExpirationMonth cardOwnerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:41:04' prior: 50487311!
test07CheckOutCartReturnsTransactionId

	|  cartId  quantity listPurchases transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: aCreditCardNumber expirationDate: anExpirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.


	
	
	! !

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/11/2022 19:41:27'!
ERROR!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:41:40'!
checkOut: aSmallInteger withCardNumber: anUndefinedObject expirationDate: anUndefinedObject3 from: anUndefinedObject4 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:42:45' prior: 50487394!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	! !

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/11/2022 19:42:46'!
ERROR!
!InterfaceFacade methodsFor: 'client' stamp: 'FF 6/11/2022 19:43:25'!
listPurchasesFrom: aString signInWith: aString2 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'client' stamp: 'FF 6/11/2022 19:47:16' prior: 50487412!
listPurchasesFrom: aClientId signInWith: aPassword 
	^OrderedCollection with: ''.! !

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/11/2022 19:47:18'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 19:47:18'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 19:47:18'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 19:47:18'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:47:18'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/11/2022 19:47:18'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:47:18'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/11/2022 19:47:18'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/11/2022 19:47:27'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 19:47:28'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 19:47:28'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 19:47:28'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:47:28'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/11/2022 19:47:28'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:47:28'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/11/2022 19:47:28'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:52:39'!
test08InvalidClientCannotCheckOutACart

	| cartId |
	
	self should: [ cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:55:14'!
test08CheckOutCartOfInvalidCartIdThrowsError

	| cartId |
	
	self should: [ cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !

!methodRemoval: InterfaceFacadeTest #test08InvalidClientCannotCheckOutACart stamp: 'FF 6/11/2022 19:55:14'!
test08InvalidClientCannotCheckOutACart

	| cartId |
	
	self should: [ cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:56:34' prior: 50487493!
test08CheckOutCartOfInvalidCartIdThrowsError

	| cartId |
	cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password
	self should: [ interfaceFacade checkOut: invalidCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 19:56:55'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password aCreditCardNumber expirationMonth cardOwnerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 19:56:55' prior: 50487521!
test08CheckOutCartOfInvalidCartIdThrowsError

	| cartId |
	cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password
	self should: [ interfaceFacade checkOut: invalidCartId withCardNumber: aCreditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 19:56:55' prior: 50487370!
test07CheckOutCartReturnsTransactionId

	|  cartId  quantity listPurchases transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: aCreditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.


	
	
	! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 19:57:04'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password creditCardNumber expirationMonth cardOwnerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 19:57:04' prior: 50487554!
test08CheckOutCartOfInvalidCartIdThrowsError

	| cartId |
	cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password
	self should: [ interfaceFacade checkOut: invalidCartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 19:57:04' prior: 50487572!
test07CheckOutCartReturnsTransactionId

	|  cartId  quantity listPurchases transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.


	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:57:21' prior: 50487608!
test08CheckOutCartOfInvalidCartIdThrowsError

	| cartId |
	cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password.
	self should: [ interfaceFacade checkOut: invalidCartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:59:35' prior: 50487647!
test08CheckOutCartOfInvalidCartIdThrowsError

	| transactionId |
	self should: [ transactionId := interfaceFacade checkOut: invalidCartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
		self assert: transactionId isNil.
	].

	
	
	! !

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 19:59:39'!
FAILURE!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 20:00:13' prior: 50487402!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	self findCart: aCartId.! !

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:01:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 20:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:01:39'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/11/2022 20:01:39'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:01:39'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/11/2022 20:01:39'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:01:39'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:05:42'!
test09CheckOutCartWithInvalidCreditCardThrowsError

	| transactionId cartId |
	cartId := interfaceFacade createCartFor: clientId signInWith: password .
	self should: [ transactionId := interfaceFacade checkOut: cartId withCardNumber: '123' expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
		self assert: transactionId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:06:28' prior: 50487797!
test09CheckOutCartWithInvalidCreditCardThrowsError

	| transactionId cartId |
	cartId := interfaceFacade createCartFor: clientId signInWith: password .
	self should: [ transactionId := interfaceFacade checkOut: cartId withCardNumber: '123' expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText.
		self assert: transactionId isNil.
	].

	
	
	! !

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/11/2022 20:06:29'!
FAILURE!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 20:08:51' prior: 50487685!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard |
	self findCart: aCartId.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:09:15' prior: 50483939!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:09:27' prior: 50484034!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:11:29'!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: owner  	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:11:29'!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: owner 
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50483916!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month from: aCardOwnerName]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50484150!
test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month from: aCardOwnerName.
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50484102!
test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous from: aCardOwnerName .
	
	self assert: (card isExpiredOn: today).

		! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50487857!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50484315!
test03CardCannotBeCreatedWhenValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '' from: aCardOwnerName]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50483979!
test02CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month from: aCardOwnerName]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50484564 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next from: aCardOwnerName.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous from: aCardOwnerName.
	merchantProcessor := MerchantProcessorSimulator new.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50484122!
test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next from: aCardOwnerName .
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50487874!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: owner  	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !

!methodRemoval: CreditCard class #number:validTo: stamp: 'FF 6/11/2022 20:11:30'!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName !

!methodRemoval: CreditCard #number:validTo: stamp: 'FF 6/11/2022 20:11:30'!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	!
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:11:43' prior: 50488010!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: owner  	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: owner ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:13:53' prior: 50487891!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName 
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/11/2022 20:14:11'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:14:08' prior: 50488070!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName 
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.	
	owner := aCardOwnerName .! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:14:34' prior: 50488052!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName  	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/11/2022 20:16:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today merchantProcessor ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:16:33' prior: 50487981 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next from: ownerName.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous from: ownerName.
	merchantProcessor := MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:16:55' prior: 50488123 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.
	
	ownerName := 'owner'.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next from: ownerName.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous from: ownerName.
	merchantProcessor := MerchantProcessorSimulator new.! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FF 6/11/2022 20:17:36'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:17:33' prior: 50483865 overrides: 16961394!
setUp

	today := Date today.
	ownerName := 'owner'! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:17:43' prior: 50487913!
test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month from: ownerName .
	
	self deny: (card isExpiredOn: today).

		! !

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/11/2022 20:17:44'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/11/2022 20:17:44'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/11/2022 20:17:44'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/11/2022 20:17:44'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/11/2022 20:17:44'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/11/2022 20:17:44'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/11/2022 20:17:44'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/11/2022 20:17:53'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/11/2022 20:17:53'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/11/2022 20:17:53'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/11/2022 20:17:53'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 20:17:53'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/11/2022 20:17:53'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/11/2022 20:17:53'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:18:14' prior: 50487899!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month from: ownerName ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:18:21' prior: 50487966!
test02CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month from: ownerName ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:18:26' prior: 50487952!
test03CardCannotBeCreatedWhenValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '' from: ownerName ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:18:32' prior: 50487923!
test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous from: ownerName .
	
	self assert: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:18:44' prior: 50488000!
test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next from: ownerName .
	
	self deny: (card isExpiredOn: today).

		! !

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/11/2022 20:19:19'!
ERROR!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/11/2022 20:19:19'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/11/2022 20:19:19'!
ERROR!
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:20:30' prior: 50486856 overrides: 16961394!
setUp

	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.

	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/11/2022 20:21:25'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password creditCardNumber expirationMonth cardOwnerName today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:21:20' prior: 50488404 overrides: 16961394!
setUp

	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:21:38' prior: 50488443 overrides: 16961394!
setUp

	today := Date today.
	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:21:49' prior: 50488469 overrides: 16961394!
setUp

	today := Date today.
	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month next.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:21:57' prior: 50488496 overrides: 16961394!
setUp

	today := Date today.
	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month next.
	
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:22:22' prior: 50488523 overrides: 16961394!
setUp

	today := Date today.
	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month next.
	cardOwnerName := 'owner'.
	
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/11/2022 20:22:28'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/11/2022 20:22:28'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/11/2022 20:22:28'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/11/2022 20:22:28'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/11/2022 20:22:28'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/11/2022 20:22:28'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:22:29'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/11/2022 20:22:29'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:32:29'!
test10ListPurchasesReturnsClientTransactions

	|  cartId  quantity listPurchases transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.
	self assert: (listPurchases at: 1) books includes: validBookISBN .
	self assert: quantity equals: ((listPurchases at: 1) books occurrencesOf: validBookISBN).

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:33:45' prior: 50488678!
test10ListPurchasesReturnsClientTransactions

	|  cartId  quantity listPurchases transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.
	self assert: (listPurchases at: 1) books includes: validBookISBN .
	self assert: quantity equals: ((listPurchases at: 1) books occurrencesOf: validBookISBN).
	self assert: 15 equals: ((listPurchases at: 1) total).

	
	
	! !

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/11/2022 20:34:39'!
ERROR!
!InterfaceFacade methodsFor: 'client' stamp: 'FF 6/11/2022 20:37:07' prior: 50487418!
listPurchasesFrom: aClientId signInWith: aPassword 
	^OrderedCollection with: ''.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 20:39:24' prior: 50487838!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart|
	cart := self findCart: aCartId.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cart.! !

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/11/2022 20:41:08'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/11/2022 20:41:46'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList merchantProcessor today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 20:41:39' prior: 50488741!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier |
	cart := self findCart: aCartId.
	cashier := Cashier using: priceList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/11/2022 20:41:53'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/11/2022 20:41:53'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/11/2022 20:41:53'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:41:53'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/11/2022 20:41:53'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:41:53'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/11/2022 20:41:53'!
ERROR!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/11/2022 20:41:53'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/11/2022 20:41:53'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/11/2022 20:41:53'!
ERROR!

!classDefinition: #Ticket category: 'TusLibros' stamp: 'FF 6/11/2022 20:45:19'!
Object subclass: #Ticket
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/11/2022 20:45:14' prior: 50484858!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale

	| totalToDebit ticket |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	
	totalToDebit := aCart total.
	merchantProcessor debit: totalToDebit from: aCreditCard .
	ticket := Ticket of: aCart books total: totalToDebit .
	salesList add: ticket.
	
	^ticket.! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/11/2022 20:45:28'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/11/2022 20:45:28'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/11/2022 20:45:28'!
ERROR!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 20:45:28'!
ERROR!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/11/2022 20:45:28'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/11/2022 20:45:28'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/11/2022 20:45:42'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/11/2022 20:45:46'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/11/2022 20:45:48'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 20:45:49'!
ERROR!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 20:45:49'!
ERROR!
!Ticket class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:45:58'!
of: aBag total: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aBag total: aSmallInteger ! !
!Ticket class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:46:42' prior: 50488882!
of: aBookBag total: anAmount 
	
	^self new of: aBookBag total: anAmount ! !

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 20:46:44'!
ERROR!
!Ticket methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:46:56'!
of: aBag total: aSmallInteger 
	self shouldBeImplemented.! !

!classDefinition: #Ticket category: 'TusLibros' stamp: 'FF 6/11/2022 20:47:39'!
Object subclass: #Ticket
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Ticket category: 'TusLibros' stamp: 'FF 6/11/2022 20:47:41'!
Object subclass: #Ticket
	instanceVariableNames: 'books total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:47:37' prior: 50488899!
of: aBookBag total: anAmount 
	books := aBookBag .
	total := anAmount .! !

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/11/2022 20:47:44'!
FAILURE!

----SNAPSHOT----(11 June 2022 20:48:26) CuisUniversity-5096.image priorSource: 4972552!

----STARTUP---- (12 June 2022 08:42:49) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!

!Cashier methodsFor: 'checking out' stamp: 'FF 6/12/2022 09:02:04' prior: 50483362!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/12/2022 09:02:19' prior: 50483346!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/12/2022 09:04:36' prior: 50486975!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/12/2022 09:08:39' prior: 50483154!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 09:10:48' prior: 50483424!
with: aPriceList 
	^self new initializeWith: aPriceList.! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/12/2022 09:10:56' prior: 50482236!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/12/2022 09:11:05' prior: 50482210!
cannotAddBookWithNonPositiveQuantity
	^'Can not add books with zero or negative quantity'! !
!Cart methodsFor: 'testing' stamp: 'FF 6/12/2022 09:40:32' prior: 50482194!
isEmpty
	^books isEmpty.! !

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/12/2022 10:08:27'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList merchantProcessor today salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 10:08:26' prior: 50488771!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier |
	cart := self findCart: aCartId.
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/12/2022 10:08:51' prior: 50486922!
priceList: aPriceList authenticator: anAuthenticatorService
	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0.
	priceList := aPriceList .
	! !

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:08:57'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 10:08:57'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 10:08:57'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:08:57'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:08:57'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 10:08:57'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:08:57'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 10:08:57'!
ERROR!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:08:57'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 10:08:57'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:08:57'!
ERROR!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:09:06'!
ERROR!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 10:09:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 10:09:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 10:09:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:09:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:09:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 10:09:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:09:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 10:09:15'!
ERROR!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:09:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 10:09:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:09:15'!
ERROR!
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/12/2022 10:09:57' prior: 50489006!
priceList: aPriceList authenticator: anAuthenticatorService
	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0.
	priceList := aPriceList .
	! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/12/2022 10:11:52' prior: 50489098!
priceList: aPriceList authenticator: anAuthenticatorService
	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0.
	priceList := aPriceList .
	salesList := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator new.
	
	! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/12/2022 10:12:24' prior: 50489107!
priceList: aPriceList authenticator: anAuthenticatorService
	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0.
	priceList := aPriceList .
	salesList := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator new.
	today := Date today.
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 10:14:07' prior: 50488990!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier |
	cart := self findCart: aCartId.
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	^0.! !

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 10:16:20'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 10:16:20'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 10:16:20'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 10:16:20'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 10:16:20'!
FAILURE!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 10:16:20'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 10:16:20'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 10:16:20'!
FAILURE!
!CashierTest methodsFor: 'test' stamp: 'FF 6/12/2022 10:17:24' prior: 50485332!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.
	self assert: 1 equals: merchantProcessor answeredCalls.! !

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 10:17:32'!
ERROR!
!Ticket methodsFor: 'initialization' stamp: 'FF 6/12/2022 10:19:59'!
total
	^total.! !
!Ticket methodsFor: 'initialization' stamp: 'FF 6/12/2022 10:20:12'!
books
	^books copy.! !

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 10:20:25'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 10:20:25'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 10:20:25'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 10:20:25'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 10:20:25'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 10:20:25'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 10:20:25'!
PASSED!

!methodRemoval: Cashier class #using: stamp: 'FF 6/12/2022 10:20:37'!
using: aSalesList
	^self new initializeUsing: aSalesList. !

!methodRemoval: Cashier class #with: stamp: 'FF 6/12/2022 10:20:44'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection !

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:21:14'!
ERROR!
!InterfaceFacade methodsFor: 'client' stamp: 'FF 6/12/2022 10:21:52' prior: 50488735!
listPurchasesFrom: aClientId signInWith: aPassword 
	^salesList.! !

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:21:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 10:21:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 10:21:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:21:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:21:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 10:21:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:21:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 10:21:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:21:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 10:21:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:21:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 10:22:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:22:05'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 10:27:30'!
test11InvalidClientCannotListAnyPurchases

	| listPurchases |
	
	self should: [ listPurchases := interfaceFacadeInvalid listPurchasesFrom: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: listPurchases isNil.
	].

	
	
	! !

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 10:27:33'!
FAILURE!
!InterfaceFacade methodsFor: 'client' stamp: 'FF 6/12/2022 10:28:05' prior: 50489240!
listPurchasesFrom: aClientId signInWith: aPassword 
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [^self error: self class clientIsNotValid].
	^salesList.! !

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 10:28:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 10:28:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 10:28:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:28:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:28:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 10:28:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:28:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 10:28:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:28:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 10:28:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:28:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 10:28:13'!
PASSED!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 10:28:46' prior: 50486820!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [self error: self class clientIsNotValid].
	
	newCart := Cart with: priceList.
	lastCartId := lastCartId + 1.
	carts at: lastCartId put: newCart. 
	^lastCartId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 10:29:49'!
assertClient: aClientId canAuthenticateUsing: aPassword

	^ (authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [self error: self class clientIsNotValid]! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 10:29:49' prior: 50489463!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	
	self assertClient: aClientId canAuthenticateUsing: aPassword.
	
	newCart := Cart with: priceList.
	lastCartId := lastCartId + 1.
	carts at: lastCartId put: newCart. 
	^lastCartId.! !
!InterfaceFacade methodsFor: 'client' stamp: 'FF 6/12/2022 10:30:26' prior: 50489411!
listPurchasesFrom: aClientId signInWith: aPassword 
	self assertClient: aClientId canAuthenticateUsing: aPassword.
	^salesList.! !

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 10:32:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 10:32:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 10:32:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:32:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:32:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 10:32:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:32:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 10:32:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:32:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 10:32:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:32:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 10:32:13'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 10:32:50'!
test12CheckOutReturnsUniqueTransactionId

	| firstCartId secondCartId |
	
	firstCartId := interfaceFacade createCartFor: clientId signInWith: password .
	secondCartId := interfaceFacade createCartFor: clientId signInWith: password .

	self deny: (firstCartId = secondCartId).
	

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 10:35:17' prior: 50489545!
test12CheckOutReturnsUniqueTransactionId

	| firstCartId secondCartId quantity firstTransactionId secondTransactionId |
	quantity := 1.
	firstCartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: firstCartId book: validBookISBN quantity: quantity.
		
	firstTransactionId := interfaceFacade checkOut: firstCartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	
	secondCartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: secondCartId book: validBookISBN quantity: quantity.
		
	secondTransactionId := interfaceFacade checkOut: secondCartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	

	self deny: (firstTransactionId = secondTransactionId).
	

	
	
	! !

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 10:35:34'!
FAILURE!

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/12/2022 10:36:20'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList merchantProcessor today salesList lastTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 10:36:17' prior: 50489131!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier |
	cart := self findCart: aCartId.
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/12/2022 10:36:36' prior: 50489119!
priceList: aPriceList authenticator: anAuthenticatorService
	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0.
	priceList := aPriceList .
	salesList := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator new.
	today := Date today.
	lastTransactionId := 0.
	! !

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 10:36:50'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 10:36:53'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 10:36:53'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 10:36:53'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 10:36:53'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 10:36:53'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 10:36:53'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 10:36:53'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 10:36:53'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 10:36:53'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 10:36:53'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 10:36:54'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 10:36:54'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 10:40:25'!
test13CartIdIsInvalidAfterCheckOut

	|  cartId  quantity listPurchases transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.
	self assert: (listPurchases at: 1) books includes: validBookISBN .
	self assert: quantity equals: ((listPurchases at: 1) books occurrencesOf: validBookISBN).
	self assert: 15 equals: ((listPurchases at: 1) total).

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 10:43:07' prior: 50489751!
test13CartIdIsInvalidAfterCheckOut

	|  cartId  quantity transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	
	self should: [ transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 10:43:26' prior: 50489778!
test13CartIdIsInvalidAfterCheckOut

	|  cartId  quantity transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	
	self should: [ transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 10:43:33' prior: 50489803!
test13CartIdIsInvalidAfterCheckOut

	|  cartId  quantity |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	
	self should: [ interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
	].

	
	
	! !

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 10:43:40'!
FAILURE!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 10:44:49' prior: 50489600!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier |
	cart := self findCart: aCartId.
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 10:45:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 10:45:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 10:45:06'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 10:49:58'!
test14ListPurchasesAreDifferentBetweenTwoDifferentClients

	|  cartId  quantity listPurchases transactionId listPurchasesFromAnotherClient |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	listPurchasesFromAnotherClient := interfaceFacade listPurchasesFrom: 'anotherClientId' signInWith: password.
	
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.
	self assert: (listPurchases at: 1) books includes: validBookISBN .
	self assert: quantity equals: ((listPurchases at: 1) books occurrencesOf: validBookISBN).
	self assert: 15 equals: ((listPurchases at: 1) total).

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 10:50:43' prior: 50489995!
test14ListPurchasesAreDifferentBetweenTwoDifferentClients

	|  cartId  quantity listPurchases transactionId listPurchasesFromAnotherClient |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	listPurchasesFromAnotherClient := interfaceFacade listPurchasesFrom: 'anotherClientId' signInWith: password.
	
	self deny: (listPurchases = listPurchasesFromAnotherClient).

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 10:50:59' prior: 50490028!
test14ListPurchasesAreDifferentBetweenTwoDifferentClients

	|  cartId  quantity listPurchases listPurchasesFromAnotherClient |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	listPurchasesFromAnotherClient := interfaceFacade listPurchasesFrom: 'anotherClientId' signInWith: password.
	
	self deny: (listPurchases = listPurchasesFromAnotherClient).

	
	
	! !

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 10:51:02'!
FAILURE!
!InterfaceFacade methodsFor: 'client' stamp: 'FF 6/12/2022 10:53:09' prior: 50489495!
listPurchasesFrom: aClientId signInWith: aPassword 
	self assertClient: aClientId canAuthenticateUsing: aPassword.
	^salesList select:[:ticket | ticket clientId = aClientId ].! !

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 10:53:19'!
ERROR!
!Ticket methodsFor: 'accessing' stamp: 'FF 6/12/2022 10:53:31'!
clientId
	self shouldBeImplemented.! !

!classDefinition: #Ticket category: 'TusLibros' stamp: 'FF 6/12/2022 10:53:42'!
Object subclass: #Ticket
	instanceVariableNames: 'books total clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket methodsFor: 'accessing' stamp: 'FF 6/12/2022 10:53:41' prior: 50490095!
clientId
	^clientId.! !

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 10:53:50'!
FAILURE!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 10:55:33' prior: 50489484!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	
	self assertClient: aClientId canAuthenticateUsing: aPassword.
	
	newCart := Cart from: aClientId with: priceList.
	lastCartId := lastCartId + 1.
	carts at: lastCartId put: newCart. 
	^lastCartId.! !

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:55:42'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 10:55:42'!
ERROR!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 10:55:42'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:55:42'!
ERROR!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:55:42'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 10:55:42'!
ERROR!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:55:42'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 10:55:42'!
ERROR!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 10:55:42'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 10:55:42'!
ERROR!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 10:55:42'!
ERROR!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 10:55:42'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 10:55:42'!
ERROR!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 10:55:42'!
ERROR!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 10:55:42'!
ERROR!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:55:51'!
ERROR!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:55:51'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 10:55:58'!
from: aString with: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aString with: aDictionary ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 10:56:37' prior: 50490186!
from: aClientId with: aPriceList 
	^self new from: aClientId with: aPriceList ! !

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:56:39'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'FF 6/12/2022 10:56:47'!
from: aString with: aDictionary 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/12/2022 10:57:28'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'FF 6/12/2022 10:57:27' prior: 50490204!
from: aClientId with: aPriceList
	priceList := aPriceList .
	clientId := aClientId.
	books := Bag new.
	! !

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:57:31'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 10:57:34'!
PASSED!

!methodRemoval: Cart class #from:with: stamp: 'FF 6/12/2022 10:58:13'!
from: aClientId with: aPriceList 
	^self new from: aClientId with: aPriceList !

----SNAPSHOT----(12 June 2022 11:00:53) CuisUniversity-5096.image priorSource: 5032788!
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 11:02:48'!
from: aClientId with: aPriceList 
	^self new initializeWith: aPriceList.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50483761!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart from: clientId with: priceList .
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50483808!
test06CartBookListIncludesBookAfterAdding

	| cart  |
	cart := Cart from: clientId with: priceList.
	cart add: 2 of: book1 .
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book1).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50483788!
test04CannotAddAnUncataloguedBook

	| book cart |	
	book := 'uncatolog book'.
	cart := Cart from: clientId with: priceList .
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50485461!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier |
	
	cart := Cart from: clientId with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateStolenCreditCard.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithStolenCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 1 equals: merchantProcessor answeredCalls.
		].! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50483767!
test02EmptyCartAfterAddingABookIsNotEmpty

	|  cart |
	cart := Cart from: clientId with: priceList.
	
	cart add: 1 of: book1 .
	
	self deny: cart isEmpty.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50485371!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart from: clientId with: priceList .
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50485446!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart from: clientId with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
		self assert: 1 equals: merchantProcessor answeredCalls.
	self deny: sales isEmpty.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50483801!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart from: clientId with: priceList .
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50483775!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| cart |
	cart := Cart from: clientId with: priceList.
	
	self should: [cart add: -1 of: book1.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50485312!
test02CannotCheckOutCartProvidingAnExpiredCreditCard
	| cart cashier |
	
	cart := Cart from: clientId with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50483823!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart |

	cart := Cart from: clientId with: priceList.
	cart add: 2 of: book1.
	
	self assert: 20 equals: cart total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50485483!
test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit

	| cart cashier |
	
	cart := Cart from: clientId with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateCreditCardWithoutEnoughLimit.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithCreditCardWithoutEnoughLimit equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 1 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50489175!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier ticket |
	
	cart := Cart from: clientId with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.
	self assert: 1 equals: merchantProcessor answeredCalls.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 11:02:48' prior: 50483817!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart from: clientId with: priceList .
	
	self assert: 0 equals: cart total.! !

!methodRemoval: Cart class #with: stamp: 'FF 6/12/2022 11:02:48'!
with: aPriceList 
	^self new initializeWith: aPriceList.!
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 11:03:08' prior: 50490237!
from: aClientId with: aPriceList 
	^self new from: aClientId with: aPriceList.! !

!methodRemoval: Cart #initializeWith: stamp: 'FF 6/12/2022 11:03:22'!
initializeWith: aPriceList
	priceList := aPriceList.
	books := Bag new.!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/12/2022 11:04:02'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1 clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setUp' stamp: 'FF 6/12/2022 11:04:00' prior: 50483755 overrides: 16961394!
setUp

	book1 := 'libro 1'.
	
	priceList := Dictionary new.
	priceList at: book1 put: 10 .
	clientId := 'clientId'.! !

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 11:04:06'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 11:04:06'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 11:04:06'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 11:04:06'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 11:04:06'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 11:04:06'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 11:04:06'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 11:04:06'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 11:04:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 11:04:17'!
FAILURE!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 11:04:17'!
FAILURE!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 11:04:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:04:17'!
FAILURE!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/12/2022 11:04:58'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today merchantProcessor ownerName clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp' stamp: 'FF 6/12/2022 11:04:56' prior: 50488141 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.
	clientId := 'clientId'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.
	
	ownerName := 'owner'.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next from: ownerName.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous from: ownerName.
	merchantProcessor := MerchantProcessorSimulator new.! !

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 11:05:03'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 11:05:03'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 11:05:03'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 11:05:03'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 11:05:03'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 11:05:03'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 11:05:03'!
PASSED!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 11:05:46' prior: 50490114!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	
	self assertClient: aClientId canAuthenticateUsing: aPassword.
	
	newCart := Cart from: aClientId with: priceList.
	lastCartId := lastCartId + 1.
	carts at: lastCartId put: newCart. 
	^lastCartId.! !

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:06:01'!
FAILURE!
!Cart methodsFor: 'total' stamp: 'FF 6/12/2022 11:10:25'!
clientId
	^clientId.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/12/2022 11:11:46' prior: 50488829!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale

	| totalToDebit ticket |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	
	totalToDebit := aCart total.
	merchantProcessor debit: totalToDebit from: aCreditCard .
	ticket := Ticket from: aCart clientId of: aCart books total: totalToDebit .
	salesList add: ticket.
	
	^ticket.! !

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:12:01'!
ERROR!
!Ticket class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 11:12:25'!
from: aString of: aBag total: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFrom: aString of: aBag total: aSmallInteger ! !
!Ticket class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 11:13:23' prior: 50490643!
from: aClientId of: aBooksCollection total: anAmount 
	^self new from: aClientId of: aBooksCollection total: anAmount ! !

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:13:24'!
ERROR!
!Ticket methodsFor: 'initialization' stamp: 'FF 6/12/2022 11:13:29'!
from: aString of: aBag total: aSmallInteger 
	self shouldBeImplemented.! !
!Ticket methodsFor: 'initialization' stamp: 'FF 6/12/2022 11:14:14' prior: 50490664!
from: aClientId of: aBooksCollection total: anAmount 
	clientId := aClientId .
	books := aBooksCollection .
	total := anAmount .! !

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:14:15'!
PASSED!

!methodRemoval: Ticket #of:total: stamp: 'FF 6/12/2022 11:14:26'!
of: aBookBag total: anAmount 
	books := aBookBag .
	total := anAmount .!

!methodRemoval: Ticket class #of:total: stamp: 'FF 6/12/2022 11:14:45'!
of: aBookBag total: anAmount 
	
	^self new of: aBookBag total: anAmount !

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 11:22:56'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:22:56'!
PASSED!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/12/2022 11:27:08' prior: 50490624!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale

	| totalToDebit ticket |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	
	totalToDebit := aCart total.
	merchantProcessor debit: totalToDebit from: aCreditCard .
	ticket := aCart generateTicket.
	salesList add: ticket.
	
	^ticket.! !
!Cart methodsFor: 'total' stamp: 'FF 6/12/2022 11:28:22'!
generateTicket
	^Ticket from: clientId of: books total: self total .

	! !

!methodRemoval: Cart #clientId stamp: 'FF 6/12/2022 11:28:32'!
clientId
	^clientId.
	!
!Cart methodsFor: 'total' stamp: 'FF 6/12/2022 11:29:37' prior: 50490807!
generateTicket
	^Ticket from: clientId of: self books total: self total .

	! !

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:30:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 11:30:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 11:30:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 11:30:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:30:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 11:30:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:30:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 11:30:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:30:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 11:30:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 11:30:04'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 11:30:04'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 11:30:04'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 11:30:04'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:30:04'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 11:30:08'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 11:30:08'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/12/2022 11:31:18' prior: 50490306!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart from: clientId with: priceList .
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/12/2022 11:31:31' prior: 50490363!
test02CannotCheckOutCartProvidingAnExpiredCreditCard
	| cart cashier |
	
	cart := Cart from: clientId with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/12/2022 11:32:05' prior: 50490325!
test03CheckOutCartWithItemsAddElementToSalesList
	| cart cashier |
	
	cart := Cart from: clientId with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	cashier checkOut: cart payingWith: validCreditCard on: today.
			
	self assert: 1 equals: merchantProcessor answeredCalls.
	self deny: sales isEmpty.! !

----SNAPSHOT----(12 June 2022 11:32:33) CuisUniversity-5096.image priorSource: 5074653!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 11:43:08'!
test15CannotCheckOutACartAfterTimeExceeded

	|  cartId  quantity listPurchases listPurchasesFromAnotherClient |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	listPurchasesFromAnotherClient := interfaceFacade listPurchasesFrom: 'anotherClientId' signInWith: password.
	
	self deny: (listPurchases = listPurchasesFromAnotherClient).

	
	
	! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FF 6/12/2022 11:51:25'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password creditCardNumber expirationMonth cardOwnerName today timerSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 11:51:22' prior: 50491055!
test15CannotCheckOutACartAfterTimeExceeded

	|  cartId  quantity listPurchases listPurchasesFromAnotherClient |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	timerSimulator simulateHalfHourHasPassed.
		
	interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	
	self deny: (listPurchases = listPurchasesFromAnotherClient).

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 11:52:37' prior: 50491094!
test15CannotCheckOutACartAfterTimeExceeded

	|  cartId  quantity |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	timerSimulator simulateHalfHourHasPassed.
		 .
	self should: [ interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 11:52:50'!
ERROR!

!classDefinition: #TimerSimulator category: 'TusLibros' stamp: 'FF 6/12/2022 11:53:42'!
Object subclass: #TimerSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/12/2022 11:53:36' prior: 50488550 overrides: 16961394!
setUp

	timerSimulator := TimerSimulator new.
	today := timerSimulator today.
	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month next.
	cardOwnerName := 'owner'.
	
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/12/2022 11:54:36' prior: 50491145 overrides: 16961394!
setUp

	timerSimulator := TimerSimulator new.
	today := timerSimulator today.
	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month next.
	cardOwnerName := 'owner'.
	
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient timer: timerSimulator.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient timer: timerSimulator .! !
!TimerSimulator methodsFor: 'date' stamp: 'FF 6/12/2022 11:55:07'!
today
	self shouldBeImplemented.! !

!classDefinition: #TimerSimulator category: 'TusLibros' stamp: 'FF 6/12/2022 11:55:30'!
Object subclass: #TimerSimulator
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TimerSimulator methodsFor: 'date' stamp: 'FF 6/12/2022 11:55:27' prior: 50491203!
today
	^today.! !
!TimerSimulator methodsFor: 'date' stamp: 'FF 6/12/2022 11:56:03' overrides: 16920235!
initialize
	today := Date today.! !
!InterfaceFacade class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 11:56:34'!
priceList: aDictionary authenticator: anAuthenticatorServiceSimulator timer: aTimerSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializePriceList: aDictionary authenticator: anAuthenticatorServiceSimulator timer: aTimerSimulator ! !
!InterfaceFacade class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 11:56:44' prior: 50491222!
priceList: aDictionary authenticator: anAuthenticatorServiceSimulator timer: aTimerSimulator 
	^self new priceList: aDictionary authenticator: anAuthenticatorServiceSimulator timer: aTimerSimulator ! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/12/2022 11:56:59'!
priceList: aDictionary authenticator: anAuthenticatorServiceSimulator timer: aTimerSimulator 
	self shouldBeImplemented.! !

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/12/2022 11:57:38'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList merchantProcessor today salesList lastTransactionId timer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/12/2022 11:57:37' prior: 50491244!
priceList: aPriceList authenticator: anAuthenticatorService timer: aTimer 
	priceList := aPriceList .
	authenticatorService := anAuthenticatorService .
	timer := aTimer .! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/12/2022 11:58:14' prior: 50491261!
priceList: aPriceList authenticator: anAuthenticatorService timer: aTimer 
	priceList := aPriceList .
	authenticatorService := anAuthenticatorService .
	timer := aTimer .
	carts := Dictionary new.
	lastCartId := 0.
	lastTransactionId := 0.! !

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 11:58:18'!
ERROR!
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/12/2022 11:59:14' prior: 50491270!
priceList: aPriceList authenticator: anAuthenticatorService timer: aTimer 
	priceList := aPriceList .
	authenticatorService := anAuthenticatorService .
	timer := aTimer .
	carts := Dictionary new.
	lastCartId := 0.
	lastTransactionId := 0.
	salesList := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator new.
	today := timer today.! !

!methodRemoval: InterfaceFacade #priceList:authenticator: stamp: 'FF 6/12/2022 11:59:20'!
priceList: aPriceList authenticator: anAuthenticatorService
	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0.
	priceList := aPriceList .
	salesList := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator new.
	today := Date today.
	lastTransactionId := 0.
	!
!InterfaceFacade class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 11:59:45' prior: 50491235!
priceList: aPriceList authenticator: anAuthenticatorService timer: aTimer 
	^self new priceList: aPriceList authenticator: anAuthenticatorService timer: aTimer ! !

!methodRemoval: InterfaceFacade class #priceList:authenticator: stamp: 'FF 6/12/2022 11:59:49'!
priceList: aPriceList authenticator: anAuthenticatorService
	
	^self new priceList: aPriceList authenticator: anAuthenticatorService!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:00:10'!
ERROR!
!TimerSimulator methodsFor: 'simulation' stamp: 'FF 6/12/2022 12:00:23'!
simulateHalfHourHasPassed
	self shouldBeImplemented.! !
!TimerSimulator methodsFor: 'simulation' stamp: 'FF 6/12/2022 12:00:40' prior: 50491332!
simulateHalfHourHasPassed
	! !
!TimerSimulator methodsFor: 'initialization' stamp: 'FF 6/12/2022 12:01:04' prior: 50491218 overrides: 16920235!
initialize
	today := DateAndTime today.! !
!TimerSimulator methodsFor: 'initialization' stamp: 'FF 6/12/2022 12:01:25' prior: 50491342 overrides: 16920235!
initialize
	today := DateAndTime now.! !
!TimerSimulator methodsFor: 'initialization' stamp: 'FF 6/12/2022 12:01:46' prior: 50491347 overrides: 16920235!
initialize
	today := DateAndTime now.! !

!classDefinition: #TimerSimulator category: 'TusLibros' stamp: 'FF 6/12/2022 12:02:16'!
Object subclass: #TimerSimulator
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TimerSimulator methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 12:02:16' prior: 50491214!
today
	^now.! !
!TimerSimulator methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 12:02:16' prior: 50491352 overrides: 16920235!
initialize
	now := DateAndTime now.! !
!TimerSimulator methodsFor: 'date' stamp: 'FF 6/12/2022 12:02:37' prior: 50491364!
today
	^now date.! !

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:03:15'!
FAILURE!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:03:24'!
FAILURE!
!TimerSimulator methodsFor: 'simulation' stamp: 'FF 6/12/2022 12:04:41' prior: 50491337!
simulateHalfHourHasPassed
	now + Duration minutes: 30.! !
!TimerSimulator methodsFor: 'simulation' stamp: 'FF 6/12/2022 12:04:55' prior: 50491384!
simulateHalfHourHasPassed
	now := now + Duration minutes: 30.! !

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/12/2022 12:07:18'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList merchantProcessor today salesList lastTransactionId timer cartsCreationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:07:15' prior: 50490605!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	
	self assertClient: aClientId canAuthenticateUsing: aPassword.
	
	newCart := Cart from: aClientId with: priceList.
	lastCartId := lastCartId + 1.
	cartsCreationTime at: lastCartId put: timer now.
	carts at: lastCartId put: newCart. 
	^lastCartId.! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/12/2022 12:08:08' prior: 50491285!
priceList: aPriceList authenticator: anAuthenticatorService timer: aTimer 
	priceList := aPriceList .
	authenticatorService := anAuthenticatorService .
	timer := aTimer .
	carts := Dictionary new.
	lastCartId := 0.
	lastTransactionId := 0.
	salesList := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator new.
	cartsCreationTime := Dictionary new.
	today := timer today.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:14:33' prior: 50489854!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier creationTime lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsCreationTime at: aCartId).
	
	(now - creationTime > Duration minutes: 30 ).
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FF 6/12/2022 12:14:58'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList merchantProcessor today salesList lastTransactionId timer cartsLastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 12:14:58' prior: 50491405!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	
	self assertClient: aClientId canAuthenticateUsing: aPassword.
	
	newCart := Cart from: aClientId with: priceList.
	lastCartId := lastCartId + 1.
	cartsLastTimeUsed at: lastCartId put: timer now.
	carts at: lastCartId put: newCart. 
	^lastCartId.! !
!InterfaceFacade methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 12:14:58' prior: 50491433!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier creationTime lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	
	(now - creationTime > Duration minutes: 30 ).
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !
!InterfaceFacade methodsFor: 'as yet unclassified' stamp: 'FF 6/12/2022 12:14:58' prior: 50491418!
priceList: aPriceList authenticator: anAuthenticatorService timer: aTimer 
	priceList := aPriceList .
	authenticatorService := anAuthenticatorService .
	timer := aTimer .
	carts := Dictionary new.
	lastCartId := 0.
	lastTransactionId := 0.
	salesList := OrderedCollection new.
	merchantProcessor := MerchantProcessorSimulator new.
	cartsLastTimeUsed := Dictionary new.
	today := timer today.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:17:43' prior: 50491480!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier creationTime lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	
	(now - creationTime > Duration minutes: 30 ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
		 ].
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:17:53' prior: 50491519!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	
	(now - lastTimeUsed > Duration minutes: 30 ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
		 ].
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:18:14' prior: 50491546!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	
	(now - lastTimeUsed > Duration minutes: 30 ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
		 ].
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:19:03'!
ERROR!
!TimerSimulator methodsFor: 'date' stamp: 'FF 6/12/2022 12:19:22'!
now
	self shouldBeImplemented.
	^now! !
!TimerSimulator methodsFor: 'date' stamp: 'FF 6/12/2022 12:19:27' prior: 50491603!
now
	^now! !
!TimerSimulator methodsFor: 'simulation' stamp: 'FF 6/12/2022 12:20:55' prior: 50491389!
simulateHalfHourHasPassed
	now := now + (Duration minutes: 30).! !

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:20:56'!
ERROR!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:21:39' prior: 50491573!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	
	((now - lastTimeUsed) > Duration minutes: 30 ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
		 ].
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:21:48' prior: 50491620!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	
	((now - lastTimeUsed) > (Duration minutes: 30) ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
		 ].
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:21:51'!
FAILURE!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:21:58'!
FAILURE!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:22:40' prior: 50491647!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	Halt.
	((now - lastTimeUsed) > (Duration minutes: 30) ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
		 ].
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:22:47'!
FAILURE!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:23:24' prior: 50491681!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	self shouldBeImplemented .
	((now - lastTimeUsed) > (Duration minutes: 30) ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
		 ].
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:23:33'!
ERROR!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:24:21' prior: 50491712!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	self halt .
	((now - lastTimeUsed) > (Duration minutes: 30) ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
		 ].
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:25:23' prior: 50491743!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	self halt .
	((now - lastTimeUsed) >= (Duration minutes: 30) ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
		 ].
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:25:29'!
ERROR!
!InterfaceFacade class methodsFor: 'error messages' stamp: 'FF 6/12/2022 12:25:39'!
cartIsExpired
	self shouldBeImplemented.! !
!InterfaceFacade class methodsFor: 'error messages' stamp: 'FF 6/12/2022 12:26:30' prior: 50491801!
cartIsExpired
	'The cart has expired'! !

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:26:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 12:26:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 12:26:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 12:26:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:26:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 12:26:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:26:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:26:32'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 12:26:32'!
PASSED!
!InterfaceFacade class methodsFor: 'error messages' stamp: 'FF 6/12/2022 12:26:45' prior: 50491806!
cartIsExpired
	^'The cart has expired'! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:27:05' prior: 50491770!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier lastTimeUsed now |
	cart := self findCart: aCartId.
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	((now - lastTimeUsed) >= (Duration minutes: 30) ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
		 ].
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:27:10'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 12:27:10'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 12:27:10'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 12:27:10'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:27:10'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 12:27:10'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:27:10'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 12:27:10'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:27:10'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 12:27:10'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 12:27:10'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 12:27:11'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 12:27:11'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 12:27:11'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 12:27:11'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:27:11'!
PASSED!

----SNAPSHOT----(12 June 2022 12:27:21) CuisUniversity-5096.image priorSource: 5100833!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:30:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 12:30:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 12:30:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 12:30:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:30:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 12:30:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:30:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 12:30:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:30:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 12:30:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 12:30:05'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 12:30:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 12:30:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 12:30:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 12:30:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:30:06'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 12:30:34'!
test15CannotAddToCartAfterTimeExceeded

	|  cartId  quantity |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	timerSimulator simulateHalfHourHasPassed.
		 .
	self should: [ interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 12:30:46'!
test16CannotAddToCartAfterTimeExceeded

	|  cartId  quantity |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	timerSimulator simulateHalfHourHasPassed.
		 .
	self should: [ interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !

!methodRemoval: InterfaceFacadeTest #test15CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 12:30:46'!
test15CannotAddToCartAfterTimeExceeded

	|  cartId  quantity |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	timerSimulator simulateHalfHourHasPassed.
		 .
	self should: [ interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 12:31:37' prior: 50492013!
test16CannotAddToCartAfterTimeExceeded

	|  cartId  quantity |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateHalfHourHasPassed.
		 .
	self should: [ interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity. ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 12:31:42'!
FAILURE!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:34:58'!
assertCartIsNotExpired: aCartId
	|  lastTimeUsed now |
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	((now - lastTimeUsed) >= (Duration minutes: 30) ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
		 ].
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:35:06' prior: 50492075!
assertCartIsNotExpired: aCartId
	|  lastTimeUsed now |
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	((now - lastTimeUsed) >= (Duration minutes: 30) ) 
	ifTrue: [
		carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId .
		self error: self class cartIsExpired.
	 ].
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:35:33' prior: 50491847!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier |
	cart := self findCart: aCartId.
	
	self assertCartIsNotExpired: aCartId.
	
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	carts removeKey: aCartId.
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:35:48' prior: 50487160!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd

	| cartFound |
	cartFound := self findCart: aCartId.
	
	self assertCartIsNotExpired: aCartId.
	
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:36:06'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 12:36:06'!
PASSED!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:36:38'!
deleteCart: aCartId

	carts removeKey: aCartId.
		cartsLastTimeUsed removeKey: aCartId! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:36:38' prior: 50492088!
assertCartIsNotExpired: aCartId
	|  lastTimeUsed now |
	now := timer now.
	lastTimeUsed := (cartsLastTimeUsed at: aCartId).
	((now - lastTimeUsed) >= (Duration minutes: 30) ) 
	ifTrue: [
		self deleteCart: aCartId .
		self error: self class cartIsExpired.
	 ].
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:36:48' prior: 50492191!
deleteCart: aCartId

	carts removeKey: aCartId.
	cartsLastTimeUsed removeKey: aCartId! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:37:17' prior: 50492101!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier |
	cart := self findCart: aCartId.
	
	self assertCartIsNotExpired: aCartId.
	
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	self deleteCart: aCartId .
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 12:38:32'!
test17CannotListACartAfterTimeExceeded

	|  cartId  quantity |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateHalfHourHasPassed.
		 .
	self should: [ interfaceFacade listCart: cartId] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 12:39:03' prior: 50492234!
test17CannotListACartAfterTimeExceeded

	|  cartId  |
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateHalfHourHasPassed.
		 .
	self should: [ interfaceFacade listCart: cartId] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:39:16'!
FAILURE!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:39:38' prior: 50487168!
listCart: aCartId 
	| cartFound |
	cartFound := self findCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	^cartFound books.! !

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 12:39:47'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 12:39:48'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 12:39:48'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:39:48'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 12:39:48'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:39:48'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 12:39:55' prior: 50492250!
test17CannotListACartAfterTimeExceeded

	|  cartId  |
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateHalfHourHasPassed.

	self should: [ interfaceFacade listCart: cartId] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 12:41:41'!
test18AddToCartRestartLastTimeUsed

	|  cartId  quantity |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateHalfHourHasPassed.
		 .
	self should: [ interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity. ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 12:44:14' prior: 50492356!
test18AddToCartRestartLastTimeUsed

	|  cartId  quantity listCart |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateQuarterHourHasPassed.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	timerSimulator simulateQuarterHourHasPassed.
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.! !

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 12:44:50'!
ERROR!
!TimerSimulator methodsFor: 'simulation' stamp: 'FF 6/12/2022 12:44:57'!
simulateQuarterHourHasPassed
	self shouldBeImplemented.! !
!TimerSimulator methodsFor: 'simulation' stamp: 'FF 6/12/2022 12:45:20' prior: 50492392!
simulateQuarterHourHasPassed
	now := now + (Duration minutes: 15).! !

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 12:45:21'!
ERROR!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:46:36' prior: 50492121!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd

	| cartFound |
	cartFound := self findCart: aCartId.
	
	self assertCartIsNotExpired: aCartId.
	
	cartsLastTimeUsed at: aCartId put: timer now.
	
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:46:44'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 12:46:44'!
PASSED!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 12:48:08'!
test19ListCartRestartLastTimeUsed

	|  cartId  quantity listCart |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateQuarterHourHasPassed.
	interfaceFacade listCart: cartId.
	timerSimulator simulateQuarterHourHasPassed.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.! !

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 12:48:12'!
ERROR!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:48:54'!
updateLastTimeUsed: aCartId

	^ cartsLastTimeUsed at: aCartId put: timer now! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:48:55' prior: 50492406!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd

	| cartFound |
	cartFound := self findCart: aCartId.
	
	self assertCartIsNotExpired: aCartId.
	
	self updateLastTimeUsed: aCartId.
	
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 12:49:03' prior: 50492269!
listCart: aCartId 
	| cartFound |
	cartFound := self findCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	self updateLastTimeUsed: aCartId.
	^cartFound books.! !

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 12:49:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 12:49:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 12:49:12'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 12:49:13'!
PASSED!

----SNAPSHOT----(12 June 2022 12:50:42) CuisUniversity-5096.image priorSource: 5128974!

----SNAPSHOT----(12 June 2022 12:51:16) CuisUniversity-5096.image priorSource: 5150412!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/12/2022 13:55:22' prior: 50488932!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 13:57:27' prior: 50492511!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd
	| cartFound |
	cartFound := self findCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	self updateLastTimeUsed: aCartId.
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:01:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:01:38'!
PASSED!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:01:45' prior: 50492197!
assertCartIsNotExpired: aCartId
	|  lastTimeUsed now |
	now := timer now.
	lastTimeUsed := cartsLastTimeUsed at: aCartId.
	((now - lastTimeUsed) >= (Duration minutes: 30) ) 
	ifTrue: [
		self deleteCart: aCartId .
		self error: self class cartIsExpired.
	 ].
	! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:01:46'!
PASSED!

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:01:46'!
PASSED!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:01:57' prior: 50492764!
assertCartIsNotExpired: aCartId
	|  lastTimeUsed now |
	now := timer now.
	lastTimeUsed := cartsLastTimeUsed at: aCartId.
	now - lastTimeUsed >= (Duration minutes: 30)  
	ifTrue: [
		self deleteCart: aCartId .
		self error: self class cartIsExpired.
	 ].
	! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 14:01:58'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 14:01:58'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 14:01:58'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:01:58'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 14:01:58'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:01:58'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 14:01:58'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:01:59'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:02:03'!
PASSED!

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:02:03'!
PASSED!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:02:22' prior: 50492843!
assertCartIsNotExpired: aCartId
	|  lastTimeUsed now |
	now := timer now.
	lastTimeUsed := cartsLastTimeUsed at: aCartId.
	now - lastTimeUsed >= (Duration minutes: 30) ifTrue: [
		self deleteCart: aCartId .
		self error: self class cartIsExpired.
	 ].
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:05:35' prior: 50491467!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	
	self assertClient: aClientId canAuthenticateUsing: aPassword.
	
	newCart := Cart from: aClientId with: priceList.
	lastCartId := lastCartId + 1.
	cartsLastTimeUsed at: lastCartId put: timer now.
	carts at: lastCartId put: newCart. 
	^lastCartId.! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:05:38'!
PASSED!

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:05:38'!
PASSED!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:05:56' prior: 50493070!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	
	self assertClient: aClientId canAuthenticateUsing: aPassword.
	
	newCart := Cart from: aClientId with: priceList.
	lastCartId := lastCartId + 1.
	self updateLastTimeUsed: lastCartId .
	carts at: lastCartId put: newCart. 
	^lastCartId.! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 14:06:06'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 14:06:06'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 14:06:06'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:06:07'!
PASSED!

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:06:07'!
PASSED!
!Cart methodsFor: 'accessing' stamp: 'FF 6/12/2022 14:18:26' prior: 50486962!
books
	^books copy.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/12/2022 14:20:19' prior: 50490794!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale

	| ticket |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	
	merchantProcessor debit: aCart total from: aCreditCard .
	ticket := aCart generateTicket.
	salesList add: ticket.
	
	^ticket.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/12/2022 14:21:25'!
expirationDate

	^ Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/12/2022 14:21:25' prior: 50488952!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := self expirationDate.
	^aDate > expirationDate.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/12/2022 14:21:41' prior: 50493393!
isExpiredOn: aDate 
	^aDate > self expirationDate.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/12/2022 14:21:53' prior: 50493399!
isExpiredOn: aDate 
	^ aDate > self expirationDate.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:22:21' prior: 50488095!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName  	

	(aCreditCardNumber size < 16) ifTrue: [self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:23:03'!
assertCreditCardValidLenght: aCreditCardNumber

	^ (aCreditCardNumber size < 16) ifTrue: [self error: self invalidCreditCardNumber]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:23:03' prior: 50493409!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName  	

	self assertCreditCardValidLenght: aCreditCardNumber.
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:23:32'!
assertCreditCardValidFormat: aCreditCardNumber

	^ (aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [self error: self invalidCreditCardNumber]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:23:32' prior: 50493435!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName  	

	self assertCreditCardValidLenght: aCreditCardNumber.
	self assertCreditCardValidFormat: aCreditCardNumber.
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:24:02'!
assertCreditCardValidExpirationMonth: anExpirationMonthOfYear

	^ (anExpirationMonthOfYear isKindOf: Month) ifFalse: [self error: self invalidExpirationDate]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:24:02' prior: 50493461!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName  	

	self assertCreditCardValidLenght: aCreditCardNumber.
	self assertCreditCardValidFormat: aCreditCardNumber.
	self assertCreditCardValidExpirationMonth: anExpirationMonthOfYear.
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:25:19'!
assertCreditCardIsValid: anExpirationMonthOfYear expiringOn: aCreditCardNumber

	self assertCreditCardValidLenght: aCreditCardNumber.
	self assertCreditCardValidFormat: aCreditCardNumber.
	self assertCreditCardValidExpirationMonth: anExpirationMonthOfYear! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:25:19' prior: 50493485!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName  	

	self assertCreditCardIsValid: anExpirationMonthOfYear expiringOn: aCreditCardNumber.
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:25:37' prior: 50493511!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName  	

	self assertCreditCardIsValid: aCreditCardNumber expiringOn: anExpirationMonthOfYear.
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:27:33'!
test07CardCannotBeCreatedWithEmptyOwnerName
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month from: ownerName ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FF 6/12/2022 14:28:37'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today ownerName validNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'setUp' stamp: 'FF 6/12/2022 14:28:35' prior: 50488168 overrides: 16961394!
setUp

	today := Date today.
	ownerName := 'owner'.
	validNumber := '4251236587945120'.! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:29:00' prior: 50488262!
test03CardCannotBeCreatedWhenValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: validNumber validTo: '' from: ownerName ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:29:07' prior: 50488275!
test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired

	|card|
	
	card := CreditCard number: validNumber validTo: today month previous from: ownerName .
	
	self assert: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:29:14' prior: 50488285!
test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: validNumber validTo: today month next from: ownerName .
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:29:20' prior: 50488173!
test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: validNumber validTo: today month from: ownerName .
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:29:28' prior: 50493534!
test07CardCannotBeCreatedWithEmptyOwnerName
	|card|

	self should: [card := CreditCard number: validNumber validTo: today month from: ownerName ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:29:31' prior: 50493604!
test07CardCannotBeCreatedWithEmptyOwnerName
	|card|

	self should: [card := CreditCard number: validNumber validTo: today month from: '' ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:29:53' prior: 50493617!
test07CardCannotBeCreatedWithEmptyOwnerName
	|card|

	self should: [card := CreditCard number: validNumber validTo: today month from: '' ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardOwner equals: anError messageText .
		self assert: card isNil.
		]! !

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:29:56'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'FF 6/12/2022 14:30:05'!
invalidCreditCardOwner
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'FF 6/12/2022 14:30:25' prior: 50493646!
invalidCreditCardOwner
	^'The card owner is not valid'.! !

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:30:27'!
FAILURE!

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:30:30'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 14:30:30'!
FAILURE!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 14:30:30'!
FAILURE!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 14:30:30'!
FAILURE!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 14:30:30'!
ERROR!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:30:30'!
ERROR!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 14:30:30'!
ERROR!

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:30:30'!
FAILURE!

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:30:47'!
FAILURE!

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:30:47'!
FAILURE!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:31:24'!
ERROR!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:31:24'!
ERROR!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:31:30'!
ERROR!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:31:31'!
ERROR!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:31:35'!
ERROR!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 14:31:50'!
ERROR!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 14:31:58'!
FAILURE!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 14:31:58'!
FAILURE!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 14:31:58'!
FAILURE!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 14:31:58'!
ERROR!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:31:58'!
ERROR!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 14:31:58'!
ERROR!

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:31:58'!
FAILURE!
!CreditCard class methodsFor: 'assertions' stamp: 'FF 6/12/2022 14:33:08' prior: 50493499!
assertCreditCardIsValid: aCreditCardNumber expiringOn: anExpirationMonthOfYear

	self assertCreditCardValidLenght: aCreditCardNumber.
	self assertCreditCardValidFormat: aCreditCardNumber.
	self assertCreditCardValidExpirationMonth: anExpirationMonthOfYear! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 14:33:14'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 14:33:14'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 14:33:14'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 14:33:14'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 14:33:14'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 14:33:14'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 14:33:21'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 14:33:21'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 14:33:21'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 14:33:21'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:33:21'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 14:33:21'!
PASSED!

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:33:21'!
FAILURE!

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:33:21'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:34:44' prior: 50493523!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName  	

	self assertCreditCardIsValid: aCreditCardNumber expiringOn: anExpirationMonthOfYear.
	self assertOwnerNameIsNotEmpty: aCardOwnerName .
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !
!CreditCard class methodsFor: 'assertions' stamp: 'FF 6/12/2022 14:35:48'!
assertOwnerNameIsNotEmpty: aCreditCardOwnerName

	aCreditCardOwnerName isEmpty ifTrue:[self error: self invalidCreditCardOwner ].! !

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:35:57'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 14:35:57'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 14:35:57'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 14:35:57'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 14:35:57'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:35:57'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 14:35:57'!
PASSED!

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:35:57'!
PASSED!
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/12/2022 14:37:12' prior: 50493811!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName  	

	self assertCreditCardIsValid: aCreditCardNumber expiringOn: anExpirationMonthOfYear from: aCardOwnerName.
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !
!CreditCard class methodsFor: 'assertions' stamp: 'FF 6/12/2022 14:37:31'!
assertCreditCardIsValid: aCreditCardNumber expiringOn: anExpirationMonthOfYear from: aCardOwnerName

	self assertCreditCardValidLenght: aCreditCardNumber.
	self assertCreditCardValidFormat: aCreditCardNumber.
	self assertCreditCardValidExpirationMonth: anExpirationMonthOfYear.
	self assertOwnerNameIsNotEmpty: aCardOwnerName .! !

!methodRemoval: CreditCard class #assertCreditCardIsValid:expiringOn: stamp: 'FF 6/12/2022 14:37:33'!
assertCreditCardIsValid: aCreditCardNumber expiringOn: anExpirationMonthOfYear

	self assertCreditCardValidLenght: aCreditCardNumber.
	self assertCreditCardValidFormat: aCreditCardNumber.
	self assertCreditCardValidExpirationMonth: anExpirationMonthOfYear!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:39:53' prior: 50492522!
listCart: aCartId 
	| cartFound |
	self findCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	self updateLastTimeUsed: aCartId.
	^cartFound books.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:41:29'!
findValidCartAndUpdateLastTimeUsed: aCartId

	self findCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	self updateLastTimeUsed: aCartId! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:41:29' prior: 50493899!
listCart: aCartId 
	| cartFound |
	self findValidCartAndUpdateLastTimeUsed: aCartId.
	^cartFound books.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:41:40' prior: 50493914!
listCart: aCartId 
	| cartFound |
	cartFound := self findValidCartAndUpdateLastTimeUsed: aCartId.
	^cartFound books.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:41:58' prior: 50492616!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd
	| cartFound |
	cartFound := self findValidCartAndUpdateLastTimeUsed: aCartId.
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:42:06' prior: 50493906!
findValidCartAndUpdateLastTimeUsed: aCartId
	self findCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	self updateLastTimeUsed: aCartId! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:42:26' prior: 50493936!
findValidCartAndUpdateLastTimeUsed: aCartId
	| cart |
	cart := self findCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	self updateLastTimeUsed: aCartId.
	^cart.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:43:04' prior: 50492214!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier |
	cart := self findCart: aCartId.
	self assertCartIsNotExpired: aCartId.
	
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.
	self deleteCart: aCartId .
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:43:50' prior: 50493952!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cartFound cashier |
	cartFound := self findValidCartAndUpdateLastTimeUsed: aCartId.
	
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cartFound payingWith: creditCard on: today.
	self deleteCart: aCartId .
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:44:45' prior: 50493972!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cartFound cashier |
	cartFound := self findValidCartAndUpdateLastTimeUsed: aCartId.
	
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cartFound payingWith: creditCard on: today.
	self deleteCart: aCartId .
	^self getNextTransactionId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:45:13'!
getNextTransactionId
	lastTransactionId := lastTransactionId + 1.
	^lastTransactionId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:45:40'!
getNextCartId
	lastCartId := lastCartId + 1.
	^lastCartId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:46:24' prior: 50493220!
createCartFor: aClientId signInWith: aPassword 
	| newCart newCartId |
	
	self assertClient: aClientId canAuthenticateUsing: aPassword.
	
	newCart := Cart from: aClientId with: priceList.
	newCartId := self getNextCartId .
	self updateLastTimeUsed: newCartId .
	carts at: newCartId put: newCart. 
	^newCartId.! !

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:46:26'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 14:46:35'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 14:46:35'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 14:46:35'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 14:46:35'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 14:46:35'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 14:46:35'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 14:46:35'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:46:36'!
PASSED!

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:46:36'!
PASSED!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/12/2022 14:46:54' prior: 50493992!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cartFound cashier |
	
	cartFound := self findValidCartAndUpdateLastTimeUsed: aCartId.
	cashier := Cashier using: salesList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cartFound payingWith: creditCard on: today.
	self deleteCart: aCartId .
	^self getNextTransactionId.! !
!TimerSimulator methodsFor: 'simulation' stamp: 'FF 6/12/2022 14:49:47'!
simulateHasPassed: aDuration
	now := now + aDuration.! !

!methodRemoval: TimerSimulator #simulateHalfHourHasPassed stamp: 'FF 6/12/2022 14:49:55'!
simulateHalfHourHasPassed
	now := now + (Duration minutes: 30).!

!methodRemoval: TimerSimulator #simulateQuarterHourHasPassed stamp: 'FF 6/12/2022 14:49:58'!
simulateQuarterHourHasPassed
	now := now + (Duration minutes: 15).!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:50:34' prior: 50491113!
test15CannotCheckOutACartAfterTimeExceeded

	|  cartId  quantity |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	timerSimulator simulateHasPassed: (Duration minutes: 30).
		 .
	self should: [ interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:50:42' prior: 50492055!
test16CannotAddToCartAfterTimeExceeded

	|  cartId  quantity |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateHasPassed: (Duration minutes: 30)..
		 .
	self should: [ interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity. ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:50:49' prior: 50492341!
test17CannotListACartAfterTimeExceeded

	|  cartId  |
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateHasPassed: (Duration minutes: 30)..

	self should: [ interfaceFacade listCart: cartId] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:50:53' prior: 50494315!
test17CannotListACartAfterTimeExceeded

	|  cartId  |
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateHasPassed: (Duration minutes: 30).

	self should: [ interfaceFacade listCart: cartId] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartIsExpired equals: anError messageText.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:51:07' prior: 50492373!
test18AddToCartRestartLastTimeUsed

	|  cartId  quantity listCart |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateHasPassed: (Duration minutes: 15).
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	timerSimulator simulateHasPassed: (Duration minutes: 15).
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:51:15' prior: 50492485!
test19ListCartRestartLastTimeUsed

	|  cartId  quantity listCart |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	timerSimulator simulateHasPassed: (Duration minutes: 15).
	interfaceFacade listCart: cartId.
	timerSimulator simulateHasPassed: (Duration minutes: 15).
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.! !

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 14:51:16'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 14:51:17'!
PASSED!

----SNAPSHOT----(12 June 2022 14:51:38) CuisUniversity-5096.image priorSource: 5150501!

Object subclass: #FactoryObjectsToTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #FactoryObjectsToTest category: 'TusLibros' stamp: 'FF 6/12/2022 14:53:50'!
Object subclass: #FactoryObjectsToTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'test' stamp: 'FF 6/12/2022 14:59:22' prior: 50490297!
test02EmptyCartAfterAddingABookIsNotEmpty

	|  cart |
	cart := Cart from: clientId with: priceList.
	cart add: 1 of: book1 .
	self deny: cart isEmpty.! !

!classRemoval: #FactoryObjectsToTest stamp: 'FF 6/12/2022 15:00:24'!
Object subclass: #FactoryObjectsToTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsTotal stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CashierTest #test05CannotCheckOutCartProvidingStolenCreditCard stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CashierTest #test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWhenValidToIsNotAMonth stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CreditCardTest #test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #CreditCardTest #test07CardCannotBeCreatedWithEmptyOwnerName stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test01ValidClientCanCreateACart stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test02InvalidClientCannotCreateACart stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test03CreateCartReturnsUniqueCartId stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test04ListCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test05ListCartIncludesAddedItemsAndItsQuantity stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test06AddToCartWithInvalidCartIdThrowsError stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test07CheckOutCartReturnsTransactionId stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test08CheckOutCartOfInvalidCartIdThrowsError stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test09CheckOutCartWithInvalidCreditCardThrowsError stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test10ListPurchasesReturnsClientTransactions stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test11InvalidClientCannotListAnyPurchases stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test12CheckOutReturnsUniqueTransactionId stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test13CartIdIsInvalidAfterCheckOut stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test14ListPurchasesAreDifferentBetweenTwoDifferentClients stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test15CannotCheckOutACartAfterTimeExceeded stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test16CannotAddToCartAfterTimeExceeded stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test17CannotListACartAfterTimeExceeded stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test18AddToCartRestartLastTimeUsed stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

!testRun: #InterfaceFacadeTest #test19ListCartRestartLastTimeUsed stamp: 'FF 6/12/2022 15:00:35'!
PASSED!

----SNAPSHOT----(12 June 2022 15:01:33) CuisUniversity-5096.image priorSource: 5211994!

----SNAPSHOT----(12 June 2022 15:33:52) CuisUniversity-5096.image priorSource: 5217524!