

----STARTUP---- (3 June 2022 23:15:58) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!


----SNAPSHOT----(3 June 2022 23:16:04) CuisUniversity-5096.image priorSource: 4557982!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/3/2022 23:17:23'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/3/2022 23:18:26'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15'!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:18:34'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50474121!
isEmpty
	^true.! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:19:43'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:19:43'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00'!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:21:29'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45'!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/3/2022 23:23:14'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50474144!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:23:24'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:25:47'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50474125!
isEmpty
	^books isEmpty.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:26:24'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:26:24'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:26:24'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:27:08'!
FAILURE!
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58'!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:30:09'!
FAILURE!

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:30:09'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50474155!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:34:13'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:34:13'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:34:13'!
PASSED!

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:34:13'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/3/2022 23:35:39'!
FAILURE!
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07'!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50474212!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

----SNAPSHOT----(3 June 2022 23:38:01) CuisUniversity-5096.image priorSource: 4558172!

----STARTUP---- (4 June 2022 09:45:15) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!


!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/4/2022 10:13:58'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50474252!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50474232!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:14:39'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50474287!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:15:09'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50474318!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:16:27'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43'!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50474334!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:17:08'!
ERROR!

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:17:08'!
ERROR!

!methodRemoval: Cart #initialize stamp: 'FF 6/4/2022 10:17:25'!
initialize 

	books := Bag new.!

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:17:34'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50474113!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50474134!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24'!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:19:24'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32'!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:19:32'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50474384!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50474436!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:20:21'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:20:23'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:20:29'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50474409!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50474486!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:21:09'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47'!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:26:49'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58'!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50474537!
books
	^books! !

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:10'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53'!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/4/2022 10:30:01'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50474276!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !