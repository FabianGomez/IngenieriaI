

----STARTUP---- (3 June 2022 23:15:58) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!


----SNAPSHOT----(3 June 2022 23:16:04) CuisUniversity-5096.image priorSource: 4557982!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FF 6/3/2022 23:17:23'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/3/2022 23:18:26'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15'!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:18:34'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50474121!
isEmpty
	^true.! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:19:43'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:19:43'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00'!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:21:29'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45'!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/3/2022 23:23:14'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50474144!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:23:24'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:25:47'!
FAILURE!
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50474125!
isEmpty
	^books isEmpty.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:26:24'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:26:24'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:26:24'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:27:08'!
FAILURE!
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58'!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:30:09'!
FAILURE!

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:30:09'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50474155!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:34:13'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/3/2022 23:34:13'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/3/2022 23:34:13'!
PASSED!

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/3/2022 23:34:13'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/3/2022 23:35:39'!
FAILURE!
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07'!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50474212!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

----SNAPSHOT----(3 June 2022 23:38:01) CuisUniversity-5096.image priorSource: 4558172!

----STARTUP---- (4 June 2022 09:45:15) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!


!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/4/2022 10:13:58'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50474252!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50474232!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:14:39'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50474287!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:15:09'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50474318!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:16:27'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43'!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50474334!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:17:08'!
ERROR!

!testRun: #CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:17:08'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:17:08'!
ERROR!

!methodRemoval: Cart #initialize stamp: 'FF 6/4/2022 10:17:25'!
initialize 

	books := Bag new.!

!testRun: #CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:17:34'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50474113!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50474134!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24'!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:19:24'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32'!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:19:32'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50474384!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50474436!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:20:21'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:20:23'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:20:29'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:20:29'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50474409!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50474486!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:21:09'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:21:09'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47'!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:26:49'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58'!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50474537!
books
	^books! !

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:04'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:27:10'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:27:10'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53'!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/4/2022 10:30:01'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/4/2022 10:30:01'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50474276!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

----SNAPSHOT----(5 June 2022 16:30:07) CuisUniversity-5096.image priorSource: 4563593!

----STARTUP---- (6 June 2022 22:45:01) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!


TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/6/2022 22:47:46'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/6/2022 22:51:19'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04'!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 22:52:23'!
ERROR!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50474663!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 22:53:17'!
ERROR!
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31'!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50474676!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 22:53:54'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 22:53:54'!
PASSED!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/6/2022 22:55:23'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42'!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:55:56'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50474720!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:56:34'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/6/2022 22:56:42'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50474744!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:56:56'!
ERROR!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50474760!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:57:58'!
ERROR!
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06'!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50474777!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:58:18'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 22:58:18'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 22:58:18'!
PASSED!

!methodRemoval: Cashier #checkOut: stamp: 'FF 6/6/2022 22:59:10'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50474648!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50474802!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 23:00:40'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 23:00:44'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/6/2022 23:00:44'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/6/2022 23:00:44'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !

----SNAPSHOT----(6 June 2022 23:02:36) CuisUniversity-5096.image priorSource: 4575169!

----STARTUP---- (7 June 2022 16:50:50) as C:\Users\Flor\Documents\windows64\CuisUniversity-5096.image!

!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50474816!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:10:17'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29'!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50474886!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:10:56'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FF 6/7/2022 17:11:08'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08'!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50474909!
initializeUsing: aSalesList 
	salesList := aSalesList.! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:11:22'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:11:22'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:11:22'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/7/2022 17:11:22'!
ERROR!

!testRun: #CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/7/2022 17:11:22'!
ERROR!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:11:46'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50474698!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50474939!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:14:55'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/7/2022 17:16:44'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50474842!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50474986!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49'!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FF 6/7/2022 17:20:49'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:20:56'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50475025!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:21:54'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04'!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50475099!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:23:18'!
ERROR!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25'!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/7/2022 17:25:09'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/7/2022 17:25:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50475118!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50475139!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:25:24'!
ERROR!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58'!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:28:10'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:28:10'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:28:10'!
ERROR!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:28:10'!
ERROR!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50475157!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50475076!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50475191!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:33:27'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:33:27'!
PASSED!

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FF 6/7/2022 17:33:36'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50474866!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50474958!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50475263!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:40:58'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23'!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50475308!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:48:55'!
ERROR!

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FF 6/7/2022 17:49:33'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FF 6/7/2022 17:49:45'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50475284!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:50:14'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:50:23'!
ERROR!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:50:44'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:50:49'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:50:49'!
ERROR!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:51:56'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:51:56'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:52:04'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:52:04'!
ERROR!

Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FF 6/7/2022 17:52:55'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:53:36'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:53:36'!
ERROR!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:53:47'!
FAILURE!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50475181!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50475412!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50475423!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50475313!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:58:33'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:58:33'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:58:40'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:58:49'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:58:52'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50475211!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:59:47'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 17:59:47'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 17:59:47'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 17:59:47'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:06:43'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:06:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:06:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:07:04'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:07:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:07:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50475505 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50475246!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:08:21'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:10:23'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50475570 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50475584!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:10:31'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:10:31'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:10:31'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:10:31'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50475336!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:11:43'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:11:43'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:11:43'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:11:43'!
PASSED!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50475471!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:13:03'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:13:03'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:13:03'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:13:03'!
PASSED!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25'!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50475434!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22'!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:18:42'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:18:42'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:18:42'!
PASSED!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50475715!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51'!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:28:57'!
ERROR!
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13'!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50475771!
total
	^0.! !

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:29:21'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:29:21'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25'!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:34:37'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50474327!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50475817!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50474339!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FF 6/7/2022 18:36:03'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50475827!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50474614!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:36:15'!
ERROR!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:36:15'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50475845!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:37:05'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:37:05'!
ERROR!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:37:05'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:37:05'!
ERROR!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:37:05'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:37:05'!
ERROR!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:37:05'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:37:05'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:37:14'!
ERROR!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:37:14'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50474376!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:38:00'!
ERROR!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:38:00'!
ERROR!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:38:00'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:38:00'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50474499!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:38:45'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:38:46'!
ERROR!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:38:46'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:38:46'!
ERROR!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50474582!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50474369!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50474450!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:40:03'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50474527!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50475762!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:41:24'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:41:24'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50475802!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50476064!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:42:50'!
FAILURE!
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50475775!
total
	! !

----SNAPSHOT----(7 June 2022 18:43:47) CuisUniversity-5096.image priorSource: 4582696!
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50476088!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:49:56'!
ERROR!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:49:56'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:49:56'!
ERROR!
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50476094!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:50:12'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:50:28'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FF 6/7/2022 18:50:45'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FF 6/7/2022 18:50:56'!
ERROR!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50475612 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FF 6/7/2022 18:51:41'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50475654!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50475750!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50476192 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50475684!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50476246 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FF 6/7/2022 18:52:48'!
ERROR!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50475742!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50476232!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FF 6/7/2022 18:54:52'!
PASSED!

!testRun: #CashierTest #test01CannotCheckOutEmptyCart stamp: 'FF 6/7/2022 18:54:52'!
PASSED!

!testRun: #CashierTest #test02CannotCheckOutCartProvidingAnExpiredCreditCard stamp: 'FF 6/7/2022 18:54:52'!
PASSED!

!testRun: #CashierTest #test03CheckOutCartWithItemsAddElementToSalesList stamp: 'FF 6/7/2022 18:54:52'!
PASSED!

!testRun: #CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FF 6/7/2022 18:54:52'!
PASSED!

----SNAPSHOT----(7 June 2022 18:55:05) CuisUniversity-5096.image priorSource: 4622090!

----STARTUP---- (7 June 2022 20:20:27) as C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\CuisUniversity-5096.image!


----End fileIn of C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\TusLibros.st----!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:48'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:48'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:48'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15' prior: 50475562!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51' prior: 50475741!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50475925!
isEmpty
	^true.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00' prior: 50475568!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45' prior: 50475744!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:48'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50475939!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50475929!
isEmpty
	^books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58' prior: 50475775!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50475950!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07' prior: 50475770!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50475982!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:48'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50476007!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50475990!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50476036!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18' prior: 50475781!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50476063!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43' prior: 50475736!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50476077!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!methodRemoval: Cart #initialize stamp: 'FG 6/7/2022 20:21:48'!
initialize 

	books := Bag new.!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50475919!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50475932!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24' prior: 50475577!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/7/2022 20:21:48'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32' prior: 50475592!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FG 6/7/2022 20:21:48'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50476107!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50476161!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50476133!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50476189!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47' prior: 50475604!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58' prior: 50475755!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50476222!
books
	^books! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53' prior: 50475611!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50476025!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:48'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:48'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:48'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04' prior: 50475669!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50476283!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31' prior: 50475831!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50476294!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42' prior: 50475684!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50476329!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50476350!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50476363!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06' prior: 50475836!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50476377!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!methodRemoval: Cashier #checkOut: stamp: 'FG 6/7/2022 20:21:49'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50476270!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50476391!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50476405!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29' prior: 50475841!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50476456!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08' prior: 50475819!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50476477!
initializeUsing: aSalesList 
	salesList := aSalesList.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50476311!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50476488!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50476419!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50476529!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49' prior: 50475700!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FG 6/7/2022 20:21:49'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05' prior: 50475846!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50476570!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04' prior: 50475890!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50476640!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25' prior: 50475866!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50476656!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50476677!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58' prior: 50475810!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50476693!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50476619!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50476715!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FG 6/7/2022 20:21:49'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50476438!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50476508!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50476782!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23' prior: 50475873!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50476826!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FG 6/7/2022 20:21:49'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FG 6/7/2022 20:21:49'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50476804!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50476704!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50476887!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50476898!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50476831!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50476735!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' prior: 50475654 overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50476950 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50476764!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50477015 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50477029!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50476850!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50476929!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25' prior: 50475796!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50476909!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22' prior: 50475802!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50477119!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33' prior: 50475712!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51' prior: 50475622!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13' prior: 50475758!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50477166!
total
	^0.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25' prior: 50475628!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50476072!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50477185!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50476083!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:49'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50477195!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50476239!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50477213!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50476098!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50476202!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50476229!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50476091!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50476175!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50476215!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50477159!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50477173!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50477306!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50477170!
total
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50477327!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50477330!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50477054 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:21:50'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50477083!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50477146!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50477341 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50477100!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50477396 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50477137!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50477382!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:24:42'!
assertQuantityIsPositive: quantityOfBookToBeAdded 
	(quantityOfBookToBeAdded <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:25:00' prior: 50477224!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FG 6/7/2022 20:25:04'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FG 6/7/2022 20:25:04'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/7/2022 20:25:04'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FG 6/7/2022 20:25:04'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FG 6/7/2022 20:25:04'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FG 6/7/2022 20:25:04'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FG 6/7/2022 20:25:04'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FG 6/7/2022 20:25:04'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:25:52'!
assertProductExistOnPriceList: aProductToBeAdded 
	(priceList includesKey: aProductToBeAdded) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:26:05' prior: 50477469!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	self assertProductExistOnPriceList: aBook.
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:27:57' overrides: 16961394!
setUp! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:28:39'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:28:50'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:28:47' prior: 50477519 overrides: 16961394!
setUp

	priceList := Dictionary new.
	priceList at: book1 put: 10 .! !
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:29:14' prior: 50477537 overrides: 16961394!
setUp

	book1 := 'libro 1'.
	
	priceList := Dictionary new.
	priceList at: book1 put: 10 .! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:29:38' prior: 50477269!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: priceList .
	
	self assert: cart isEmpty.
	! !

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FG 6/7/2022 20:29:39'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FG 6/7/2022 20:29:39'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FG 6/7/2022 20:29:39'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/7/2022 20:29:39'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FG 6/7/2022 20:29:39'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FG 6/7/2022 20:29:39'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FG 6/7/2022 20:29:39'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FG 6/7/2022 20:29:39'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FG 6/7/2022 20:29:39'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:25' prior: 50477235!
test02EmptyCartAfterAddingABookIsNotEmpty

	|  cart |
	cart := Cart with: priceList.
	
	cart add: 1 of: book1 .
	
	self deny: cart isEmpty.! !

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FG 6/7/2022 20:30:26'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FG 6/7/2022 20:30:26'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FG 6/7/2022 20:30:26'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/7/2022 20:30:26'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FG 6/7/2022 20:30:26'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FG 6/7/2022 20:30:26'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FG 6/7/2022 20:30:26'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FG 6/7/2022 20:30:26'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FG 6/7/2022 20:30:26'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:48' prior: 50477276!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| cart |
	cart := Cart with: priceList.
	
	self should: [cart add: -1 of: book1.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/7/2022 20:30:52'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FG 6/7/2022 20:30:52'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FG 6/7/2022 20:30:52'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/7/2022 20:30:52'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FG 6/7/2022 20:30:52'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FG 6/7/2022 20:30:52'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FG 6/7/2022 20:30:52'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FG 6/7/2022 20:30:52'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FG 6/7/2022 20:30:52'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:22' prior: 50477245!
test04CannotAddAnUncataloguedBook

	| book cart |	
	book := 'uncatolog book'.
	cart := Cart with: priceList .
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FG 6/7/2022 20:31:23'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FG 6/7/2022 20:31:23'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FG 6/7/2022 20:31:23'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/7/2022 20:31:23'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FG 6/7/2022 20:31:23'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FG 6/7/2022 20:31:23'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FG 6/7/2022 20:31:23'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FG 6/7/2022 20:31:23'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FG 6/7/2022 20:31:23'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:33' prior: 50477292!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: priceList .
	
	self assert: cart books isEmpty.! !

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FG 6/7/2022 20:31:35'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FG 6/7/2022 20:31:35'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FG 6/7/2022 20:31:35'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/7/2022 20:31:35'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FG 6/7/2022 20:31:35'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FG 6/7/2022 20:31:35'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FG 6/7/2022 20:31:35'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FG 6/7/2022 20:31:35'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FG 6/7/2022 20:31:35'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:54' prior: 50477258!
test06CartBookListIncludesBookAfterAdding

	| cart  |
	cart := Cart with: priceList.
	cart add: 2 of: book1 .
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book1).! !

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FG 6/7/2022 20:32:00'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FG 6/7/2022 20:32:00'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FG 6/7/2022 20:32:00'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/7/2022 20:32:00'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FG 6/7/2022 20:32:00'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FG 6/7/2022 20:32:00'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FG 6/7/2022 20:32:00'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FG 6/7/2022 20:32:00'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FG 6/7/2022 20:32:00'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:09' prior: 50477299!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: priceList .
	
	self assert: 0 equals: cart total.! !

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FG 6/7/2022 20:32:10'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FG 6/7/2022 20:32:10'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FG 6/7/2022 20:32:10'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/7/2022 20:32:10'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FG 6/7/2022 20:32:10'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FG 6/7/2022 20:32:10'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FG 6/7/2022 20:32:10'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FG 6/7/2022 20:32:10'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FG 6/7/2022 20:32:10'!
PASSED!
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:26' prior: 50477317!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart |

	cart := Cart with: priceList.
	cart add: 2 of: book1.
	
	self assert: 20 equals: cart total.! !

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FG 6/7/2022 20:32:28'!
PASSED!

!testRun: #CartTest #test01CartIsEmptyWhenCreated stamp: 'FG 6/7/2022 20:32:28'!
PASSED!

!testRun: #CartTest #test02EmptyCartAfterAddingABookIsNotEmpty stamp: 'FG 6/7/2022 20:32:28'!
PASSED!

!testRun: #CartTest #test03CannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/7/2022 20:32:28'!
PASSED!

!testRun: #CartTest #test04CannotAddAnUncataloguedBook stamp: 'FG 6/7/2022 20:32:28'!
PASSED!

!testRun: #CartTest #test05CartReturnsEmptyBookListWhenCreated stamp: 'FG 6/7/2022 20:32:28'!
PASSED!

!testRun: #CartTest #test06CartBookListIncludesBookAfterAdding stamp: 'FG 6/7/2022 20:32:28'!
PASSED!

!testRun: #CartTest #test07EmptyCartTotalIsZero stamp: 'FG 6/7/2022 20:32:28'!
PASSED!

!testRun: #CartTest #test08CartWithItemsTotalIsTheSumOfItemPrices stamp: 'FG 6/7/2022 20:32:28'!
PASSED!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:35:59'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FG 6/7/2022 20:39:38'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:39:34'!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today Month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:40:01' overrides: 16961394!
setUp

	today := Date today.! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:40:08' prior: 50477862!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:40:11'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:41:56' prior: 50476685!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number size < 16 ifTrue: [self error: self class invalidCreditCardNumber].
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:41:57'!
ERROR!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:41:57'!
ERROR!
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 20:42:15'!
invalidCreditCardNumber
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 20:42:41' prior: 50477913!
invalidCreditCardNumber
	
	^'The credit card number is invalid. The number should be 16 digits'! !

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:42:42'!
ERROR!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:42:50'!
ERROR!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:42:50'!
ERROR!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:43:06' prior: 50477879!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:43:22' prior: 50477935!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:43:38'!
FAILURE!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:44:37'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:49:57' prior: 50477896!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	(number size < 16) ifTrue: [^self error: self class invalidCreditCardNumber].
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:50:01'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:50:52' prior: 50477968!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:51:11' prior: 50476649!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:51:14' prior: 50477990!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:51:21'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:51:21'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:52:40'!
test01CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FG 6/7/2022 20:52:42'!
FAILURE!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:53:00'!
test02CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !

!methodRemoval: CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FG 6/7/2022 20:53:00'!
test01CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]!
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:56:08' prior: 50478000!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FG 6/7/2022 20:56:14'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 20:56:14'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FG 6/7/2022 20:56:14'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:57:31'!
test03CardCannotBeCreatedWithValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '']
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !

!testRun: #CreditCardTest #test03CardCannotBeCreatedWithValidToIsNotAMonth stamp: 'FG 6/7/2022 20:57:34'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:59:43' prior: 50478062!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 21:00:18'!
invalidExpirationDate
	
	^'The credit card expiration date is invalid. Ypu have to provide a Month of the Year'! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 21:00:20' prior: 50478120!
invalidExpirationDate
	
	^'The credit card expiration date is invalid. You have to provide a Month of the Year'! !

!testRun: #CreditCardTest #test03CardCannotBeCreatedWithValidToIsNotAMonth stamp: 'FG 6/7/2022 21:00:32'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 21:00:32'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FG 6/7/2022 21:00:32'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWithValidToIsNotAMonth stamp: 'FG 6/7/2022 21:00:32'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:01:26'!
test04ValidCreditCardCanBeCreated
	|card|

	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: card isNil.
		! !

!testRun: #CreditCardTest #test04ValidCreditCardCanBeCreated stamp: 'FG 6/7/2022 21:01:28'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 21:01:28'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FG 6/7/2022 21:01:28'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWithValidToIsNotAMonth stamp: 'FG 6/7/2022 21:01:28'!
PASSED!

!testRun: #CreditCardTest #test04ValidCreditCardCanBeCreated stamp: 'FG 6/7/2022 21:01:28'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:02:43'!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	
		! !

!methodRemoval: CreditCardTest #test04ValidCreditCardCanBeCreated stamp: 'FG 6/7/2022 21:02:58'!
test04ValidCreditCardCanBeCreated
	|card|

	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: card isNil.
		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:03:44' prior: 50478172!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		! !

!testRun: #CreditCardTest #test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired stamp: 'FG 6/7/2022 21:03:47'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 21:03:47'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FG 6/7/2022 21:03:47'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWithValidToIsNotAMonth stamp: 'FG 6/7/2022 21:03:47'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired stamp: 'FG 6/7/2022 21:03:47'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:20'!
test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		! !

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FG 6/7/2022 21:04:21'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 21:04:21'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FG 6/7/2022 21:04:21'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWithValidToIsNotAMonth stamp: 'FG 6/7/2022 21:04:21'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FG 6/7/2022 21:04:21'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired stamp: 'FG 6/7/2022 21:04:21'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:33'!
test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired stamp: 'FG 6/7/2022 21:04:33'!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:40'!
test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FG 6/7/2022 21:04:40'!
test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:05:40'!
test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		! !

!testRun: #CreditCardTest #test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FG 6/7/2022 21:05:42'!
PASSED!

!testRun: #CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberLenght stamp: 'FG 6/7/2022 21:05:42'!
PASSED!

!testRun: #CreditCardTest #test02CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FG 6/7/2022 21:05:42'!
PASSED!

!testRun: #CreditCardTest #test03CardCannotBeCreatedWithValidToIsNotAMonth stamp: 'FG 6/7/2022 21:05:42'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired stamp: 'FG 6/7/2022 21:05:42'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FG 6/7/2022 21:05:42'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FG 6/7/2022 21:05:42'!
PASSED!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:06:10'!
test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FG 6/7/2022 21:06:10'!
test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 21:07:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50477365!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50477449!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50477424 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50477411!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/7/2022 21:07:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50478378 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50478364!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50478394!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:08:09'!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!methodRemoval: CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FG 6/7/2022 21:08:09'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.!

----SNAPSHOT----(7 June 2022 22:46:03) CuisUniversity-5096.image priorSource: 4557982!

----STARTUP---- (11 June 2022 10:12:53) as C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\CuisUniversity-5096.image!


!classRemoval: #CreditCard stamp: 'FG 6/11/2022 10:13:03'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'FG 6/11/2022 10:13:03'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FG 6/11/2022 10:13:04'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'FG 6/11/2022 10:13:04'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FG 6/11/2022 10:13:04'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FG 6/11/2022 10:13:04'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Fabian\source\repos\IngenieriaI\08-TusLibros\TusLibrosfacu.st----!

----STARTUP---- (11 June 2022 20:39:36) as C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\CuisUniversity-5096.image!


!classRemoval: #CreditCard stamp: 'FG 6/11/2022 20:39:39'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'FG 6/11/2022 20:39:39'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FG 6/11/2022 20:39:39'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'FG 6/11/2022 20:39:39'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FG 6/11/2022 20:39:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FG 6/11/2022 20:39:40'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:40'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:40'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:29:38'!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: priceList .
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:25'!
test02EmptyCartAfterAddingABookIsNotEmpty

	|  cart |
	cart := Cart with: priceList.
	
	cart add: 1 of: book1 .
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:48'!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| cart |
	cart := Cart with: priceList.
	
	self should: [cart add: -1 of: book1.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:22'!
test04CannotAddAnUncataloguedBook

	| book cart |	
	book := 'uncatolog book'.
	cart := Cart with: priceList .
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:33'!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: priceList .
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:54'!
test06CartBookListIncludesBookAfterAdding

	| cart  |
	cart := Cart with: priceList.
	cart add: 2 of: book1 .
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book1).! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:09'!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: priceList .
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:26'!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart |

	cart := Cart with: priceList.
	cart add: 2 of: book1.
	
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:29:14' overrides: 16961394!
setUp

	book1 := 'libro 1'.
	
	priceList := Dictionary new.
	priceList at: book1 put: 10 .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:45:52'!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: priceList .
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:42:17'!
test02CannotCheckOutCartProvidingAnExpiredCreditCard
	| cart cashier |
	
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:47:13'!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
		self assert: 1 equals: merchantProcessor answeredCalls.
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:43:38'!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.
	self assert: 1 equals: merchantProcessor answeredCalls.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:47:24'!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateStolenCreditCard.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithStolenCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 1 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:47:34'!
test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateCreditCardWithoutEnoughLimit.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithCreditCardWithoutEnoughLimit equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 1 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'setUp' stamp: 'FF 6/8/2022 18:05:38' overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	merchantProcessor := MerchantProcessorSimulator new.! !

!classDefinition: #ClientInterfaceTest category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:40'!
TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'clientId password authenticatorServiceSimulator clientInterface invalidCartId validBookISBN priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterfaceTest category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:40'!
TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'clientId password authenticatorServiceSimulator clientInterface invalidCartId validBookISBN priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterfaceTest methodsFor: 'setUp' stamp: 'FG 6/9/2022 21:20:33' overrides: 16961394!
setUp

	clientId := 'invalidClientId'.
	password := 'invalidPassword'.
	invalidCartId := -5.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.

	authenticatorServiceSimulator := AuthenticatorServiceSimulator new.
	clientInterface := ClientInterface priceLIst: priceList authenticator: authenticatorServiceSimulator.! !
!ClientInterfaceTest methodsFor: 'test' stamp: 'FG 6/9/2022 20:54:55'!
test01ValidClientCanCreateACart

	| cartId listCart |
	
	
	cartId := clientInterface createCartFor: clientId sigInWith: password.
	
	listCart := clientInterface listCart: cartId.
	
	self assert: listCart notNil.
	 ! !
!ClientInterfaceTest methodsFor: 'test' stamp: 'FG 6/9/2022 20:55:09'!
test02InvalidClientCanNotCreateACart

	| cartId  |
	authenticatorServiceSimulator simulateInvalidClient.
		
	self should: [ cartId := clientInterface createCartFor: clientId sigInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: ClientInterface clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].
	 ! !
!ClientInterfaceTest methodsFor: 'test' stamp: 'FG 6/9/2022 20:55:18'!
test03ListCartOfEmptyCartIsEmpty

	|  cartId  listCart |
	
	cartId := clientInterface createCartFor: clientId sigInWith: password.
	
	listCart := clientInterface listCart: cartId.
	
	self assert: listCart isEmpty.! !
!ClientInterfaceTest methodsFor: 'test' stamp: 'FG 6/9/2022 20:56:52'!
test04ListCartOfCartThatNotExistsThrowsError

	| listCart  |
	
	self should: [ listCart := clientInterface listCart: invalidCartId. ]
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: ClientInterface cartDoesNotExists equals: anError messageText.
		self assert: listCart isNil.
	]
	
	! !
!ClientInterfaceTest methodsFor: 'test' stamp: 'FG 6/9/2022 21:24:55'!
test05ListCartOfCartWithItemsShowTheISBNAndQuantity

	|  cartId  listCart  quantity|
	quantity := 1.
	
	cartId := clientInterface createCartFor: clientId sigInWith: password.
	
	clientInterface addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := clientInterface listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: validBookISBN equals: (listCart at: 1) book.
	self assert: quantity equals: (listCart at: 1) quantity.! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:40'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:40'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:40:01' overrides: 16961394!
setUp

	today := Date today.! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:43:22'!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:53:00'!
test02CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/8/2022 17:40:16'!
test03CardCannotBeCreatedWhenValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '']
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:33'!
test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:40'!
test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:06:10'!
test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		! !

!classDefinition: #AuthenticatorServiceSimulator category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #AuthenticatorServiceSimulator
	instanceVariableNames: 'actionToSimulate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AuthenticatorServiceSimulator category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #AuthenticatorServiceSimulator
	instanceVariableNames: 'actionToSimulate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AuthenticatorServiceSimulator methodsFor: 'simulation' stamp: 'FG 6/9/2022 20:20:55'!
authenticate: aClientId signInWith: aPassword 
	
	actionToSimulate value.! !
!AuthenticatorServiceSimulator methodsFor: 'simulation' stamp: 'FG 6/9/2022 20:20:34'!
simulateInvalidClient

	actionToSimulate := [self error: ClientInterface clientIsNotValid ].
! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:36:03'!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15'!
isEmpty
	^books isEmpty.! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:26:05'!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	self assertProductExistOnPriceList: aBook.
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:25:52'!
assertProductExistOnPriceList: aProductToBeAdded 
	(priceList includesKey: aProductToBeAdded) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:24:42'!
assertQuantityIsPositive: quantityOfBookToBeAdded 
	(quantityOfBookToBeAdded <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03'!
books
	^books! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11'!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !

!classDefinition: 'Cart class' category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Cart class
	instanceVariableNames: ''!

!classDefinition: 'Cart class' category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Cart class
	instanceVariableNames: ''!
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07'!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58'!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32'!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25'!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22'!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/8/2022 18:20:54'!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale

	| totalToDebit |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	
	totalToDebit := aCart total.
	merchantProcessor debit: totalToDebit from: aCreditCard .
	
	salesList add: aCart.
	
	^totalToDebit.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/8/2022 18:02:09'!
using: aSalesList debitProcessor: aMerchantProcessor
	salesList := aSalesList .
	merchantProcessor := aMerchantProcessor.! !

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Cashier class
	instanceVariableNames: ''!

!classDefinition: 'Cashier class' category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Cashier class
	instanceVariableNames: ''!
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52'!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17'!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54'!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/8/2022 18:01:18'!
using: aSalesList debitProcessor: aMerchantProcessor
	^self new using: aSalesList debitProcessor: aMerchantProcessor ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #ClientInterface
	instanceVariableNames: 'authenticatorService athenticatorService carts priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ClientInterface category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #ClientInterface
	instanceVariableNames: 'authenticatorService athenticatorService carts priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ClientInterface methodsFor: 'cart' stamp: 'FG 6/9/2022 21:05:42'!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd 
	|cartFound|
	
	cartFound := carts at: aCartId.
	cartFound add: aQuantityToAdd of: aBookISBN.! !
!ClientInterface methodsFor: 'cart' stamp: 'FG 6/9/2022 21:23:02'!
createCartFor: aClientId sigInWith: aPassword 

	| newCart newCartId|
	authenticatorService authenticate: aClientId signInWith: aPassword.
	
	newCartId := (Random new) nextInteger: 5000.
	newCart := Cart with: priceList .
	
	carts at: newCartId put: newCart.
	
	^newCartId.! !
!ClientInterface methodsFor: 'cart' stamp: 'FG 6/9/2022 21:25:49'!
listCart: idOfACart

	carts at: idOfACart ifAbsent: [self error: self class cartDoesNotExists ].
	
	^OrderedCollection new.
! !
!ClientInterface methodsFor: 'initialization' stamp: 'FG 6/9/2022 21:21:36'!
priceLIst: aPriceList authenticator: anAuthenticatorService
	
	priceList := aPriceList.
	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.! !

!classDefinition: 'ClientInterface class' category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
ClientInterface class
	instanceVariableNames: ''!

!classDefinition: 'ClientInterface class' category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
ClientInterface class
	instanceVariableNames: ''!
!ClientInterface class methodsFor: 'instance creation' stamp: 'FG 6/9/2022 21:22:11'!
priceLIst: aPriceList authenticator: anAuthenticatorService.
	^self new priceLIst: aPriceList authenticator: anAuthenticatorService.! !
!ClientInterface class methodsFor: 'error messages' stamp: 'FG 6/9/2022 20:44:49'!
cartDoesNotExists
	
	^'The cartId provided is not valid'! !
!ClientInterface class methodsFor: 'error messages' stamp: 'FG 6/9/2022 20:17:32'!
clientIsNotValid
	
	^'The client is not valid. Check the provided password and clientId'! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:50:52'!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31'!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!classDefinition: 'CreditCard class' category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
CreditCard class
	instanceVariableNames: ''!

!classDefinition: 'CreditCard class' category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
CreditCard class
	instanceVariableNames: ''!
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:59:43'!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 20:42:41'!
invalidCreditCardNumber
	
	^'The credit card number is invalid. The number should be 16 digits'! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 21:00:20'!
invalidExpirationDate
	
	^'The credit card expiration date is invalid. You have to provide a Month of the Year'! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'actionToSimulate answeredCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'actionToSimulate answeredCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'simulation' stamp: 'FF 6/8/2022 18:35:08'!
simulateCreditCardWithoutEnoughLimit
	actionToSimulate := [self error: self class cannotPayWithCreditCardWithoutEnoughLimit].! !
!MerchantProcessorSimulator methodsFor: 'simulation' stamp: 'FF 6/8/2022 18:17:25'!
simulateStolenCreditCard
	actionToSimulate := [self error: self class cannotPayWithStolenCreditCard].! !
!MerchantProcessorSimulator methodsFor: 'action' stamp: 'FF 6/8/2022 18:45:00'!
debit: anAmount from: aCreditCard 
	answeredCalls := answeredCalls + 1.
	actionToSimulate value.! !
!MerchantProcessorSimulator methodsFor: 'testing' stamp: 'FF 6/8/2022 18:44:17'!
answeredCalls
	^answeredCalls.! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'FF 6/8/2022 18:46:35' overrides: 16920235!
initialize
	answeredCalls := 0.! !

!classDefinition: 'MerchantProcessorSimulator class' category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
MerchantProcessorSimulator class
	instanceVariableNames: ''!

!classDefinition: 'MerchantProcessorSimulator class' category: 'TusLibros' stamp: 'FG 6/11/2022 20:39:41'!
MerchantProcessorSimulator class
	instanceVariableNames: ''!
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'FF 6/8/2022 18:36:48'!
cannotPayWithCreditCardWithoutEnoughLimit
	^'The credit card limit is not enough'.! !
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'FF 6/8/2022 18:24:07'!
cannotPayWithStolenCreditCard
	^'The credit card has been notified as stolen'.! !

!classRemoval: #MerchantProcessorSimulator stamp: 'FG 6/12/2022 09:49:28'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'actionToSimulate answeredCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'FG 6/12/2022 09:49:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ClientInterface stamp: 'FG 6/12/2022 09:49:29'!
Object subclass: #ClientInterface
	instanceVariableNames: 'authenticatorService athenticatorService carts priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'FG 6/12/2022 09:49:29'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FG 6/12/2022 09:49:30'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #AuthenticatorServiceSimulator stamp: 'FG 6/12/2022 09:49:30'!
Object subclass: #AuthenticatorServiceSimulator
	instanceVariableNames: 'actionToSimulate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'FG 6/12/2022 09:49:31'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ClientInterfaceTest stamp: 'FG 6/12/2022 09:49:33'!
TestCase subclass: #ClientInterfaceTest
	instanceVariableNames: 'clientId password authenticatorServiceSimulator clientInterface invalidCartId validBookISBN priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FG 6/12/2022 09:49:33'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FG 6/12/2022 09:49:34'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Fabian\source\repos\IngenieriaI\08-TusLibros\Iteracion3\TusLibros.st----!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:28'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:28'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:28'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15' prior: 50480265!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51' prior: 50480833!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50481263!
isEmpty
	^true.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00' prior: 50480271!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45' prior: 50480836!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:28'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50481277!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50481267!
isEmpty
	^books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58' prior: 50480877!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50481288!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07' prior: 50480872!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50481320!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:28'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50481344!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50481327!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50481373!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18' prior: 50480883!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50481399!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43' prior: 50480828!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50481413!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!methodRemoval: Cart #initialize stamp: 'FG 6/12/2022 09:50:28'!
initialize 

	books := Bag new.!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50481257!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50481270!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24' prior: 50480278!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/12/2022 09:50:28'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32' prior: 50480291!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FG 6/12/2022 09:50:28'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50481442!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50481495!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50481468!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50481523!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47' prior: 50480304!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58' prior: 50480857!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50481556!
books
	^books! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53' prior: 50480310!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50481362!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:28'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:28'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:28'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04' prior: 50480355!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50481615!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31' prior: 50480942!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50481626!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:28'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42' prior: 50480372!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50481661!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:28'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50481682!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50481695!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06' prior: 50480947!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50481709!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!methodRemoval: Cashier #checkOut: stamp: 'FG 6/12/2022 09:50:28'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50481603!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50481723!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50481737!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29' prior: 50480952!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50481785!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:29'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08'!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50481805!
initializeUsing: aSalesList 
	salesList := aSalesList.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50481643!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50481816!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50481750!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50481856!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49' prior: 50480391!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FG 6/12/2022 09:50:29'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05' prior: 50480964!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50481896!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04'!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50481964!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25'!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:29'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:29'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50481980!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50482001!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58' prior: 50480914!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50482016!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50481944!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50482037!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FG 6/12/2022 09:50:29'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50481768!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50481835!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50482102!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23' prior: 50480993!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50482144!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FG 6/12/2022 09:50:29'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FG 6/12/2022 09:50:29'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50482123!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:29'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:29'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50482027!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50482205!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50482216!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50482149!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50482057!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' prior: 50480465 overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:29'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:30'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:30'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50482268 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50482085!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:30'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50482333 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50482347!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50482168!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50482247!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25' prior: 50480900!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50482227!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22' prior: 50480906!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50482436!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51' prior: 50480319!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13' prior: 50480860!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50482482!
total
	^0.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25' prior: 50480325!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50481408!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50482501!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50481418!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:30'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50482511!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50481572!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50482529!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50481433!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50481536!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50481563!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50481426!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50481509!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50481549!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50482475!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50482489!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50482619!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50482486!
total
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50482640!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50482643!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50482372 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:30'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50482401!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50482462!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50482654 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50482418!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50482708 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50482454!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50482694!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!classRemoval: #CreditCard stamp: 'FG 6/12/2022 09:50:31'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'FG 6/12/2022 09:50:31'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FG 6/12/2022 09:50:32'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FG 6/12/2022 09:50:32'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FG 6/12/2022 09:50:33'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:33'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:33'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:33'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15'!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50482828!
isEmpty
	^true.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00'!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45'!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:33'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50482842!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50482832!
isEmpty
	^books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58'!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50482853!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07'!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50482885!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:33'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50482910!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50482893!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50482939!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50482966!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43'!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50482979!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!methodRemoval: Cart #initialize stamp: 'FG 6/12/2022 09:50:33'!
initialize 

	books := Bag new.!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50482823!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50482835!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24'!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/12/2022 09:50:33'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32'!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FG 6/12/2022 09:50:33'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50483009!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50483063!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50483035!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50483091!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47'!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58'!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50483123!
books
	^books! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53'!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50482928!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:33'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:33'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:33'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04'!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50483184!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31'!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50483194!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:33'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42'!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50483228!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:34'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50483249!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50483262!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06'!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50483275!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!methodRemoval: Cashier #checkOut: stamp: 'FG 6/12/2022 09:50:34'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50483171!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50483289!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50483303!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29'!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50483353!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:34'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08'!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50483373!
initializeUsing: aSalesList 
	salesList := aSalesList.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50483210!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50483384!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50483317!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50483425!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49'!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FG 6/12/2022 09:50:34'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50483466!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04'!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50483534!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25'!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:34'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:34'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50483550!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50483571!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58'!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50483586!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50483514!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50483608!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FG 6/12/2022 09:50:34'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50483336!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50483404!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50483675!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23'!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50483718!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FG 6/12/2022 09:50:34'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FG 6/12/2022 09:50:34'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50483697!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:34'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:34'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50483597!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50483779!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50483790!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50483723!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50483628!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:35'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:35'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:35'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:35'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:35'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:35'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50483842 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50483657!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:35'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50483907 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50483921!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50483742!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50483821!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25'!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50483801!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22'!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50484011!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51'!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13'!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50484056!
total
	^0.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25'!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50482975!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50484075!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50482985!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:35'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50484085!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50483140!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50484103!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50483000!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50483104!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50483130!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50482993!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50483077!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50483116!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50484049!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50484063!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50484196!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50484060!
total
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50484217!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50484220!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50483946 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50483975!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50484036!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50484231 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50483992!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50484286 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50484028!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50484272!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:36'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:36'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:36'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15' prior: 50484159!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51' prior: 50482863!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50484378!
isEmpty
	^true.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00' prior: 50484125!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45' prior: 50484114!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:36'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50484392!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50484382!
isEmpty
	^books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58' prior: 50482879!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50484403!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07' prior: 50482905!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50484435!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:36'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50484460!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50484443!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50484489!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18' prior: 50484080!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50484516!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43' prior: 50484097!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50484530!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!methodRemoval: Cart #initialize stamp: 'FG 6/12/2022 09:50:36'!
initialize 

	books := Bag new.!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50484372!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50484385!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24' prior: 50484166!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/12/2022 09:50:36'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32' prior: 50484135!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FG 6/12/2022 09:50:36'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50484560!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50484614!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50484586!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50484642!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47' prior: 50484182!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58' prior: 50483127!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50484675!
books
	^books! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53' prior: 50484148!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50484478!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:36'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:37'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04' prior: 50483960!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50484736!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31' prior: 50483199!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50484747!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:37'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42' prior: 50484255!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50484782!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:37'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50484803!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50484816!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06' prior: 50483280!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50484830!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!methodRemoval: Cashier #checkOut: stamp: 'FG 6/12/2022 09:50:37'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50484723!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50484844!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50484858!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29' prior: 50483362!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50484909!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:37'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08' prior: 50483379!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50484930!
initializeUsing: aSalesList 
	salesList := aSalesList.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50484764!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50484941!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50484872!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50484982!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49' prior: 50484301!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FG 6/12/2022 09:50:37'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05' prior: 50483506!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50485023!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04' prior: 50483543!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50485093!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25' prior: 50483579!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:37'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:37'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50485109!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50485130!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58' prior: 50484330!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50485146!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50485072!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50485168!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FG 6/12/2022 09:50:37'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50484891!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50484961!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50485235!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23' prior: 50483812!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50485279!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FG 6/12/2022 09:50:37'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FG 6/12/2022 09:50:37'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50485257!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:37'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:37'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50485157!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50485340!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50485351!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50485284!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50485188!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' prior: 50484314 overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50485403 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50485217!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50485468 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50485482!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50485303!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50485382!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25' prior: 50484004!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50485362!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22' prior: 50484019!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50485572!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33' prior: 50484339!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51' prior: 50484189!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13' prior: 50484225!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50485619!
total
	^0.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25' prior: 50484207!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50484525!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50485638!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50484536!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:38'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50485648!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50484692!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50485666!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50484551!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50484655!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50484682!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50484544!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50484628!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50484668!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50485612!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50485626!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50485759!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50485623!
total
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50485780!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50485783!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50485507 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:38'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50485536!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50485599!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50485794 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50485553!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50485849 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50485590!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50485835!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:24:42'!
assertQuantityIsPositive: quantityOfBookToBeAdded 
	(quantityOfBookToBeAdded <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:25:00' prior: 50485677!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:25:52'!
assertProductExistOnPriceList: aProductToBeAdded 
	(priceList includesKey: aProductToBeAdded) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:26:05' prior: 50485922!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	self assertProductExistOnPriceList: aBook.
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:27:57' overrides: 16961394!
setUp! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:39'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:39'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:28:47' prior: 50485947 overrides: 16961394!
setUp

	priceList := Dictionary new.
	priceList at: book1 put: 10 .! !
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:29:14' prior: 50485965 overrides: 16961394!
setUp

	book1 := 'libro 1'.
	
	priceList := Dictionary new.
	priceList at: book1 put: 10 .! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:29:38' prior: 50485722!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: priceList .
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:25' prior: 50485688!
test02EmptyCartAfterAddingABookIsNotEmpty

	|  cart |
	cart := Cart with: priceList.
	
	cart add: 1 of: book1 .
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:48' prior: 50485729!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| cart |
	cart := Cart with: priceList.
	
	self should: [cart add: -1 of: book1.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:22' prior: 50485698!
test04CannotAddAnUncataloguedBook

	| book cart |	
	book := 'uncatolog book'.
	cart := Cart with: priceList .
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:33' prior: 50485745!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: priceList .
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:54' prior: 50485711!
test06CartBookListIncludesBookAfterAdding

	| cart  |
	cart := Cart with: priceList.
	cart add: 2 of: book1 .
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book1).! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:09' prior: 50485752!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: priceList .
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:26' prior: 50485770!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart |

	cart := Cart with: priceList.
	cart add: 2 of: book1.
	
	self assert: 20 equals: cart total.! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:39'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:39'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:39'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:39:34' prior: 50480500!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today Month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:40:01' prior: 50480496 overrides: 16961394!
setUp

	today := Date today.! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:40:08' prior: 50486068!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:41:56' prior: 50485138!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number size < 16 ifTrue: [self error: self class invalidCreditCardNumber].
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 20:42:15'!
invalidCreditCardNumber
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 20:42:41' prior: 50486108!
invalidCreditCardNumber
	
	^'The credit card number is invalid. The number should be 16 digits'! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:43:06' prior: 50486085!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:43:22' prior: 50486119!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:49:57' prior: 50486098!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	(number size < 16) ifTrue: [^self error: self class invalidCreditCardNumber].
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:50:52' prior: 50486145!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:51:11' prior: 50485102!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:51:14' prior: 50486163!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:52:40'!
test01CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:53:00' prior: 50480513!
test02CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !

!methodRemoval: CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FG 6/12/2022 09:50:39'!
test01CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]!
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:56:08' prior: 50486173!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:57:31'!
test03CardCannotBeCreatedWithValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '']
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:59:43' prior: 50486223!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 21:00:18'!
invalidExpirationDate
	
	^'The credit card expiration date is invalid. Ypu have to provide a Month of the Year'! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 21:00:20' prior: 50486266!
invalidExpirationDate
	
	^'The credit card expiration date is invalid. You have to provide a Month of the Year'! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:01:26'!
test04ValidCreditCardCanBeCreated
	|card|

	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: card isNil.
		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:02:43'!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	
		! !

!methodRemoval: CreditCardTest #test04ValidCreditCardCanBeCreated stamp: 'FG 6/12/2022 09:50:39'!
test04ValidCreditCardCanBeCreated
	|card|

	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: card isNil.
		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:03:44' prior: 50486286!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:20'!
test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:33' prior: 50480539!
test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired stamp: 'FG 6/12/2022 09:50:39'!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:40' prior: 50480548!
test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FG 6/12/2022 09:50:39'!
test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:05:40'!
test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:06:10' prior: 50480557!
test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FG 6/12/2022 09:50:39'!
test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:39'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50485818!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50485902!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50485877 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50485864!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50486424 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50486410!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50486440!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:08:09'!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!methodRemoval: CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FG 6/12/2022 09:50:40'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:40'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:40'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:40'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15' prior: 50485977!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51' prior: 50484413!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50486556!
isEmpty
	^true.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00' prior: 50485983!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45' prior: 50485939!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:40'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50486570!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50486560!
isEmpty
	^books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58' prior: 50484429!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50486581!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07' prior: 50484455!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50486613!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:40'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50486638!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50486621!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50486667!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18' prior: 50485643!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50486694!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43' prior: 50485660!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50486708!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!methodRemoval: Cart #initialize stamp: 'FG 6/12/2022 09:50:40'!
initialize 

	books := Bag new.!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50486550!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50486563!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24' prior: 50485991!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/12/2022 09:50:40'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32' prior: 50486004!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FG 6/12/2022 09:50:40'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50486738!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50486792!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50486764!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50486820!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47' prior: 50486017!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58' prior: 50484679!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50486853!
books
	^books! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53' prior: 50486024!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50486656!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:40'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:40'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04' prior: 50485521!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50486914!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31' prior: 50484752!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50486925!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:41'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42' prior: 50486393!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50486960!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:41'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50486981!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50486994!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06' prior: 50484835!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50487008!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!methodRemoval: Cashier #checkOut: stamp: 'FG 6/12/2022 09:50:41'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50486901!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50487022!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50487036!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29' prior: 50484918!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50487087!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:41'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08' prior: 50484936!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50487108!
initializeUsing: aSalesList 
	salesList := aSalesList.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50486942!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50487119!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50487050!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50487160!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49' prior: 50486492!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FG 6/12/2022 09:50:41'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05' prior: 50485064!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50487201!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04' prior: 50486249!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50487271!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25' prior: 50486155!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:41'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:41'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50487287!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50487308!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58' prior: 50485893!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50487324!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50487250!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50487346!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FG 6/12/2022 09:50:41'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50487069!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50487139!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50487413!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23' prior: 50485373!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50487457!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FG 6/12/2022 09:50:41'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FG 6/12/2022 09:50:41'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50487435!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:41'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:41'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50487335!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50487518!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50487529!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50487462!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50487366!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' prior: 50486462 overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50487581 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50487395!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:42'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50487646 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50487660!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50487481!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50487560!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25' prior: 50485565!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50487540!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22' prior: 50485581!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50487750!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51' prior: 50486033!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13' prior: 50485788!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50487796!
total
	^0.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25' prior: 50486039!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50486703!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50487815!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50486714!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:42'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50487825!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50486870!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50487843!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50486729!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50486833!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50486860!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50486722!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50486806!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50486846!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50487789!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50487803!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50487936!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50487800!
total
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50487957!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50487960!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50487685 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:43'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50487714!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50487776!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50487971 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50487731!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50488026 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50487768!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50488012!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:43'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:43'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:43'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'no messages' stamp: 'FF 6/3/2022 23:18:15' prior: 50487899!
test01CartIsEmptyWhenCreated

	| cart |
	cart := Cart new.
	
	self assert: cart isEmpty.
	! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:18:51' prior: 50486591!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:19:39' prior: 50488118!
isEmpty
	^true.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:21:00' prior: 50487865!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart |
	cart := Cart new.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:21:45' prior: 50487854!
add: aSmallInteger of: anUndefinedObject 
	self shouldBeImplemented.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:43'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:23:12' prior: 50488132!
add: aQuantity of: aBook 
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/3/2022 23:24:19' overrides: 16920235!
initialize 

	books := Bag new.! !
!Cart methodsFor: 'testing' stamp: 'FF 6/3/2022 23:26:15' prior: 50488122!
isEmpty
	^books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:27:03'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:29:58' prior: 50486607!
cannotAddBookWithNonPositiveQuantity

	^'Can not add books with zero or negative quantity'! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:34:09' prior: 50488143!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/3/2022 23:35:27'!
test04cannotAddAnUncataloguedBook

	| book cart |
	cart := Cart new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'error messages' stamp: 'FF 6/3/2022 23:36:07' prior: 50486633!
cannotAddAnUncataloguedBook
	^'The book is not in the catalog'.! !
!Cart methodsFor: 'adding' stamp: 'FF 6/3/2022 23:37:34' prior: 50488175!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	"(catalog isBookCatalogued: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook]."
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:43'!
Object subclass: #Cart
	instanceVariableNames: 'books catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:13:47' prior: 50488200!
add: aQuantity of: aBook 
	aQuantity <=0 ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:14:30' prior: 50488183!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:15:05' prior: 50488229!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:15:18' prior: 50487820!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/4/2022 10:16:23' prior: 50488256!
with: aCatalog 
	
	^self new initializeWith: aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:16:43' prior: 50487837!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/4/2022 10:17:06' prior: 50488270!
initializeWith: aCatalog 
	catalog := aCatalog.
	books := Bag new.! !

!methodRemoval: Cart #initialize stamp: 'FG 6/12/2022 09:50:43'!
initialize 

	books := Bag new.!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:18:06' prior: 50488112!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: OrderedCollection new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:01' prior: 50488125!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart catalog |
	catalog := OrderedCollection with: book. 
	cart := Cart with: catalog.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:24' prior: 50487906!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test03cannotAddBooksToCartWithNonPositiveQuantity stamp: 'FG 6/12/2022 09:50:43'!
test03cannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart new.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:32' prior: 50487875!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !

!methodRemoval: CartTest #test04cannotAddAnUncataloguedBook stamp: 'FG 6/12/2022 09:50:43'!
test04cannotAddAnUncataloguedBook

	| book cart catalog |
	catalog := OrderedCollection new.
	cart := Cart with: catalog.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].!
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:19:56' prior: 50488300!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: OrderedCollection with: book.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:11' prior: 50488354!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart |
	cart := Cart with: (OrderedCollection with: book).
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:20:55' prior: 50488326!
test04CannotAddAnUncataloguedBook

	| book cart catalog |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:21:02' prior: 50488382!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: OrderedCollection new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:26:47' prior: 50487922!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: OrderedCollection new.
	
	self assert: cart books isEmpty.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:26:58' prior: 50486857!
books
	self shouldBeImplemented.
	^books! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/4/2022 10:27:03' prior: 50488415!
books
	^books! !
!CartTest methodsFor: 'test' stamp: 'FF 6/4/2022 10:29:53' prior: 50487888!
test06CartBookListIncludesBookAfterAdding

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart methodsFor: 'adding' stamp: 'FF 6/4/2022 10:39:15' prior: 50488218!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(catalog includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:44'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:44'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'FF 6/6/2022 22:51:04' prior: 50487699!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:52:35'!
checkOut: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:53:11' prior: 50488476!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:31' prior: 50486930!
cannotCheckOutAnEmptyCart
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:53:52' prior: 50488487!
cannotCheckOutAnEmptyCart
	^'An empty cart can not be checked out'	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:44'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:55:42' prior: 50487995!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
		].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:09'!
validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeValidTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/6/2022 22:56:32' prior: 50488522!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:44'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:42'!
initializeValidTo: anExpirationMonthOfYear 
	self shouldBeImplemented.
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/6/2022 22:56:54' prior: 50488543!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:13'!
checkOut: aCart payingWith: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/6/2022 22:57:52' prior: 50488556!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:06' prior: 50487013!
cannotPayWithExpiredCreditCard
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 'FF 6/6/2022 22:58:17' prior: 50488570!
cannotPayWithExpiredCreditCard
	^'The credit card is expired'! !

!methodRemoval: Cashier #checkOut: stamp: 'FG 6/12/2022 09:50:44'!
checkOut: aCart 
	^self error: self class cannotCheckOutAnEmptyCart.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 22:59:27' prior: 50488463!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [ | creditCart |cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:00:25' prior: 50488584!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier new.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/6/2022 23:02:17'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	cashier := Cashier new.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:10:01' prior: 50488598!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:29' prior: 50487096!
using: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:10:54' prior: 50488649!
using: aSalesList
	^self new initializeUsing: aSalesList. ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:44'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:08' prior: 50487114!
initializeUsing: aSalesList 
	self shouldBeImplemented.
	salesList := aSalesList.! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:11:13' prior: 50488670!
initializeUsing: aSalesList 
	salesList := aSalesList.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:13:10' prior: 50488504!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item |
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	cashier := Cashier new.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | | salesList | self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:14:12' prior: 50488681!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Month month: 5 year: 2022 ).
	
	self should: [cashier checkOut: cart payingWith: creditCard] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:17:50' prior: 50488612!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem recepit salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	recepit := cashier checkOut: cart payingWith: creditCard.
	
	self deny: recepit isNil .! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:18:52' prior: 50488722!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:20:49' prior: 50488041!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !

!methodRemoval: CashierTest #test03CheckOutCartWithItemsReturnsReceipt stamp: 'FG 6/12/2022 09:50:44'!
test03CheckOutCartWithItemsReturnsReceipt

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier with: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.!
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:21:05' prior: 50487242!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:21:53' prior: 50488763!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Month month: 6 year: 2022 ).
	
	cashier checkOut: cart payingWith: creditCard.
	
	self deny: salesList isEmpty.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:22:04' prior: 50487280!
number: aString validTo: aMonth 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNumber: aString validTo: aMonth ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 17:23:16' prior: 50488833!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:23:25' prior: 50487316!
number: aString validTo: aMonth 
	self shouldBeImplemented.! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'expirationMonthOfYear number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:17' prior: 50488849!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/7/2022 17:25:22' prior: 50488870!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:27:58' prior: 50488070!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:28:17' prior: 50488886!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:31:59' prior: 50488812!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today + 1.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:32:17' prior: 50488908!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: (Date today + 1) month.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!methodRemoval: Cashier #checkOut:payingWith: stamp: 'FG 6/12/2022 09:50:45'!
checkOut: aCart payingWith: aCreditCard 
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	^self error: self class cannotPayWithExpiredCreditCard.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:34:01' prior: 50488631!
test01CannotCheckOutEmptyCart

	| cart cashier creditCart salesList |
	cart := Cart with: OrderedCollection new.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	
	self should: [cashier checkOut: cart payingWith: creditCart on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: salesList isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:35:22' prior: 50488701!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: (Date today - 60) month.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:40:54' prior: 50488975!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:41:23' prior: 50487551!
isExpiredOn: aDate 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:48:48' prior: 50489019!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !

!methodRemoval: CreditCard #initializeValidTo: stamp: 'FG 6/12/2022 09:50:45'!
initializeValidTo: anExpirationMonthOfYear 
	expirationMonthOfYear := anExpirationMonthOfYear.!

!methodRemoval: CreditCard class #validTo: stamp: 'FG 6/12/2022 09:50:45'!
validTo: anExpirationMonthOfYear
	^self new initializeValidTo: anExpirationMonthOfYear.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:50:08' prior: 50488997!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier creditCard item salesList|
	cart := Cart with: (OrderedCollection with: item).
	cart add: 1 of: item. 
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.
	
	self should: [cashier checkOut: cart payingWith: creditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: salesList isEmpty .
		].! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:27' prior: 50488897!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:47' prior: 50489080!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	^salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 17:54:50' prior: 50489091!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	(aCreditCard isExpiredOn: aDateOfSale) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
	salesList add: 'pepe'.! !
!CreditCard methodsFor: 'testing' stamp: 'FF 6/7/2022 17:58:31' prior: 50489024!
isExpiredOn: aDate 
	| expirationDate |
	expirationDate := Date year: expirationMonth yearNumber month: expirationMonth monthName day: expirationMonth daysInMonth.
	^aDate > expirationDate.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 17:59:45' prior: 50488928!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:03:11' prior: 50488054 overrides: 16961394!
setUp

	| cart cashier creditCard item anotherItem salesList |
	item := 'primer libro'.
	anotherItem := 'segundo libro'.
	cart := Cart with: (OrderedCollection with: item with: anotherItem).
	cart add: 1 of: item.
	cart add: 2 of: anotherItem.
	salesList := OrderedCollection new.
	cashier := Cashier using: salesList.
	creditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	
	cashier checkOut: cart payingWith: creditCard on: Date today.
	
	self deny: salesList isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:45'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:46'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:07:02' prior: 50489143 overrides: 16961394!
setUp

	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: Date today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: Date today month previous.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:08:16' prior: 50488957!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: Date today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:46'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 catalog sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:22' prior: 50489208 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.
	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:10:30' prior: 50489222!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: OrderedCollection new.
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:11:36' prior: 50489043!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: catalog .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:12:50' prior: 50489122!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:15:25' prior: 50487743!
assertCartIsNotEmpty: aCart
	aCart isEmpty ifTrue:[^self error: self class cannotCheckOutAnEmptyCart ].
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:16:38' prior: 50489102!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: 'pepe'.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:17:22' prior: 50487759!
assertCreditCardIsNotExpired: aCreditCard on: anExpirationDate
	
	(aCreditCard isExpiredOn: anExpirationDate) ifTrue:[^self error: self class cannotPayWithExpiredCreditCard].
! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:19:22' prior: 50489312!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:26:33' prior: 50488079!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: catalog.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:28:51' prior: 50487929!
test07EmptyCartTotalIsZero

	| cart book|
	cart := Cart with: (OrderedCollection with: book).
	
	self assert: 0 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:13' prior: 50487965!
total
	self shouldBeImplemented.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:29:19' prior: 50489359!
total
	^0.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:34:25' prior: 50487947!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:12' prior: 50488265!
with: aPricesList 
	
	^self new initializeWith: aPricesList.! !
!Cart class methodsFor: 'instance creation' stamp: 'FF 6/7/2022 18:35:32' prior: 50489378!
with: aPriceList 
	
	^self new initializeWith: aPriceList.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/7/2022 18:35:56' prior: 50488276!
initializeWith: aPriceList 
	catalog := aPriceList.
	books := Bag new.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:46'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50489388!
initializeWith: aPriceList 
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:36:03' prior: 50488432!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includes: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/7/2022 18:37:01' prior: 50489406!
add: aQuantity of: aBook 
	(aQuantity <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:37:46' prior: 50488291!
test02EmptyCartAfterAddingABookIsNotEmpty

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	cart add: 1 of: book.
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:38:28' prior: 50488395!
test04CannotAddAnUncataloguedBook

	| book cart |
	cart := Cart with: Dictionary new.
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:07' prior: 50488422!
test06CartBookListIncludesBookAfterAdding

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book).! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:35' prior: 50488284!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: Dictionary new.
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:39:54' prior: 50488368!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| book cart pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	
	self should: [cart add: -1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:13' prior: 50488408!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: Dictionary new.
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:40:41' prior: 50489352!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: (Dictionary new).
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:39' prior: 50489366!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self deny: cart books isEmpty.
	self assert: 20 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:42:47' prior: 50489499!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart book pricesList |
	pricesList := Dictionary new.
	pricesList at: book put: 10 .
	cart := Cart with: pricesList.
	cart add: 2 of: book.
	
	self assert: 20 equals: cart total.! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:43:38' prior: 50489363!
total
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:49:55' prior: 50489520!
total
	^ books sum: [:aBook | priceList at: aBook] .
	! !
!Cart methodsFor: 'total' stamp: 'FF 6/7/2022 18:50:11' prior: 50489523!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:51:34' prior: 50489247 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	catalog := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:46'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'libro1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50489276!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: libro1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50489339!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier ticket |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	ticket := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: ticket total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50489534 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := OrderedCollection with: libro1 with: libro2.
	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/7/2022 18:51:41' prior: 50489293!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:52:26' prior: 50489589 overrides: 16961394!
setUp

	today := Date today.
	libro1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: libro1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/7/2022 18:54:19' prior: 50489330!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	salesList add: aCart.
	^aCart total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/7/2022 18:54:51' prior: 50489575!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: libro1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:24:42' prior: 50485914!
assertQuantityIsPositive: quantityOfBookToBeAdded 
	(quantityOfBookToBeAdded <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:25:00' prior: 50489417!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	(priceList includesKey: aBook) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:25:52' prior: 50485931!
assertProductExistOnPriceList: aProductToBeAdded 
	(priceList includesKey: aProductToBeAdded) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].! !
!Cart methodsFor: 'adding' stamp: 'FG 6/7/2022 20:26:05' prior: 50489663!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	self assertProductExistOnPriceList: aBook.
	books add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:27:57' prior: 50485971 overrides: 16961394!
setUp! !

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:46'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:46'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:28:47' prior: 50489690 overrides: 16961394!
setUp

	priceList := Dictionary new.
	priceList at: book1 put: 10 .! !
!CartTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:29:14' prior: 50489708 overrides: 16961394!
setUp

	book1 := 'libro 1'.
	
	priceList := Dictionary new.
	priceList at: book1 put: 10 .! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:29:38' prior: 50489462!
test01CartIsEmptyWhenCreated

	| cart |

	cart := Cart with: priceList .
	
	self assert: cart isEmpty.
	! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:25' prior: 50489428!
test02EmptyCartAfterAddingABookIsNotEmpty

	|  cart |
	cart := Cart with: priceList.
	
	cart add: 1 of: book1 .
	
	self deny: cart isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:30:48' prior: 50489469!
test03CannotAddBooksToCartWithNonPositiveQuantity

	| cart |
	cart := Cart with: priceList.
	
	self should: [cart add: -1 of: book1.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddBookWithNonPositiveQuantity equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:22' prior: 50489438!
test04CannotAddAnUncataloguedBook

	| book cart |	
	book := 'uncatolog book'.
	cart := Cart with: priceList .
	
	self should: [cart add: 1 of: book.] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cart cannotAddAnUncataloguedBook equals: anError messageText .
		self assert: cart isEmpty ].! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:33' prior: 50489485!
test05CartReturnsEmptyBookListWhenCreated

	| cart |
	cart := Cart with: priceList .
	
	self assert: cart books isEmpty.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:31:54' prior: 50489451!
test06CartBookListIncludesBookAfterAdding

	| cart  |
	cart := Cart with: priceList.
	cart add: 2 of: book1 .
	
	self deny: cart books isEmpty.
	self assert: (cart books includes: book1).! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:09' prior: 50489492!
test07EmptyCartTotalIsZero

	| cart |
	cart := Cart with: priceList .
	
	self assert: 0 equals: cart total.! !
!CartTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:32:26' prior: 50489510!
test08CartWithItemsTotalIsTheSumOfItemPrices

	| cart |

	cart := Cart with: priceList.
	cart add: 2 of: book1.
	
	self assert: 20 equals: cart total.! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:47'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:47'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:47'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:39:34' prior: 50486132!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today Month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'setUp' stamp: 'FG 6/7/2022 20:40:01' prior: 50486081 overrides: 16961394!
setUp

	today := Date today.! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:40:08' prior: 50489811!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:41:56' prior: 50488878!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number size < 16 ifTrue: [self error: self class invalidCreditCardNumber].
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 20:42:15' prior: 50486113!
invalidCreditCardNumber
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 20:42:41' prior: 50489851!
invalidCreditCardNumber
	
	^'The credit card number is invalid. The number should be 16 digits'! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:43:06' prior: 50489828!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError errorMessage.
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:43:22' prior: 50489862!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:49:57' prior: 50489841!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	(number size < 16) ifTrue: [^self error: self class invalidCreditCardNumber].
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard methodsFor: 'initialization' stamp: 'FG 6/7/2022 20:50:52' prior: 50489888!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:51:11' prior: 50488842!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:51:14' prior: 50489906!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:52:40'!
test01CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:53:00' prior: 50486195!
test02CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !

!methodRemoval: CreditCardTest #test01CardCannotBeCreatedWithInvalidNumberCharacters stamp: 'FG 6/12/2022 09:50:47'!
test01CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]!
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:56:08' prior: 50489916!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 20:57:31' prior: 50486236!
test03CardCannotBeCreatedWithValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '']
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FG 6/7/2022 20:59:43' prior: 50489966!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	
	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 21:00:18' prior: 50486273!
invalidExpirationDate
	
	^'The credit card expiration date is invalid. Ypu have to provide a Month of the Year'! !
!CreditCard class methodsFor: 'error messages' stamp: 'FG 6/7/2022 21:00:20' prior: 50490010!
invalidExpirationDate
	
	^'The credit card expiration date is invalid. You have to provide a Month of the Year'! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:01:26'!
test04ValidCreditCardCanBeCreated
	|card|

	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: card isNil.
		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:02:43'!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	
		! !

!methodRemoval: CreditCardTest #test04ValidCreditCardCanBeCreated stamp: 'FG 6/12/2022 09:50:47'!
test04ValidCreditCardCanBeCreated
	|card|

	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: card isNil.
		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:03:44' prior: 50490030!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:20'!
test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:33' prior: 50486317!
test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired stamp: 'FG 6/12/2022 09:50:47'!
test04CreditCardWithExpirationDatePreviousOfTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous .
	
	self assert: (card isExpiredOn: today).

		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:04:40' prior: 50486337!
test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired stamp: 'FG 6/12/2022 09:50:47'!
test04CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next .
	
	self deny: (card isExpiredOn: today).

		!
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:05:40'!
test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:06:10' prior: 50486365!
test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		! !

!methodRemoval: CreditCardTest #test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod stamp: 'FG 6/12/2022 09:50:47'!
test05CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month.
	
	self deny: (card isExpiredOn: today).

		!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:47'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 libro2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50489558!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50489642!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50489617 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	libro2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: libro2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:36' prior: 50489604!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: libro2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:47'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50490168 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50490154!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FG 6/7/2022 21:07:45' prior: 50490184!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FG 6/7/2022 21:08:09' prior: 50486504!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!methodRemoval: CashierTest #test04CheckOutCartWithItemsReturnsATicketWithTotal stamp: 'FG 6/12/2022 09:50:47'!
test04CheckOutCartWithItemsReturnsATicketWithTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.!
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/8/2022 17:40:16' prior: 50480526!
test03CardCannotBeCreatedWhenValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '']
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !

!methodRemoval: CreditCardTest #test03CardCannotBeCreatedWithValidToIsNotAMonth stamp: 'FG 6/12/2022 09:50:47'!
test03CardCannotBeCreatedWithValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '']
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 17:48:00' prior: 50490248!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales.
	 	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:47'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 17:59:08'!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier total merchantProcessorSimulator |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessorSimulator := MerchantProcessorSimulator new.
	cashier := Cashier using: sales debitProcessor: merchantProcessorSimulator.
	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/8/2022 17:59:39'!
using: anOrderedCollection debitProcessor: aMerchantProcessorSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeUsing: anOrderedCollection debitProcessor: aMerchantProcessorSimulator ! !
!Cashier class methodsFor: 'instance creation' stamp: 'FF 6/8/2022 18:01:18' prior: 50490337!
using: aSalesList debitProcessor: aMerchantProcessor
	^self new using: aSalesList debitProcessor: aMerchantProcessor ! !
!Cashier methodsFor: 'initialization' stamp: 'FF 6/8/2022 18:01:37'!
using: anOrderedCollection debitProcessor: aMerchantProcessorSimulator 
	self shouldBeImplemented.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:47'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'FF 6/8/2022 18:02:09' prior: 50490355!
using: aSalesList debitProcessor: aMerchantProcessor
	salesList := aSalesList .
	merchantProcessor := aMerchantProcessor.! !

!methodRemoval: Cashier #initializeUsing: stamp: 'FG 6/12/2022 09:50:48'!
initializeUsing: aSalesList 
	salesList := aSalesList.!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:04:03' prior: 50489261!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: priceList .
	cashier := Cashier using: sales.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:48'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:05:38' prior: 50490206 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous.
	merchantProcessor := MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:06:00' prior: 50490380!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: priceList .
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:06:39' prior: 50490137!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:06:53' prior: 50490236!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:07:16' prior: 50490300!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:07:42' prior: 50490469!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:09:53' prior: 50490320!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier merchantProcessorSimulator |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessorSimulator := MerchantProcessorSimulator new.
	cashier := Cashier using: sales debitProcessor: merchantProcessorSimulator.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithStolenCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:11:29' prior: 50490496!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier merchantProcessorSimulator |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessorSimulator := MerchantProcessorSimulator new.
	cashier := Cashier using: sales debitProcessor: merchantProcessorSimulator.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithStolenCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:14:38' prior: 50490517!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateStolenCreditCard.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithStolenCreditCard equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!MerchantProcessorSimulator methodsFor: 'simulation' stamp: 'FF 6/8/2022 18:14:58' prior: 50481164!
simulateStolenCreditCard
	self shouldBeImplemented.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:48'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'actionToSimulate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'simulation' stamp: 'FF 6/8/2022 18:17:25' prior: 50490560!
simulateStolenCreditCard
	actionToSimulate := [self error: self class cannotPayWithStolenCreditCard].! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/8/2022 18:20:26' prior: 50489633!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale
	| totalToDebit |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .	totalToDebit := aCart total.
	merchantProcessor debit: totalToDebit from: aCreditCard .
	
	salesList add: aCart.
	^totalToDebit.! !
!Cashier methodsFor: 'checking out' stamp: 'FF 6/8/2022 18:20:54' prior: 50490579!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale

	| totalToDebit |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	
	totalToDebit := aCart total.
	merchantProcessor debit: totalToDebit from: aCreditCard .
	
	salesList add: aCart.
	
	^totalToDebit.! !
!MerchantProcessorSimulator methodsFor: 'action' stamp: 'FF 6/8/2022 18:22:01' prior: 50481170!
debit: aSmallInteger from: aCreditCard 
	self shouldBeImplemented.! !
!MerchantProcessorSimulator methodsFor: 'action' stamp: 'FF 6/8/2022 18:22:39' prior: 50490605!
debit: anAmount from: aCreditCard 
	actionToSimulate value.! !
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'FF 6/8/2022 18:22:51' prior: 50481201!
cannotPayWithStolenCreditCard
	self shouldBeImplemented.! !
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'FF 6/8/2022 18:24:07' prior: 50490617!
cannotPayWithStolenCreditCard
	^'The credit card has been notified as stolen'.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:32:36'!
test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateCreditCardWithoutEnoughLimit.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithCreditCardWithoutEnoughLimit equals: anError messageText .
			self assert: sales isEmpty .
		].! !
!MerchantProcessorSimulator methodsFor: 'simulation' stamp: 'FF 6/8/2022 18:33:00' prior: 50481157!
simulateCreditCardWithoutEnoughLimit
	self shouldBeImplemented.! !
!MerchantProcessorSimulator methodsFor: 'simulation' stamp: 'FF 6/8/2022 18:35:08' prior: 50490650!
simulateCreditCardWithoutEnoughLimit
	actionToSimulate := [self error: self class cannotPayWithCreditCardWithoutEnoughLimit].! !
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'FF 6/8/2022 18:35:27' prior: 50481195!
cannotPayWithCreditCardWithoutEnoughLimit
	self shouldBeImplemented.! !
!MerchantProcessorSimulator class methodsFor: 'error messages' stamp: 'FF 6/8/2022 18:36:48' prior: 50490664!
cannotPayWithCreditCardWithoutEnoughLimit
	^'The credit card limit is not enough'.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:40:32' prior: 50490438!
test02CannotCheckOutCartProvidingAnExpiredCreditCard

	| cart cashier |
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!MerchantProcessorSimulator methodsFor: 'testing' stamp: 'FF 6/8/2022 18:41:03' prior: 50481176!
answeredCalls
	self shouldBeImplemented.! !
!MerchantProcessorSimulator methodsFor: 'testing' stamp: 'FF 6/8/2022 18:41:07' prior: 50490696!
answeredCalls
	^0.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:41:36' prior: 50490676!
test02CannotCheckOutCartProvidingAnExpiredCreditCard
	| cart cashier |
	
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:42:17' prior: 50490705!
test02CannotCheckOutCartProvidingAnExpiredCreditCard
	| cart cashier |
	
	cart := Cart with: priceList .
	cart add: 1 of: book1. 
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: expiredCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: Cashier cannotPayWithExpiredCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:43:38' prior: 50490483!
test04CheckOutCartWithItemsReturnsTotal

	| cart cashier total |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	total := cashier checkOut: cart payingWith: validCreditCard on: today.
	
	self assert: cart total equals: total.
	self assert: 1 equals: merchantProcessor answeredCalls.! !

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:48'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'actionToSimulate answeredCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessorSimulator methodsFor: 'testing' stamp: 'FF 6/8/2022 18:44:17' prior: 50490701!
answeredCalls
	^answeredCalls.! !
!MerchantProcessorSimulator methodsFor: 'action' stamp: 'FF 6/8/2022 18:45:00' prior: 50490611!
debit: anAmount from: aCreditCard 
	answeredCalls := answeredCalls + 1.
	actionToSimulate value.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:45:52' prior: 50490422!
test01CannotCheckOutEmptyCart

	| cart cashier |
	cart := Cart with: priceList .
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | self assert: Cashier cannotCheckOutAnEmptyCart equals: anError messageText .
			self assert: sales isEmpty.
			self assert: 0 equals: merchantProcessor answeredCalls.
		].! !
!MerchantProcessorSimulator methodsFor: 'initialization' stamp: 'FF 6/8/2022 18:46:35' prior: 50481181 overrides: 16920235!
initialize
	answeredCalls := 0.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:47:13' prior: 50490456!
test03CheckOutCartWithItemsAddElementToSalesList

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	cashier := Cashier using: sales debitProcessor: merchantProcessor .
	 	
	cashier checkOut: cart payingWith: validCreditCard on: today.
		self assert: 1 equals: merchantProcessor answeredCalls.
	self deny: sales isEmpty.! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:47:24' prior: 50490539!
test05CannotCheckOutCartProvidingStolenCreditCard

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateStolenCreditCard.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithStolenCreditCard equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 1 equals: merchantProcessor answeredCalls.
		].! !
!CashierTest methodsFor: 'test' stamp: 'FF 6/8/2022 18:47:34' prior: 50490628!
test06CannotCheckOutCartProvidingCreditCardWithoutEnoughLimit

	| cart cashier |
	
	cart := Cart with: priceList.
	cart add: 1 of: book1.
	cart add: 2 of: book2.
	merchantProcessor simulateCreditCardWithoutEnoughLimit.
	cashier := Cashier using: sales debitProcessor: merchantProcessor.
	
	self should: [cashier checkOut: cart payingWith: validCreditCard on: today] 
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError |  self assert: MerchantProcessorSimulator cannotPayWithCreditCardWithoutEnoughLimit equals: anError messageText .
			self assert: sales isEmpty .
			self assert: 1 equals: merchantProcessor answeredCalls.
		].! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:48'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:48'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:48'!
Object subclass: #InterfaceFacade
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 10:34:50' prior: 50480620!
test01ValidClientCanCreateACart

	| cartId clientId interface listCart password |
	interface := InterfaceFacade new.

	cartId := interface createCartFor: clientId signInWith: password.
	
	listCart := interface listCart: cartId .
	
	self assert: listCart notNil.
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 10:36:00' prior: 50490885!
test01ValidClientCanCreateACart

	| cartId clientId interface listCart password |
	interface := InterfaceFacade new.
	clientId := 'Valid client'.
	password := 'Valid password'.

	cartId := interface createCartFor: clientId signInWith: password.
	
	listCart := interface listCart: cartId .
	
	self assert: listCart notNil.
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:36:31' prior: 50481079!
createCartFor: aString signInWith: aString2 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:37:09' prior: 50490910!
createCartFor: aClientId signInWith: aPassword 
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:37:14' prior: 50490915!
createCartFor: aClientId signInWith: aPassword 
	^0.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:37:32' prior: 50481091!
listCart: aSmallInteger 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:38:00' prior: 50490925!
listCart: aCartId 
	^OrderedCollection new.! !

!classDefinition: #AuthenticatorServiceSimulator category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:48'!
Object subclass: #AuthenticatorServiceSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 10:46:15'!
test02ValidClientCanCreateACart

	| cartId clientId interface password authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: clientId sigInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 10:46:59' prior: 50490942!
test02ValidClientCanCreateACart

	| cartId clientId interface password authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!AuthenticatorServiceSimulator class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 10:47:15' prior: 50480812!
simulateClientIsValid: aFalse 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeSimulateClientIsValid: aFalse ! !
!AuthenticatorServiceSimulator class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 10:48:02' prior: 50490987!
simulateClientIsValid: isAValidClient
	
	^self new initializeSimulateClientIsValid: isAValidClient ! !
!AuthenticatorServiceSimulator class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 10:48:32' prior: 50490997!
simulateClientIsValid: isAValidClient
	
	^self new initializeIsValid: isAValidClient ! !

!classDefinition: #AuthenticatorServiceSimulator category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:48'!
Object subclass: #AuthenticatorServiceSimulator
	instanceVariableNames: 'isAValidClient_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AuthenticatorServiceSimulator methodsFor: 'initialization' stamp: 'FF 6/11/2022 10:48:44' prior: 50480792!
initializeIsValid: isAValidClient 
	self shouldBeImplemented.
	isAValidClient_CHANGE_ME := isAValidClient.! !
!AuthenticatorServiceSimulator methodsFor: 'initialization' stamp: 'FF 6/11/2022 10:49:33' prior: 50491019!
initializeIsValid: isAValidClient 
	| isValidClient |
	isValidClient := isAValidClient.! !
!AuthenticatorServiceSimulator methodsFor: 'initialization' stamp: 'FF 6/11/2022 10:51:10' prior: 50491026!
initializeIsValid: isAValidClient 
	^ isAValidClient.! !

!classDefinition: #AuthenticatorServiceSimulator category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:48'!
Object subclass: #AuthenticatorServiceSimulator
	instanceVariableNames: 'isValidClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AuthenticatorServiceSimulator methodsFor: 'initialization' stamp: 'FF 6/11/2022 10:51:36' prior: 50491033!
initializeIsValid: isAValidClient 
	isValidClient :=isAValidClient.! !
!InterfaceFacade class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 10:51:52'!
authenticator: anAuthenticatorServiceSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAuthenticator: anAuthenticatorServiceSimulator ! !
!InterfaceFacade class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 10:52:23' prior: 50491052!
authenticator: anAuthenticatorService 
	^self new authenticator: anAuthenticatorService ! !

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:49'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'nil' stamp: 'FF 6/11/2022 10:53:28'!
authenticator: anAuthenticatorService

	authenticatorService := anAuthenticatorService.
! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 10:56:41' prior: 50490920!
createCartFor: aClientId signInWith: aPassword 
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [^self error: self class clientIsNotValid].
	^0! !
!AuthenticatorServiceSimulator methodsFor: 'testing' stamp: 'FF 6/11/2022 10:57:05' prior: 50480797!
canAuthenticate: aString with: aString2 
	self shouldBeImplemented.! !
!AuthenticatorServiceSimulator methodsFor: 'testing' stamp: 'FF 6/11/2022 10:57:34' prior: 50491090!
canAuthenticate: aClientId with: aPassword 
	^isValidClient. ! !
!InterfaceFacade class methodsFor: 'error messages' stamp: 'FF 6/11/2022 10:57:47' prior: 50481137!
clientIsNotValid
	self shouldBeImplemented.! !
!InterfaceFacade class methodsFor: 'error messages' stamp: 'FF 6/11/2022 10:58:39' prior: 50491102!
clientIsNotValid
	^'The client is not valid, check the provided password and clientId'! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 10:59:29' prior: 50490897!
test01ValidClientCanCreateACart

	| cartId clientId interface listCart password authenticatorServiceSimulator |
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.

	cartId := interface createCartFor: clientId signInWith: password.
	
	listCart := interface listCart: cartId .
	
	self assert: listCart notNil.
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:01:50' prior: 50480630!
test02InvalidClientCannotCreateACart

	| cartId clientId interface password authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !

!methodRemoval: InterfaceFacadeTest #test02ValidClientCanCreateACart stamp: 'FG 6/12/2022 09:50:49'!
test02ValidClientCanCreateACart

	| cartId clientId interface password authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:02:22' prior: 50491113!
test01ValidClientCanCreateACart

	| cartId clientId interface listCart password authenticatorServiceSimulator |
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.

	cartId := interface createCartFor: clientId signInWith: password.
	
	listCart := interface listCart: cartId .
	
	self assert: listCart isEmpty.
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:07:12' prior: 50480643!
test03CreateCartReturnsUniqueCartId

	| clientId interface password authenticatorServiceSimulator firstCartId secondCartId |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	firstCartId := interface createCartFor: clientId signInWith: password.
	secondCartId := interface createCartFor: clientId signInWith: password.

	self deny: (firstCartId = secondCartId).
	

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:07:29' prior: 50491196!
test03CreateCartReturnsUniqueCartId

	| clientId interface password authenticatorServiceSimulator firstCartId secondCartId |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	clientId := 'Valid client'.
	password := 'Valid password'.
	
	firstCartId := interface createCartFor: clientId signInWith: password.
	secondCartId := interface createCartFor: clientId signInWith: password.

	self deny: (firstCartId = secondCartId).
	

	
	
	! !

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:49'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:14:14' prior: 50491081!
createCartFor: aClientId signInWith: aPassword 
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [^self error: self class clientIsNotValid].
	lastCartId := lastCartId + 1.
	^lastCartId.! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:14:44' prior: 50491075!
authenticator: anAuthenticatorService

	authenticatorService := anAuthenticatorService.
	lastCartId := 0
! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:49'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:49'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:49'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:49'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:49'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:49'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:50'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 11:26:41' prior: 50480593 overrides: 16961394!
setUp

	"clientId := 'ClientId'.
	password := 'password'."
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:27:41' prior: 50491177!
test01ValidClientCanCreateACart

	| cartId aClientId interface listCart aPassword authenticatorServiceSimulator |
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	aClientId := 'Valid client'.
	aPassword := 'Valid password'.

	cartId := interface createCartFor: aClientId signInWith: aPassword.
	
	listCart := interface listCart: cartId .
	
	self assert: listCart isEmpty.
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:28:04' prior: 50491132!
test02InvalidClientCannotCreateACart

	| cartId aClientId interface password authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	aClientId := 'Valid client'.
	password := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: aClientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:28:15' prior: 50491372!
test02InvalidClientCannotCreateACart

	| cartId aClientId interface aPassword authenticatorServiceSimulator |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: false.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	aClientId := 'Valid client'.
	aPassword := 'Valid password'.
	
	self should: [ cartId := interface createCartFor: aClientId signInWith: aPassword ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:28:24' prior: 50491217!
test03CreateCartReturnsUniqueCartId

	| aClientId interface password authenticatorServiceSimulator firstCartId secondCartId |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	aClientId := 'Valid client'.
	password := 'Valid password'.
	
	firstCartId := interface createCartFor: aClientId signInWith: password.
	secondCartId := interface createCartFor: aClientId signInWith: password.

	self deny: (firstCartId = secondCartId).
	

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:28:46' prior: 50491418!
test03CreateCartReturnsUniqueCartId

	| aClientId interface aPassword authenticatorServiceSimulator firstCartId secondCartId |
	
	authenticatorServiceSimulator := AuthenticatorServiceSimulator simulateClientIsValid: true.
	interface := InterfaceFacade authenticator: authenticatorServiceSimulator.
	aClientId := 'Valid client'.
	aPassword := 'Valid password'.
	
	firstCartId := interface createCartFor: aClientId signInWith: aPassword.
	secondCartId := interface createCartFor: aClientId signInWith: aPassword.

	self deny: (firstCartId = secondCartId).
	

	
	
	! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:50'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:50'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 11:28:58' prior: 50491331 overrides: 16961394!
setUp

	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:30:04' prior: 50491353!
test01ValidClientCanCreateACart

	| cartId listCart |

	cartId := interfaceFacade createCartFor: clientId signInWith: password .
	
	listCart := interfaceFacade listCart: cartId .
	
	self assert: listCart isEmpty.
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:30:42' prior: 50491395!
test02InvalidClientCannotCreateACart

	| cartId |
	
	self should: [ cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:31:34' prior: 50491439!
test03CreateCartReturnsUniqueCartId

	| firstCartId secondCartId |
	
	firstCartId := interfaceFacade createCartFor: clientId signInWith: password .
	secondCartId := interfaceFacade createCartFor: clientId signInWith: password .

	self deny: (firstCartId = secondCartId).
	

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:33:48' prior: 50480655!
test04ListCartOfInvalidCartIdThrowsError

	| listCart  |
	
	self should: [ listCart := interfaceFacade listCart: invalidCartId. ]
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
		self assert: listCart isNil.
	]
	

	
	
	! !

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:50'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:36:12' prior: 50490930!
listCart: aCartId 
	(carts includes: aCartId) ifFalse:[^ self error: self class cartDoesNotExist].
	^OrderedCollection new.! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:37:09' prior: 50491255!
authenticator: anAuthenticatorService

	authenticatorService := anAuthenticatorService.
	carts := OrderedCollection new.
	lastCartId := 0
! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:37:52' prior: 50491245!
createCartFor: aClientId signInWith: aPassword 
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [^self error: self class clientIsNotValid].
	lastCartId := lastCartId + 1.
	carts add: lastCartId. 
	^lastCartId.! !
!InterfaceFacade class methodsFor: 'error messages' stamp: 'FF 6/11/2022 11:38:01' prior: 50481132!
cartDoesNotExist
	self shouldBeImplemented.! !
!InterfaceFacade class methodsFor: 'error messages' stamp: 'FF 6/11/2022 11:38:27' prior: 50491591!
cartDoesNotExist
	^'The cartId provided is not valid'! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:41:47'!
test05ListCartOfCartWithItemsShowsTheISBNAndQuantity

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId sigInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: validBookISBN equals: (listCart at: 1) book.
	self assert: quantity equals: (listCart at: 1) quantity.
	

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 11:42:09' prior: 50491601!
test05ListCartOfCartWithItemsShowsTheISBNAndQuantity

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: validBookISBN equals: (listCart at: 1) book.
	self assert: quantity equals: (listCart at: 1) quantity.
	

	
	
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:42:31' prior: 50481056!
addToCart: aSmallInteger book: aString quantity: aSmallInteger3 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:45:03' prior: 50491637!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd

	| cartFound |
	cartFound := carts at: aCartId.
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:45:36' prior: 50491572!
authenticator: anAuthenticatorService

	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0
! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:46:17' prior: 50491565!
listCart: aCartId 
	carts at: aCartId ifAbsent:[^ self error: self class cartDoesNotExist].
	^OrderedCollection new.! !

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:50'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:47:39' prior: 50491580!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [^self error: self class clientIsNotValid].
	
	newCart := Cart with: priceList.
	lastCartId := lastCartId + 1.
	carts at: lastCartId put: newCart. 
	^lastCartId.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:47:48' prior: 50491673!
createCartFor: aClientId signInWith: aPassword 
	| newCart |
	
	(authenticatorService canAuthenticate: aClientId with: aPassword) ifFalse: [^self error: self class clientIsNotValid].
	
	newCart := Cart with: priceList.
	lastCartId := lastCartId + 1.
	carts at: lastCartId put: newCart. 
	^lastCartId.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 11:51:04' prior: 50491486 overrides: 16961394!
setUp

	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 11:51:16' prior: 50491699 overrides: 16961394!
setUp

	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacade class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 11:51:46' prior: 50481125!
priceList: aDictionary authenticator: anAuthenticatorServiceSimulator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializePriceList: aDictionary authenticator: anAuthenticatorServiceSimulator ! !
!InterfaceFacade class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 11:52:17' prior: 50491745!
priceList: aPriceList authenticator: anAuthenticatorService
	
	^self new priceList: aPriceList authenticator: anAuthenticatorService! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:52:24' prior: 50481103!
priceList: aDictionary authenticator: anAuthenticatorServiceSimulator 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:52:40' prior: 50491765!
priceList: aPriceList authenticator: anAuthenticatorService
	! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:52:58' prior: 50491772!
priceList: aPriceList authenticator: anAuthenticatorService
	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0! !
!InterfaceFacade methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:53:11' prior: 50491777!
priceList: aPriceList authenticator: anAuthenticatorService
	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0.
	priceList := aPriceList .! !

!methodRemoval: InterfaceFacade #authenticator: stamp: 'FG 6/12/2022 09:50:50'!
authenticator: anAuthenticatorService

	authenticatorService := anAuthenticatorService.
	carts := Dictionary new.
	lastCartId := 0
!

!methodRemoval: InterfaceFacade class #authenticator: stamp: 'FG 6/12/2022 09:50:50'!
authenticator: anAuthenticatorService 
	^self new authenticator: anAuthenticatorService !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 11:56:00' prior: 50491658!
listCart: aCartId 
	| cartFound |
	cartFound := carts at: aCartId ifAbsent:[^self error: self class cartDoesNotExist].
	^cartFound books.! !
!Cart methodsFor: 'accessing' stamp: 'FF 6/11/2022 11:56:28' prior: 50488419!
books

	^books copy.! !
!Cart methodsFor: 'initialization' stamp: 'FF 6/11/2022 11:56:42' prior: 50489400!
initializeWith: aPriceList
	priceList := aPriceList.
	books := Bag new.! !
!Cart methodsFor: 'total' stamp: 'FF 6/11/2022 12:07:47' prior: 50489528!
total
	^ books sum: [:aBook | priceList at: aBook] ifEmpty: [^0].
	! !
!Cart methodsFor: 'adding' stamp: 'FF 6/11/2022 12:08:02' prior: 50489681!
add: aQuantity of: aBook 
	self assertQuantityIsPositive: aQuantity .
	self assertProductExistOnPriceList: aBook.
	books add: aBook withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'FF 6/11/2022 12:08:09' prior: 50489673!
assertProductExistOnPriceList: aProductToBeAdded 
	(priceList includesKey: aProductToBeAdded) ifFalse: [^ self error: self class cannotAddAnUncataloguedBook].! !
!Cart methodsFor: 'adding' stamp: 'FF 6/11/2022 12:08:16' prior: 50489655!
assertQuantityIsPositive: quantityOfBookToBeAdded 
	(quantityOfBookToBeAdded <=0) ifTrue: [^self error: self class cannotAddBookWithNonPositiveQuantity ].! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 12:11:10' prior: 50491619!
test05ListCartOfCartWithItemsShowsTheISBNAndQuantity

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: (listCart includes: validBookISBN).
	self assert: quantity equals: (listCart occurrencesOf: validBookISBN).
	

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:13:39' prior: 50480668!
test05ListCartIncludesAddedItemsAndItsQuantity

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: (listCart includes: validBookISBN).
	self assert: quantity equals: (listCart occurrencesOf: validBookISBN).
	

	
	
	! !

!methodRemoval: InterfaceFacadeTest #test05ListCartOfCartWithItemsShowsTheISBNAndQuantity stamp: 'FG 6/12/2022 09:50:50'!
test05ListCartOfCartWithItemsShowsTheISBNAndQuantity

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: (listCart includes: validBookISBN).
	self assert: quantity equals: (listCart occurrencesOf: validBookISBN).
	

	
	
	!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:18:34' prior: 50480685!
test06AddToCartWithInvalidCartIdThrowsError

	| listCart  |
	
	self should: [ listCart := interfaceFacade listCart: invalidCartId. ]
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
		self assert: listCart isNil.
	]
	

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:21:28' prior: 50491905!
test06AddToCartWithInvalidCartIdThrowsError
	
	self should: [ interfaceFacade addToCart: invalidCartId book: validBookISBN quantity: 2. ]
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [:anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
		]
	

	
	
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:22:23' prior: 50491643!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd

	| cartFound |
	cartFound := carts at: aCartId ifAbsent:[^self error: self class cartDoesNotExist].
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:23:44' prior: 50491930!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd

	| cartFound |
	cartFound := carts at: aCartId ifAbsent:[self error: self class cartDoesNotExist].
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:24:18' prior: 50481097!
findCart: aCartId

	^ carts at: aCartId ifAbsent:[self error: self class cartDoesNotExist]! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:24:18' prior: 50491940!
addToCart: aCartId book: aBookISBN quantity: aQuantityToAdd

	| cartFound |
	cartFound := self findCart: aCartId.
	cartFound add: aQuantityToAdd of: aBookISBN.
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:25:31' prior: 50491806!
listCart: aCartId 
	| cartFound |
	cartFound := self findCart: aCartId.
	^cartFound books.! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:31:41' prior: 50480697!
test07CheckOutCartReturnsTransactionId

	|  cartId  listCart  quantity|
	
	quantity := 1.
	
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	
	listCart := interfaceFacade listCart: cartId.
	
	self deny: listCart isEmpty.
	self assert: (listCart includes: validBookISBN).
	self assert: quantity equals: (listCart occurrencesOf: validBookISBN).
	

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:31:56' prior: 50491970!
test07CheckOutCartReturnsTransactionId

	|  cartId  listCart  quantity|
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
	listCart := interfaceFacade listCart: cartId.
	self deny: listCart isEmpty.
	self assert: (listCart includes: validBookISBN).
	self assert: quantity equals: (listCart occurrencesOf: validBookISBN).
	

	
	
	! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:50'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password aCreditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:50'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password aCreditCardNumber anExpirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:51'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password aCreditCardNumber anExpirationMonth cardOwnerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:41:04' prior: 50491988!
test07CheckOutCartReturnsTransactionId

	|  cartId  quantity listPurchases transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: aCreditCardNumber expirationDate: anExpirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.


	
	
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:41:40' prior: 50481064!
checkOut: aSmallInteger withCardNumber: anUndefinedObject expirationDate: anUndefinedObject3 from: anUndefinedObject4 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 19:42:45' prior: 50492068!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	! !
!InterfaceFacade methodsFor: 'client' stamp: 'FF 6/11/2022 19:43:25' prior: 50481111!
listPurchasesFrom: aString signInWith: aString2 
	self shouldBeImplemented.! !
!InterfaceFacade methodsFor: 'client' stamp: 'FF 6/11/2022 19:47:16' prior: 50492083!
listPurchasesFrom: aClientId signInWith: aPassword 
	^OrderedCollection with: ''.! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:52:39'!
test08InvalidClientCannotCheckOutACart

	| cartId |
	
	self should: [ cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:55:14' prior: 50480717!
test08CheckOutCartOfInvalidCartIdThrowsError

	| cartId |
	
	self should: [ cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !

!methodRemoval: InterfaceFacadeTest #test08InvalidClientCannotCheckOutACart stamp: 'FG 6/12/2022 09:50:51'!
test08InvalidClientCannotCheckOutACart

	| cartId |
	
	self should: [ cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	!
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:56:34' prior: 50492108!
test08CheckOutCartOfInvalidCartIdThrowsError

	| cartId |
	cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password
	self should: [ interfaceFacade checkOut: invalidCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:51'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password aCreditCardNumber expirationMonth cardOwnerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 19:56:55' prior: 50492136!
test08CheckOutCartOfInvalidCartIdThrowsError

	| cartId |
	cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password
	self should: [ interfaceFacade checkOut: invalidCartId withCardNumber: aCreditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 19:56:55' prior: 50492047!
test07CheckOutCartReturnsTransactionId

	|  cartId  quantity listPurchases transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: aCreditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.


	
	
	! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:51'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password creditCardNumber expirationMonth cardOwnerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 19:57:04' prior: 50492169!
test08CheckOutCartOfInvalidCartIdThrowsError

	| cartId |
	cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password
	self should: [ interfaceFacade checkOut: invalidCartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 19:57:04' prior: 50492187!
test07CheckOutCartReturnsTransactionId

	|  cartId  quantity listPurchases transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.


	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:57:21' prior: 50492223!
test08CheckOutCartOfInvalidCartIdThrowsError

	| cartId |
	cartId := interfaceFacadeInvalid createCartFor: clientId signInWith: password.
	self should: [ interfaceFacade checkOut: invalidCartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade clientIsNotValid equals: anError messageText.
		self assert: cartId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 19:59:35' prior: 50492262!
test08CheckOutCartOfInvalidCartIdThrowsError

	| transactionId |
	self should: [ transactionId := interfaceFacade checkOut: invalidCartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
		self assert: transactionId isNil.
	].

	
	
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 20:00:13' prior: 50492076!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	self findCart: aCartId.! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:05:42' prior: 50480733!
test09CheckOutCartWithInvalidCreditCardThrowsError

	| transactionId cartId |
	cartId := interfaceFacade createCartFor: clientId signInWith: password .
	self should: [ transactionId := interfaceFacade checkOut: cartId withCardNumber: '123' expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: InterfaceFacade cartDoesNotExist equals: anError messageText.
		self assert: transactionId isNil.
	].

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:06:28' prior: 50492303!
test09CheckOutCartWithInvalidCreditCardThrowsError

	| transactionId cartId |
	cartId := interfaceFacade createCartFor: clientId signInWith: password .
	self should: [ transactionId := interfaceFacade checkOut: cartId withCardNumber: '123' expirationDate: expirationMonth from: cardOwnerName ] 
	raise:  Error - MessageNotUnderstood 
	withExceptionDo: [ :anError |
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText.
		self assert: transactionId isNil.
	].

	
	
	! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 20:08:51' prior: 50492296!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard |
	self findCart: aCartId.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:09:15' prior: 50489898!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:09:27' prior: 50489993!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:11:29'!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: owner  	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:11:29'!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: owner 
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50489875!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month from: aCardOwnerName]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50490109!
test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month from: aCardOwnerName.
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50490061!
test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous from: aCardOwnerName .
	
	self assert: (card isExpiredOn: today).

		! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50492360!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50490274!
test03CardCannotBeCreatedWhenValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '' from: aCardOwnerName]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50489938!
test02CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month from: aCardOwnerName]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50490405 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next from: aCardOwnerName.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous from: aCardOwnerName.
	merchantProcessor := MerchantProcessorSimulator new.! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50490081!
test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next from: aCardOwnerName .
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'FF 6/11/2022 20:11:30' prior: 50492377!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: owner  	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !

!methodRemoval: CreditCard class #number:validTo: stamp: 'FG 6/12/2022 09:50:51'!
number: aCreditCardNumber validTo: anExpirationMonthOfYear 	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName !

!methodRemoval: CreditCard #number:validTo: stamp: 'FG 6/12/2022 09:50:51'!
number: aCreditCardNumber validTo: anExpirationMonthOfYear
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.
	!
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:11:43' prior: 50492513!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: owner  	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: owner ! !
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:13:53' prior: 50492394!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName 
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:51'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:14:08' prior: 50492573!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName 
	number := aCreditCardNumber.
	expirationMonth := anExpirationMonthOfYear.	
	owner := aCardOwnerName .! !
!CreditCard class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:14:34' prior: 50492555!
number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName  	

	(aCreditCardNumber size < 16) ifTrue: [^self error: self invalidCreditCardNumber].
	(aCreditCardNumber noneSatisfy: [:aCharacter | aCharacter isDigit ]) ifTrue: [^self error: self invalidCreditCardNumber].
	(anExpirationMonthOfYear isKindOf: Month) ifFalse: [^self error: self invalidExpirationDate].
	^self new number: aCreditCardNumber validTo: anExpirationMonthOfYear from: aCardOwnerName ! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:52'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today merchantProcessor ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:16:33' prior: 50492484 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next from: ownerName.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous from: ownerName.
	merchantProcessor := MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:16:55' prior: 50492626 overrides: 16961394!
setUp

	today := Date today.
	book1 := 'primer libro'.
	book2 := 'segundo libro'.

	priceList := Dictionary new.
	priceList at: book1 put: 10.
	priceList at: book2 put: 20.
	
	ownerName := 'owner'.

	sales := OrderedCollection new.
	
	validCreditCard := CreditCard number: '4545454545454545' validTo: today month next from: ownerName.
	expiredCreditCard := CreditCard number: '4545454545454545' validTo: today month previous from: ownerName.
	merchantProcessor := MerchantProcessorSimulator new.! !

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:52'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:17:33' prior: 50489824 overrides: 16961394!
setUp

	today := Date today.
	ownerName := 'owner'! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:17:43' prior: 50492416!
test06CreditCardExpirationMonthIsIncludedOnTheExpirationPeriod

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month from: ownerName .
	
	self deny: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:18:14' prior: 50492402!
test01CardCannotBeCreatedWithInvalidNumberLenght
	|card|

	self should: [card := CreditCard number: '2323' validTo: today month from: ownerName ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:18:21' prior: 50492469!
test02CardCannotBeCreatedWithInvalidNumberCharacters
	|card|

	self should: [card := CreditCard number: 'aaaaaaaaaaaaaaaa' validTo: today month from: ownerName ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidCreditCardNumber equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:18:26' prior: 50492455!
test03CardCannotBeCreatedWhenValidToIsNotAMonth
	|card|

	self should: [card := CreditCard number: '4251236587945120' validTo: '' from: ownerName ]
	raise: Error - MessageNotUnderstood 
	withExceptionDo: [:anError | 
		self assert: CreditCard invalidExpirationDate equals: anError messageText .
		self assert: card isNil.
		]! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:18:32' prior: 50492426!
test04CreditCardWithExpirationDateBeforeTodayShouldBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month previous from: ownerName .
	
	self assert: (card isExpiredOn: today).

		! !
!CreditCardTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:18:44' prior: 50492503!
test05CreditCardWithExpirationDateAfterTodayShouldNotBeExpired

	|card|
	
	card := CreditCard number: '4251236587945120' validTo: today month next from: ownerName .
	
	self deny: (card isExpiredOn: today).

		! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:20:30' prior: 50491722 overrides: 16961394!
setUp

	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.

	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !

!classDefinition: #InterfaceFacadeTest category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:52'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password creditCardNumber expirationMonth cardOwnerName today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:21:20' prior: 50492747 overrides: 16961394!
setUp

	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:21:38' prior: 50492786 overrides: 16961394!
setUp

	today := Date today.
	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:21:49' prior: 50492812 overrides: 16961394!
setUp

	today := Date today.
	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month next.
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:21:57' prior: 50492839 overrides: 16961394!
setUp

	today := Date today.
	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month next.
	
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'setUp' stamp: 'FF 6/11/2022 20:22:22' prior: 50492866 overrides: 16961394!
setUp

	today := Date today.
	clientId := 'ClientId'.
	password := 'password'.
	invalidCartId := nil.
	validBookISBN := 'book1'.
	priceList := Dictionary new.
	priceList at: validBookISBN put: 15.
	creditCardNumber := '1234123412341234'.
	expirationMonth := today month next.
	cardOwnerName := 'owner'.
	
	authenticatorServiceSimulatingValidClient := AuthenticatorServiceSimulator simulateClientIsValid: true.
	authenticatorServiceSimulatingInvalidClient := AuthenticatorServiceSimulator simulateClientIsValid: false.

	interfaceFacade := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingValidClient.
	
	interfaceFacadeInvalid := InterfaceFacade priceList: priceList authenticator: authenticatorServiceSimulatingInvalidClient.! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:32:29' prior: 50480751!
test10ListPurchasesReturnsClientTransactions

	|  cartId  quantity listPurchases transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.
	self assert: (listPurchases at: 1) books includes: validBookISBN .
	self assert: quantity equals: ((listPurchases at: 1) books occurrencesOf: validBookISBN).

	
	
	! !
!InterfaceFacadeTest methodsFor: 'test' stamp: 'FF 6/11/2022 20:33:45' prior: 50492920!
test10ListPurchasesReturnsClientTransactions

	|  cartId  quantity listPurchases transactionId |
	quantity := 1.
	cartId := interfaceFacade createCartFor: clientId signInWith: password.
	interfaceFacade addToCart: cartId book: validBookISBN quantity: quantity.
		
	transactionId := interfaceFacade checkOut: cartId withCardNumber: creditCardNumber expirationDate: expirationMonth from: cardOwnerName .
	listPurchases := interfaceFacade listPurchasesFrom: clientId signInWith: password.
	
	self assert: transactionId notNil.
	self deny: listPurchases isEmpty.
	self assert: (listPurchases at: 1) books includes: validBookISBN .
	self assert: quantity equals: ((listPurchases at: 1) books occurrencesOf: validBookISBN).
	self assert: 15 equals: ((listPurchases at: 1) total).

	
	
	! !
!InterfaceFacade methodsFor: 'client' stamp: 'FF 6/11/2022 20:37:07' prior: 50492089!
listPurchasesFrom: aClientId signInWith: aPassword 
	^OrderedCollection with: ''.! !
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 20:39:24' prior: 50492341!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart|
	cart := self findCart: aCartId.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cart.! !

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:52'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #InterfaceFacade category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:52'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList merchantProcessor today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!InterfaceFacade methodsFor: 'cart' stamp: 'FF 6/11/2022 20:41:39' prior: 50492980!
checkOut: aCartId withCardNumber: aCreditCardNumber expirationDate: anExpirationDate from: aCardOwnerName 
	| creditCard cart cashier |
	cart := self findCart: aCartId.
	cashier := Cashier using: priceList debitProcessor: merchantProcessor.
	creditCard := CreditCard number: aCreditCardNumber validTo: anExpirationDate from: aCardOwnerName .
	cashier checkOut: cart payingWith: creditCard on: today.! !

!classDefinition: #Ticket category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:52'!
Object subclass: #Ticket
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checking out' stamp: 'FF 6/11/2022 20:45:14' prior: 50490592!
checkOut: aCart payingWith: aCreditCard on: aDateOfSale

	| totalToDebit ticket |
	self assertCartIsNotEmpty: aCart.
	self assertCreditCardIsNotExpired: aCreditCard on: aDateOfSale .
	
	totalToDebit := aCart total.
	merchantProcessor debit: totalToDebit from: aCreditCard .
	ticket := Ticket of: aCart books total: totalToDebit .
	salesList add: ticket.
	
	^ticket.! !
!Ticket class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:45:58' prior: 50481229!
of: aBag total: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aBag total: aSmallInteger ! !
!Ticket class methodsFor: 'instance creation' stamp: 'FF 6/11/2022 20:46:42' prior: 50493047!
of: aBookBag total: anAmount 
	
	^self new of: aBookBag total: anAmount ! !
!Ticket methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:46:56' prior: 50481217!
of: aBag total: aSmallInteger 
	self shouldBeImplemented.! !

!classDefinition: #Ticket category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:52'!
Object subclass: #Ticket
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Ticket category: 'TusLibros' stamp: 'FG 6/12/2022 09:50:52'!
Object subclass: #Ticket
	instanceVariableNames: 'books total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Ticket methodsFor: 'initialization' stamp: 'FF 6/11/2022 20:47:37' prior: 50493062!
of: aBookBag total: anAmount 
	books := aBookBag .
	total := anAmount .! !

!classRemoval: #Ticket stamp: 'FG 6/12/2022 13:59:19'!
Object subclass: #Ticket
	instanceVariableNames: 'books total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorSimulator stamp: 'FG 6/12/2022 13:59:19'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'actionToSimulate answeredCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InterfaceFacade stamp: 'FG 6/12/2022 13:59:19'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList merchantProcessor today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'FG 6/12/2022 13:59:19'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'FG 6/12/2022 13:59:20'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FG 6/12/2022 13:59:20'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #AuthenticatorServiceSimulator stamp: 'FG 6/12/2022 13:59:20'!
Object subclass: #AuthenticatorServiceSimulator
	instanceVariableNames: 'isValidClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InterfaceFacadeTest stamp: 'FG 6/12/2022 13:59:21'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password creditCardNumber expirationMonth cardOwnerName today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'FG 6/12/2022 13:59:21'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FG 6/12/2022 13:59:21'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today merchantProcessor ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FG 6/12/2022 13:59:22'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Fabian\source\repos\IngenieriaI\08-TusLibros\Iteracion3\TusLibros.st----!

!classRemoval: #TimerSimulator stamp: 'FG 6/12/2022 14:56:28'!
Object subclass: #TimerSimulator
	instanceVariableNames: 'now'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Ticket stamp: 'FG 6/12/2022 14:56:28'!
Object subclass: #Ticket
	instanceVariableNames: 'books total clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #MerchantProcessorSimulator stamp: 'FG 6/12/2022 14:56:28'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: 'actionToSimulate answeredCalls'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InterfaceFacade stamp: 'FG 6/12/2022 14:56:28'!
Object subclass: #InterfaceFacade
	instanceVariableNames: 'authenticatorService lastCartId carts priceList merchantProcessor today salesList lastTransactionId timer cartsLastTimeUsed'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'FG 6/12/2022 14:56:29'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'FG 6/12/2022 14:56:29'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FG 6/12/2022 14:56:29'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #AuthenticatorServiceSimulator stamp: 'FG 6/12/2022 14:56:30'!
Object subclass: #AuthenticatorServiceSimulator
	instanceVariableNames: 'isValidClient'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #InterfaceFacadeTest stamp: 'FG 6/12/2022 14:56:30'!
TestCase subclass: #InterfaceFacadeTest
	instanceVariableNames: 'invalidCartId validBookISBN priceList authenticatorServiceSimulatingValidClient authenticatorServiceSimulatingInvalidClient interfaceFacade interfaceFacadeInvalid clientId password creditCardNumber expirationMonth cardOwnerName today timerSimulator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'FG 6/12/2022 14:56:30'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today ownerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FG 6/12/2022 14:56:31'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today merchantProcessor ownerName clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FG 6/12/2022 14:56:31'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1 clientId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Fabian\source\repos\2022-1c\08-TusLibros\Iteracion2\TusLibros-33.st----!

!classRemoval: #StoreTestObjectsFactory stamp: 'FG 6/12/2022 20:33:12'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 'FG 6/12/2022 20:33:12'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'FG 6/12/2022 20:33:12'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'FG 6/12/2022 20:33:12'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FG 6/12/2022 20:33:13'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FG 6/12/2022 20:33:13'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FG 6/12/2022 20:33:13'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Fabian\source\repos\IngenieriaI\08-TusLibros\Iteracion3\TusLibros.st----!

----STARTUP---- (14 June 2022 18:15:36) as C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\CuisUniversity-5096.image!


!classRemoval: #CreditCard stamp: 'FG 6/14/2022 18:15:59'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 'FG 6/14/2022 18:16:00'!
Object subclass: #Cashier
	instanceVariableNames: 'salesList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'FG 6/14/2022 18:16:00'!
Object subclass: #Cart
	instanceVariableNames: 'books priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCardTest stamp: 'FG 6/14/2022 18:16:00'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 'FG 6/14/2022 18:16:00'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'book1 book2 priceList sales validCreditCard expiredCreditCard today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'FG 6/14/2022 18:16:01'!
TestCase subclass: #CartTest
	instanceVariableNames: 'priceList book1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\Packages\System\Collections-CompactArrays.pck.st----!

----End fileIn of C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\Packages\Features\Compression.pck.st----!

----End fileIn of C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\Packages\Features\Sound.pck.st----!

----End fileIn of C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\Packages\Features\Cryptography-DigitalSignatures.pck.st----!

----End fileIn of C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\Packages\Features\Identities-UUID.pck.st----!

----End fileIn of C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\Packages\System\Network-Kernel.pck.st----!

----End fileIn of C:\Users\Fabian\source\repos\2022-1c\08-TusLibros\WebClient.pck.st----!

----End fileIn of C:\Users\Fabian\source\repos\2022-1c\08-TusLibros\TusLibros-Model Ejercicio it4.st----!

----End fileIn of C:\Users\Fabian\source\repos\2022-1c\08-TusLibros\TusLibrosREST Ejercicio it4.st----!

----End fileIn of C:\Users\Fabian\source\repos\2022-1c\08-TusLibros\TusLibros-Tests Ejercicio it4.st----!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:21:04'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 18:33:50' prior: 50533991!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	
	[totalSales := self totalSalesOf: anItem.] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.] fork.
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:33:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:33:52'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:33:54'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:34:12'!
FAILURE!

aBlock timeToRun!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 18:36:08' prior: 50536001!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	
	[totalSales := self totalSalesOf: anItem.
	totalMoney := self totalMoneyRaisedBy: anItem	] fork.
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:36:45'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 18:36:59' prior: 50536104!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	
	[totalSales := self totalSalesOf: anItem.] fork.
	[totalMoney := self totalMoneyRaisedBy: anItem.] fork.
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:37:04'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 18:38:46' prior: 50536126!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales semaphore|

	bookPerformance := Dictionary new.
	
	semaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.	 
	totalMoney := self totalMoneyRaisedBy: anItem] fork.
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:38:53'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 18:40:45' prior: 50536149!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.	 
	totalMoney := self totalMoneyRaisedBy: anItem] fork.
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'validUsersAndPasswords catalog lastId merchantProcessor salesBook clock cartSessions semaphore'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros-Model' stamp: 'FG 6/14/2022 18:40:54'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'validUsersAndPasswords catalog lastId merchantProcessor salesBook clock cartSessions semaphore'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'FG 6/14/2022 18:41:08' prior: 50534088!
initializeAuthenticatingWith: aValidUsersAndPasswords 
	acceptingItemsOf: aCatalog 
	registeringOn: aSalesBook 
	debitingThrought: aMerchantProcessor 
	measuringTimeWith: aClock

	validUsersAndPasswords := aValidUsersAndPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	
	cartSessions := Dictionary new.
	lastId := 0.
	
	semaphore := Semaphore new.! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 18:43:18' prior: 50536173!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[totalSales := self totalSalesOf: anItem.	 
	totalMoney := self totalMoneyRaisedBy: anItem] fork.
	
	semaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 18:50:28' prior: 50536227!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	[[totalSales := self totalSalesOf: anItem.	] ensure: [semaphore signal]] fork.
	
	[[totalMoney := self totalMoneyRaisedBy: anItem] ensure: [semaphore signal]] fork.
	
	semaphore wait.
	semaphore wait.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

----SNAPSHOT----(14 June 2022 18:50:34) CuisUniversity-5096.image priorSource: 4698664!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:50:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:50:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:50:45'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:50:47'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:51:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:51:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:51:21'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:51:23'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:51:29'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 18:52:26' prior: 50534032!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	[[totalSales := self totalSales.] ensure: [semaphore signal]] fork.
	
	[[totalMoney := self totalMoneyRaised.] ensure: [semaphore signal]] fork.
	
	semaphore wait.
	semaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:52:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FG 6/14/2022 18:52:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:52:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:52:39'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 18:53:31' prior: 50536449!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	"[[totalSales := self totalSales.] ensure: [semaphore signal]] fork.
	
	[[totalMoney := self totalMoneyRaised.] ensure: [semaphore signal]] fork.
	
	semaphore wait.
	semaphore wait."
	
	[totalSales := self totalSales.
		totalMoney := self totalMoneyRaised. ] forkAndWait 
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 18:53:36' prior: 50536557!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	"[[totalSales := self totalSales.] ensure: [semaphore signal]] fork.
	
	[[totalMoney := self totalMoneyRaised.] ensure: [semaphore signal]] fork.
	
	semaphore wait.
	semaphore wait."
	
	[totalSales := self totalSales.
		totalMoney := self totalMoneyRaised. ] forkAndWait .
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

----SNAPSHOT----(14 June 2022 18:53:42) CuisUniversity-5096.image priorSource: 6547724!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 18:53:50'!
FAILURE!

aBlock timeToRun!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 18:55:45' prior: 50536580!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	[[totalSales := self totalSales.] ensure: [semaphore signal]] fork.
	
	[[totalMoney := self totalMoneyRaised.] ensure: [semaphore signal]] fork.
	
	semaphore wait.
	semaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 19:02:45'!
parallelExcecution: collectionOfClosuresToExcecuteInParallel
	
	collectionOfClosuresToExcecuteInParallel do: [ :aClosure |  [ aClosure ensure: [semaphore signal]] fork. ].
	1 to: (collectionOfClosuresToExcecuteInParallel size) do: [semaphore wait.]
	
	

! !

Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'validUsersAndPasswords catalog lastId merchantProcessor salesBook clock cartSessions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros-Model' stamp: 'FG 6/14/2022 19:02:51'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'validUsersAndPasswords catalog lastId merchantProcessor salesBook clock cartSessions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-Model'!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 19:04:05' prior: 50536246!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	
	self parallelExcecution: (OrderedCollection with: [totalSales := self totalSalesOf: anItem.	] with: [totalMoney := self totalMoneyRaisedBy: anItem]).

	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 19:04:45' prior: 50536631!
parallelExcecution: collectionOfClosuresToExcecuteInParallel
	|semaphore|
	
	semaphore := Semaphore new.
	collectionOfClosuresToExcecuteInParallel do: [ :aClosure |  [ aClosure ensure: [semaphore signal]] fork. ].
	1 to: (collectionOfClosuresToExcecuteInParallel size) do: [semaphore wait.]
	
	

! !
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'FG 6/14/2022 19:04:52' prior: 50536210!
initializeAuthenticatingWith: aValidUsersAndPasswords 
	acceptingItemsOf: aCatalog 
	registeringOn: aSalesBook 
	debitingThrought: aMerchantProcessor 
	measuringTimeWith: aClock

	validUsersAndPasswords := aValidUsersAndPasswords.
	catalog := aCatalog.
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor.
	clock := aClock.
	
	cartSessions := Dictionary new.
	lastId := 0.! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 19:05:09'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 19:05:09'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 19:06:49' prior: 50536680!
parallelExcecution: collectionOfClosuresToExcecuteInParallel
	|semaphore|
	
	semaphore := Semaphore new.
	collectionOfClosuresToExcecuteInParallel do: [ :aClosure |  [ aClosure ensure: [semaphore signal]] fork. ].
	1 to: (collectionOfClosuresToExcecuteInParallel size) do: [:index | semaphore wait.]
	
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 19:07:07'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'FG 6/14/2022 19:07:50' prior: 50536611!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	self parallelExcecution: (OrderedCollection with: [totalSales := self totalSales.] with: [totalMoney := self totalMoneyRaised.]).
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FG 6/14/2022 19:07:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 19:07:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 19:07:53'!
PASSED!

----SNAPSHOT----(14 June 2022 19:08:04) CuisUniversity-5096.image priorSource: 6558463!

----SNAPSHOT----(14 June 2022 19:10:13) CuisUniversity-5096.image priorSource: 6565759!

TusLibrosClientTestWindow open!

TusLibrosServerRestInterface installForDefaultSystem!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FG 6/14/2022 19:25:11' prior: 50534412!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	[resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.] forkAndWait.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !

----SNAPSHOT----(14 June 2022 19:25:16) CuisUniversity-5096.image priorSource: 6565848!

WebServer reset!

WebServer reset!

TusLibrosClientTestWindow open!

TusLibrosServerRestInterface installForDefaultSystem!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FG 6/14/2022 19:26:50' prior: 50534441!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	[resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.] forkAndWait.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FG 6/14/2022 19:28:01' prior: 50536863!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	[resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.] fork.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FG 6/14/2022 19:28:44' prior: 50536881!
listCart: cartId

[
	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]
		] fork.! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open !

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FG 6/14/2022 19:37:18' prior: 50536840!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 19:37:40' prior: 50534561!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		
		[cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] fork ].! !

----SNAPSHOT----(14 June 2022 19:37:46) CuisUniversity-5096.image priorSource: 6566544!

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 19:38:45' prior: 50536929!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		
		[cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] forkAndWait ].! !

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!

----STARTUP---- (14 June 2022 19:40:42) as C:\Users\Fabian\Desktop\Ing1\Ejercicio 8\windows64\CuisUniversity-5096.image!

!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 19:38:45' prior: 50536929!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		
		[cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] forkAndWait ].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 19:41:15' prior: 50536965!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'FG 6/14/2022 19:43:18' prior: 50536895!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]
! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 19:44:16' prior: 50536977!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		[cartId := self selectedCartId.
		currentSelectedCartContent := restInterface listCart: cartId.
		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ] fork ].! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 19:46:25' prior: 50534552!
createCart

	| newCartId |
	
	[newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived] fork.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 19:46:36' prior: 50534539!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		[cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)] fork ]! !

TusLibrosClientTestWindow open.!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 19:53:15' prior: 50537008!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[[ currentSelectedCartContent := restInterface listCart: cartId.] ensure: [ 		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ]] fork ].! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 19:58:20'!
excecuteAsynchronously: aBlockToExcecute atFinishDo: aFinalBlock

	[aBlockToExcecute ensure:aFinalBlock ] fork.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 19:59:40' prior: 50537032!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		[cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)] fork ].


	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		self excecuteAsynchronously: [ restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. ] atFinishDo: [ self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)] ]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 20:00:00' prior: 50537076!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		[cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId.
		self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)] fork ].


	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		self excecuteAsynchronously: [ restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. ] 
			atFinishDo: [ self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)] 
	]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 20:00:06' prior: 50537099!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		self excecuteAsynchronously: [ restInterface add: 1 of: bookIsbn toCartIdentifiedAs: cartId. ] 
			atFinishDo: [ self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)] 
	]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 20:00:37' prior: 50537053!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		self excecuteAsynchronously: [ currentSelectedCartContent := restInterface listCart: cartId.] 
			atFinishDo: [ 		self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ]
	].! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'FG 6/14/2022 20:03:12' prior: 50537023!
createCart

	| newCartId |
	
	self excecuteAsynchronously: [ newCartId := restInterface createCartFor: 'hernan' password: 'smalltalk'.] 
		atFinishDo: [ 	cartIds add: newCartId.
					self triggerEvent: #newCartIdArrived. ]! !

WebServer reset.
TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'FG 6/14/2022 20:04:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 20:04:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'FG 6/14/2022 20:04:31'!
PASSED!